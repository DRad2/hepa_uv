
HEPA_UV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800a4b0  0800a4b0  0001a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a864  0800a864  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a864  0800a864  0001a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a86c  0800a86c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001d8  0800aa4c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800aa4c  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f593  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003392  00000000  00000000  0003f7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001581  00000000  00000000  000446e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f5b  00000000  00000000  00045c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f970  00000000  00000000  0004cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2bb3  00000000  00000000  0006c534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088c4  00000000  00000000  0015f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  001679ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a498 	.word	0x0800a498

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800a498 	.word	0x0800a498

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 f9f3 	bl	80022e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f8a4 	bl	8001048 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fcea 	bl	80018d8 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8000f04:	f000 f9f8 	bl	80012f8 <_ZL14MX_FDCAN1_Initv>
  MX_I2C2_Init();
 8000f08:	f000 fa8c 	bl	8001424 <_ZL12MX_I2C2_Initv>
  MX_LPUART1_UART_Init();
 8000f0c:	f000 fb26 	bl	800155c <_ZL20MX_LPUART1_UART_Initv>
  MX_TIM2_Init();
 8000f10:	f000 fbc4 	bl	800169c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000f14:	f000 fc4c 	bl	80017b0 <_ZL12MX_TIM3_Initv>
  MX_ADC1_Init();
 8000f18:	f000 f8ea 	bl	80010f0 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000f1c:	f000 f976 	bl	800120c <_ZL12MX_ADC2_Initv>
  MX_I2C3_Init();
 8000f20:	f000 face 	bl	80014c0 <_ZL12MX_I2C3_Initv>
  MX_SPI2_Init();
 8000f24:	f000 fb78 	bl	8001618 <_ZL12MX_SPI2_Initv>
	  //send_msg(msg, 4);
	  //can_listen();



	  if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <main+0x148>)
 8000f2c:	f003 f8be 	bl	80040ac <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00e      	beq.n	8000f5e <main+0x6a>
	  {
		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f003 f8c8 	bl	80040dc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2120      	movs	r1, #32
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <main+0x148>)
 8000f52:	f003 f8c3 	bl	80040dc <HAL_GPIO_WritePin>
		  ready = 1;
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <main+0x14c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e01e      	b.n	8000f9c <main+0xa8>
	  }
	  else if (HAL_GPIO_ReadPin(POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 8000f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f62:	4836      	ldr	r0, [pc, #216]	; (800103c <main+0x148>)
 8000f64:	f003 f8a2 	bl	80040ac <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00e      	beq.n	8000f96 <main+0xa2>
	  	  {
	  		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f003 f8ac 	bl	80040dc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	482c      	ldr	r0, [pc, #176]	; (800103c <main+0x148>)
 8000f8a:	f003 f8a7 	bl	80040dc <HAL_GPIO_WritePin>
	  		  ready = 1;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <main+0x14c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e002      	b.n	8000f9c <main+0xa8>
	  	  }
	  else ready = 0;
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <main+0x14c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

	  /* Test UV ON/OFF Pin */
	  if (ready == 0)
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <main+0x14c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d12c      	bne.n	8000ffe <main+0x10a>
	  {
		  if (!HAL_GPIO_ReadPin(UV_NO_GPIO_Port, UV_NO_Pin))
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4825      	ldr	r0, [pc, #148]	; (800103c <main+0x148>)
 8000fa8:	f003 f880 	bl	80040ac <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d020      	beq.n	8000ffe <main+0x10a>
	    {
	  	  HAL_GPIO_TogglePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin);
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f003 f8a3 	bl	800410c <HAL_GPIO_TogglePin>
	  	  if(!HAL_GPIO_ReadPin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin))
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f003 f86e 	bl	80040ac <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2301      	moveq	r3, #1
 8000fd8:	2300      	movne	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <main+0xf8>
	  	  {
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0x148>)
 8000fe6:	f003 f879 	bl	80040dc <HAL_GPIO_WritePin>
 8000fea:	e004      	b.n	8000ff6 <main+0x102>
	  	  }
	  	  else HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2120      	movs	r1, #32
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <main+0x148>)
 8000ff2:	f003 f873 	bl	80040dc <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffa:	f001 f9e3 	bl	80023c4 <HAL_Delay>
	    }
	  }

	  /* Test HEPA ON/OFF Pin */
		if (!HAL_GPIO_ReadPin(HEPA_NO_GPIO_Port, HEPA_NO_Pin))
 8000ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <main+0x150>)
 8001004:	f003 f852 	bl	80040ac <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00d      	beq.n	8001034 <main+0x140>
		{
		  HAL_GPIO_TogglePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin);
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f003 f875 	bl	800410c <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(HEPA_B_CTRL_GPIO_Port, HEPA_B_CTRL_Pin);
 8001022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <main+0x150>)
 8001028:	f003 f870 	bl	800410c <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f001 f9c8 	bl	80023c4 <HAL_Delay>
		}
	   HAL_Delay(100);
 8001034:	2064      	movs	r0, #100	; 0x64
 8001036:	f001 f9c5 	bl	80023c4 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 800103a:	e775      	b.n	8000f28 <main+0x34>
 800103c:	48000800 	.word	0x48000800
 8001040:	20000000 	.word	0x20000000
 8001044:	48000400 	.word	0x48000400

08001048 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	; 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2238      	movs	r2, #56	; 0x38
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 facd 	bl	80085f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800106e:	f003 f98d 	bl	800438c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001080:	2303      	movs	r3, #3
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001084:	2301      	movs	r3, #1
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001088:	2308      	movs	r3, #8
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fa29 	bl	80044f4 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <_Z18SystemClock_Configv+0x6e>
  {
    Error_Handler();
 80010b2:	f000 fcd5 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2303      	movs	r3, #3
 80010bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fd28 	bl	8004b24 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80010e4:	f000 fcbc 	bl	8001a60 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3750      	adds	r7, #80	; 0x50
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fa74 	bl	80085f6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001114:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001138:	2204      	movs	r2, #4
 800113a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800113e:	2200      	movs	r2, #0
 8001140:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001144:	2200      	movs	r2, #0
 8001146:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800114a:	2201      	movs	r2, #1
 800114c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001158:	2200      	movs	r2, #0
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800117a:	f001 fb45 	bl	8002808 <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800118e:	f000 fc67 	bl	8001a60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 800119e:	f002 fa27 	bl	80035f0 <HAL_ADCEx_MultiModeConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf14      	ite	ne
 80011a8:	2301      	movne	r3, #1
 80011aa:	2300      	moveq	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80011b2:	f000 fc55 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <_ZL12MX_ADC1_Initv+0x118>)
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011be:	2302      	movs	r3, #2
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 80011d4:	f001 fccc 	bl	8002b70 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80011e8:	f000 fc3a 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011ec:	217f      	movs	r1, #127	; 0x7f
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <_ZL12MX_ADC1_Initv+0x114>)
 80011f0:	f002 f99c 	bl	800352c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f001 f8e5 	bl	80023c4 <HAL_Delay>

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3730      	adds	r7, #48	; 0x30
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001f4 	.word	0x200001f4
 8001208:	19200040 	.word	0x19200040

0800120c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f007 f9ec 	bl	80085f6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001220:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <_ZL12MX_ADC2_Initv+0xe4>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800122a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001246:	2204      	movs	r2, #4
 8001248:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800124c:	2200      	movs	r2, #0
 800124e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001252:	2200      	movs	r2, #0
 8001254:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001258:	2201      	movs	r2, #1
 800125a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 800127a:	2200      	movs	r2, #0
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001286:	4819      	ldr	r0, [pc, #100]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 8001288:	f001 fabe 	bl	8002808 <HAL_ADC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 800129c:	f000 fbe0 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <_ZL12MX_ADC2_Initv+0xe8>)
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a4:	2306      	movs	r3, #6
 80012a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ac:	237f      	movs	r3, #127	; 0x7f
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b0:	2304      	movs	r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 80012be:	f001 fc57 	bl	8002b70 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80012d2:	f000 fbc5 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80012d6:	217f      	movs	r1, #127	; 0x7f
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <_ZL12MX_ADC2_Initv+0xe0>)
 80012da:	f002 f927 	bl	800352c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80012de:	200a      	movs	r0, #10
 80012e0:	f001 f870 	bl	80023c4 <HAL_Delay>

  /* USER CODE END ADC2_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000260 	.word	0x20000260
 80012f0:	50000100 	.word	0x50000100
 80012f4:	1d500080 	.word	0x1d500080

080012f8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	//Change TxHeader.Identifier, RxHeader.Identifier
	/* AUX1 ID */
	TxHeader.Identifier = 0x23; //0x555;
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001300:	2223      	movs	r2, #35	; 0x23
 8001302:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//TxHeader.Identifier = 0xFAAA;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800130c:	4b41      	ldr	r3, [pc, #260]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001314:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001318:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800132c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]

	/* AUX1 ID */
	RxHeader.Identifier = 0x23; //0x555;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 800133c:	2223      	movs	r2, #35	; 0x23
 800133e:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//RxHeader.Identifier = 0xFAAA; //0x555;
	RxHeader.IdType = FDCAN_EXTENDED_ID;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	605a      	str	r2, [r3, #4]
	RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001350:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001354:	60da      	str	r2, [r3, #12]
	RxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	RxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	RxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001364:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001368:	619a      	str	r2, [r3, #24]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 800136c:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <_ZL14MX_FDCAN1_Initv+0x128>)
 800136e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 800138a:	2200      	movs	r2, #0
 800138c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 8001390:	2200      	movs	r2, #0
 8001392:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 8001396:	2201      	movs	r2, #1
 8001398:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 800139c:	2201      	movs	r2, #1
 800139e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 110;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013a2:	226e      	movs	r2, #110	; 0x6e
 80013a4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 17;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013a8:	2211      	movs	r2, #17
 80013aa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013ba:	2220      	movs	r2, #32
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013d8:	f002 fb02 	bl	80039e0 <HAL_FDCAN_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <_ZL14MX_FDCAN1_Initv+0xf8>
  {
    Error_Handler();
 80013ec:	f000 fb38 	bl	8001a60 <Error_Handler>
*/
/* Configure global filter to reject all non-matching frames */
    //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

/* Start CAN */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <_ZL14MX_FDCAN1_Initv+0x124>)
 80013f2:	f002 fc4f 	bl	8003c94 <HAL_FDCAN_Start>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZL14MX_FDCAN1_Initv+0x112>
	{
		// Couldn't start FDCAN
		Error_Handler();
 8001406:	f000 fb2b 	bl	8001a60 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000057c 	.word	0x2000057c
 8001418:	20000554 	.word	0x20000554
 800141c:	200002cc 	.word	0x200002cc
 8001420:	40006400 	.word	0x40006400

08001424 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <_ZL12MX_I2C2_Initv+0x94>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <_ZL12MX_I2C2_Initv+0x98>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 800143c:	2201      	movs	r2, #1
 800143e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800145e:	4815      	ldr	r0, [pc, #84]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001460:	f002 fe6e 	bl	8004140 <HAL_I2C_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8001474:	f000 faf4 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 800147c:	f002 feef 	bl	800425e <HAL_I2CEx_ConfigAnalogFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8001490:	f000 fae6 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <_ZL12MX_I2C2_Initv+0x90>)
 8001498:	f002 ff2c 	bl	80042f4 <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80014ac:	f000 fad8 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000330 	.word	0x20000330
 80014b8:	40005800 	.word	0x40005800
 80014bc:	00602173 	.word	0x00602173

080014c0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <_ZL12MX_I2C3_Initv+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <_ZL12MX_I2C3_Initv+0x98>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014d8:	2201      	movs	r2, #1
 80014da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014fa:	4815      	ldr	r0, [pc, #84]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 80014fc:	f002 fe20 	bl	8004140 <HAL_I2C_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001510:	f000 faa6 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 8001518:	f002 fea1 	bl	800425e <HAL_I2CEx_ConfigAnalogFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 800152c:	f000 fa98 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4807      	ldr	r0, [pc, #28]	; (8001550 <_ZL12MX_I2C3_Initv+0x90>)
 8001534:	f002 fede 	bl	80042f4 <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001548:	f000 fa8a 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000037c 	.word	0x2000037c
 8001554:	40007800 	.word	0x40007800
 8001558:	00602173 	.word	0x00602173

0800155c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001562:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001564:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80015a0:	f005 fccc 	bl	8006f3c <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80015b4:	f000 fa54 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b8:	2100      	movs	r1, #0
 80015ba:	4815      	ldr	r0, [pc, #84]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80015bc:	f006 f9f8 	bl	80079b0 <HAL_UARTEx_SetTxFifoThreshold>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 80015d0:	f000 fa46 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80015d8:	f006 fa28 	bl	8007a2c <HAL_UARTEx_SetRxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 80015ec:	f000 fa38 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80015f2:	f006 f9a4 	bl	800793e <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8001606:	f000 fa2b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003c8 	.word	0x200003c8
 8001614:	40008000 	.word	0x40008000

08001618 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <_ZL12MX_SPI2_Initv+0x80>)
 8001620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001632:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001636:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001646:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800164a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001666:	2207      	movs	r2, #7
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 800166c:	2200      	movs	r2, #0
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001672:	2208      	movs	r2, #8
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <_ZL12MX_SPI2_Initv+0x7c>)
 8001678:	f003 fea8 	bl	80053cc <HAL_SPI_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf14      	ite	ne
 8001682:	2301      	movne	r3, #1
 8001684:	2300      	moveq	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800168c:	f000 f9e8 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000458 	.word	0x20000458
 8001698:	40003800 	.word	0x40003800

0800169c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016d2:	223f      	movs	r2, #63	; 0x3f
 80016d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016de:	f04f 32ff 	mov.w	r2, #4294967295
 80016e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f0:	482e      	ldr	r0, [pc, #184]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 80016f2:	f003 ff16 	bl	8005522 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 8001706:	f000 f9ab 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4619      	mov	r1, r3
 8001716:	4825      	ldr	r0, [pc, #148]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 8001718:	f004 fc58 	bl	8005fcc <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800172c:	f000 f998 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001730:	481e      	ldr	r0, [pc, #120]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 8001732:	f004 f8bb 	bl	80058ac <HAL_TIM_IC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf14      	ite	ne
 800173c:	2301      	movne	r3, #1
 800173e:	2300      	moveq	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001746:	f000 f98b 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 800175a:	f005 fb1b 	bl	8006d94 <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	bf14      	ite	ne
 8001764:	2301      	movne	r3, #1
 8001766:	2300      	moveq	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800176e:	f000 f977 	bl	8001a60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001772:	230a      	movs	r3, #10
 8001774:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	4619      	mov	r1, r3
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <_ZL12MX_TIM2_Initv+0x110>)
 800178a:	f004 fa6f 	bl	8005c6c <HAL_TIM_IC_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800179e:	f000 f95f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004bc 	.word	0x200004bc

080017b0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80017e4:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <_ZL12MX_TIM3_Initv+0x124>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80017ea:	223f      	movs	r2, #63	; 0x3f
 80017ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80017f6:	2227      	movs	r2, #39	; 0x27
 80017f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001806:	4832      	ldr	r0, [pc, #200]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 8001808:	f003 fe8b 	bl	8005522 <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800181c:	f000 f920 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182a:	4619      	mov	r1, r3
 800182c:	4828      	ldr	r0, [pc, #160]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 800182e:	f004 fbcd 	bl	8005fcc <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001842:	f000 f90d 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 8001848:	f003 fec2 	bl	80055d0 <HAL_TIM_PWM_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 800185c:	f000 f900 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 8001870:	f005 fa90 	bl	8006d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001884:	f000 f8ec 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 800188c:	231e      	movs	r3, #30
 800188e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80018a0:	f004 fa80 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80018b4:	f000 f8d4 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start pwm generation
 80018b8:	2100      	movs	r1, #0
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80018bc:	f003 feea 	bl	8005694 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <_ZL12MX_TIM3_Initv+0x120>)
 80018c2:	f000 fba3 	bl	800200c <HAL_TIM_MspPostInit>

}
 80018c6:	bf00      	nop
 80018c8:	3738      	adds	r7, #56	; 0x38
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000508 	.word	0x20000508
 80018d4:	40000400 	.word	0x40000400

080018d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ee:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <_ZL12MX_GPIO_Initv+0x17c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DRIVE_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin
 800194e:	2200      	movs	r2, #0
 8001950:	f240 6182 	movw	r1, #1666	; 0x682
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f002 fbc0 	bl	80040dc <HAL_GPIO_WritePin>
                          |HEPA_W_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_B_CTRL_Pin|HEPA_G_CTRL_Pin|nEEPROM_WP_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001962:	483d      	ldr	r0, [pc, #244]	; (8001a58 <_ZL12MX_GPIO_Initv+0x180>)
 8001964:	f002 fbba 	bl	80040dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f640 0107 	movw	r1, #2055	; 0x807
 800196e:	483b      	ldr	r0, [pc, #236]	; (8001a5c <_ZL12MX_GPIO_Initv+0x184>)
 8001970:	f002 fbb4 	bl	80040dc <HAL_GPIO_WritePin>

  /*UV_ON_OFF is set by default to keep UV bulb off */
  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2110      	movs	r1, #16
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f002 fbae 	bl	80040dc <HAL_GPIO_WritePin>


  /*Configure GPIO pins : UV_NO_Pin DOOR_OPEN_MCU_Pin POS_SW__MCU_Pin */
  GPIO_InitStruct.Pin = UV_NO_Pin|DOOR_OPEN_MCU_Pin|POS_SW_MCU_Pin;
 8001980:	f640 0384 	movw	r3, #2180	; 0x884
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4830      	ldr	r0, [pc, #192]	; (8001a58 <_ZL12MX_GPIO_Initv+0x180>)
 8001996:	f002 fa07 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DRIVE_Pin */
  GPIO_InitStruct.Pin = LED_DRIVE_Pin;
 800199a:	2302      	movs	r3, #2
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800199e:	2311      	movs	r3, #17
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DRIVE_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f002 f9f8 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_ON_OFF_MCU_Pin HEPA_ON_OFF_Pin HEPA_R_CTRL_Pin HEPA_W_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin|HEPA_W_CTRL_Pin;
 80019b8:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f002 f9e8 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_B_CTRL_Pin HEPA_G_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_B_CTRL_Pin|HEPA_G_CTRL_Pin;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	481a      	ldr	r0, [pc, #104]	; (8001a58 <_ZL12MX_GPIO_Initv+0x180>)
 80019f0:	f002 f9da 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_G_CTRL_Pin UV_R_CTRL_Pin UV_W_CTRL_Pin HEPA_B_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin;
 80019f4:	f640 0307 	movw	r3, #2055	; 0x807
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <_ZL12MX_GPIO_Initv+0x184>)
 8001a0e:	f002 f9cb 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_NO_Pin */
  GPIO_InitStruct.Pin = HEPA_NO_Pin;
 8001a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEPA_NO_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	; (8001a5c <_ZL12MX_GPIO_Initv+0x184>)
 8001a28:	f002 f9be 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : nEEPROM_WP_Pin */
  GPIO_InitStruct.Pin = nEEPROM_WP_Pin;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a32:	2311      	movs	r3, #17
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nEEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <_ZL12MX_GPIO_Initv+0x180>)
 8001a46:	f002 f9af 	bl	8003da8 <HAL_GPIO_Init>

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000400 	.word	0x48000400

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001aa2:	f002 fd17 	bl	80044d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0a0      	sub	sp, #128	; 0x80
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2250      	movs	r2, #80	; 0x50
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f006 fd8e 	bl	80085f6 <memset>
  if(hadc->Instance==ADC1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae2:	d13d      	bne.n	8001b60 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001aea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fa2d 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b00:	f7ff ffae 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a38      	ldr	r2, [pc, #224]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b0c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10b      	bne.n	8001b2e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = _24V_SCLD_Pin|_3V3_SCLD_Pin;
 8001b46:	2303      	movs	r3, #3
 8001b48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <HAL_ADC_MspInit+0x140>)
 8001b5a:	f002 f925 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b5e:	e041      	b.n	8001be4 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_ADC_MspInit+0x144>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13c      	bne.n	8001be4 <HAL_ADC_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b74:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 f9ea 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8001b86:	f7ff ff6b 	bl	8001a60 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_MspInit+0x138>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_ADC_MspInit+0x13c>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = _3V3_SCLD_Pin;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(_3V3_SCLD_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_ADC_MspInit+0x140>)
 8001be0:	f002 f8e2 	bl	8003da8 <HAL_GPIO_Init>
}
 8001be4:	bf00      	nop
 8001be6:	3780      	adds	r7, #128	; 0x80
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200005a0 	.word	0x200005a0
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	50000100 	.word	0x50000100

08001bfc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b09e      	sub	sp, #120	; 0x78
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2250      	movs	r2, #80	; 0x50
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f006 fcea 	bl	80085f6 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_FDCAN_MspInit+0xac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d139      	bne.n	8001ca0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 f989 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c48:	f7ff ff0a 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c56:	6593      	str	r3, [r2, #88]	; 0x58
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_FDCAN_MspInit+0xb0>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c8e:	2309      	movs	r3, #9
 8001c90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 f884 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3778      	adds	r7, #120	; 0x78
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40006400 	.word	0x40006400
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a0      	sub	sp, #128	; 0x80
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2250      	movs	r2, #80	; 0x50
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fc90 	bl	80085f6 <memset>
  if(hi2c->Instance==I2C2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_I2C_MspInit+0x15c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d154      	bne.n	8001d8a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f931 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cf8:	f7ff feb2 	bl	8001a60 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d44:	4619      	mov	r1, r3
 8001d46:	4833      	ldr	r0, [pc, #204]	; (8001e14 <HAL_I2C_MspInit+0x164>)
 8001d48:	f002 f82e 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EEPROM_SDA_Pin;
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d52:	2312      	movs	r3, #18
 8001d54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	f002 f81c 	bl	8003da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d88:	e03c      	b.n	8001e04 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_I2C_MspInit+0x168>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d137      	bne.n	8001e04 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 f8d6 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8001dae:	f7ff fe57 	bl	8001a60 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001de4:	4619      	mov	r1, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <HAL_I2C_MspInit+0x164>)
 8001de8:	f001 ffde 	bl	8003da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_I2C_MspInit+0x160>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
}
 8001e04:	bf00      	nop
 8001e06:	3780      	adds	r7, #128	; 0x80
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005800 	.word	0x40005800
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000800 	.word	0x48000800
 8001e18:	40007800 	.word	0x40007800

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09e      	sub	sp, #120	; 0x78
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2250      	movs	r2, #80	; 0x50
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fbda 	bl	80085f6 <memset>
  if(huart->Instance==LPUART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_UART_MspInit+0xa8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d136      	bne.n	8001eba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 f87b 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e64:	f7ff fdfc 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_UART_MspInit+0xac>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e98:	230c      	movs	r3, #12
 8001e9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f001 ff77 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3778      	adds	r7, #120	; 0x78
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40008000 	.word	0x40008000
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_SPI_MspInit+0x7c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d128      	bne.n	8001f40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f1e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_SPI_MspInit+0x84>)
 8001f3c:	f001 ff34 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40003800 	.word	0x40003800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	48000400 	.word	0x48000400

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d131      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HEPA_FG_Pin;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEPA_FG_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f001 fef0 	bl	8003da8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f001 fcd2 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f001 fce9 	bl	80039aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fd8:	e010      	b.n	8001ffc <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10b      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_TIM_MspPostInit+0x64>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11c      	bne.n	8002068 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HEPA_PWM_Pin;
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002056:	2302      	movs	r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEPA_PWM_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002064:	f001 fea0 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40000400 	.word	0x40000400
 8002074:	40021000 	.word	0x40021000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 f960 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM2_IRQHandler+0x10>)
 80020d2:	f003 fc4c 	bl	800596e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200004bc 	.word	0x200004bc

080020e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_kill>:

int _kill(int pid, int sig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020fa:	f006 facf 	bl	800869c <__errno>
 80020fe:	4603      	mov	r3, r0
 8002100:	2216      	movs	r2, #22
 8002102:	601a      	str	r2, [r3, #0]
	return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_exit>:

void _exit (int status)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ffe7 	bl	80020f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002122:	e7fe      	b.n	8002122 <_exit+0x12>

08002124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e00a      	b.n	800214c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002136:	f3af 8000 	nop.w
 800213a:	4601      	mov	r1, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbf0      	blt.n	8002136 <_read+0x12>
	}

return len;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e009      	b.n	8002184 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf1      	blt.n	8002170 <_write+0x12>
	}
	return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_close>:

int _close(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	605a      	str	r2, [r3, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_isatty>:

int _isatty(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
	return 1;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f006 fa34 	bl	800869c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2001c000 	.word	0x2001c000
 8002260:	00000400 	.word	0x00000400
 8002264:	200005a4 	.word	0x200005a4
 8002268:	200006f8 	.word	0x200006f8

0800226c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <SystemInit+0x20>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <SystemInit+0x20>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <LoopForever+0xe>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <LoopForever+0x16>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ba:	f7ff ffd7 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f006 f9f3 	bl	80086a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c2:	f7fe fe17 	bl	8000ef4 <main>

080022c6 <LoopForever>:

LoopForever:
    b LoopForever
 80022c6:	e7fe      	b.n	80022c6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80022c8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022d4:	0800a874 	.word	0x0800a874
  ldr r2, =_sbss
 80022d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022dc:	200006f8 	.word	0x200006f8

080022e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC1_2_IRQHandler>

080022e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f001 fb37 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f2:	200f      	movs	r0, #15
 80022f4:	f000 f80e 	bl	8002314 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	e001      	b.n	8002308 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002304:	f7ff fbb2 	bl	8001a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002308:	79fb      	ldrb	r3, [r7, #7]

}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_InitTick+0x68>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d022      	beq.n	800236e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_InitTick+0x6c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_InitTick+0x68>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002334:	fbb1 f3f3 	udiv	r3, r1, r3
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f001 fb42 	bl	80039c6 <HAL_SYSTICK_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d809      	bhi.n	8002362 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234e:	2200      	movs	r2, #0
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	f001 fb0e 	bl	8003976 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_InitTick+0x70>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	e007      	b.n	8002372 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e004      	b.n	8002372 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e001      	b.n	8002372 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000000c 	.word	0x2000000c
 8002380:	20000004 	.word	0x20000004
 8002384:	20000008 	.word	0x20000008

08002388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_IncTick+0x1c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_IncTick+0x20>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4413      	add	r3, r2
 8002396:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <HAL_IncTick+0x1c>)
 8002398:	6013      	str	r3, [r2, #0]
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	200005a8 	.word	0x200005a8
 80023a8:	2000000c 	.word	0x2000000c

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200005a8 	.word	0x200005a8

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d004      	beq.n	80023e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_Delay+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e8:	bf00      	nop
 80023ea:	f7ff ffdf 	bl	80023ac <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d8f7      	bhi.n	80023ea <HAL_Delay+0x26>
  {
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000000c 	.word	0x2000000c

08002408 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <LL_ADC_SetOffset+0x44>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	4313      	orrs	r3, r2
 80024a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	03fff000 	.word	0x03fff000

080024b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3360      	adds	r3, #96	; 0x60
 80024c6:	461a      	mov	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800251a:	b480      	push	{r7}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3360      	adds	r3, #96	; 0x60
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3360      	adds	r3, #96	; 0x60
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3330      	adds	r3, #48	; 0x30
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	211f      	movs	r1, #31
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	f003 011f 	and.w	r1, r3, #31
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	431a      	orrs	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3314      	adds	r3, #20
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0e5b      	lsrs	r3, r3, #25
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	0d1b      	lsrs	r3, r3, #20
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2107      	movs	r1, #7
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0d1b      	lsrs	r3, r3, #20
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10a      	bne.n	8002686 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002684:	e00a      	b.n	800269c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	43db      	mvns	r3, r3
 8002694:	401a      	ands	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	407f0000 	.word	0x407f0000

080026ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6093      	str	r3, [r2, #8]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e4:	d101      	bne.n	80026ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800270c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002734:	d101      	bne.n	800273a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800275c:	f043 0202 	orr.w	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <LL_ADC_IsEnabled+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_ADC_IsEnabled+0x1a>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d101      	bne.n	80027ae <LL_ADC_IsDisableOngoing+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_IsDisableOngoing+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d101      	bne.n	80027d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d101      	bne.n	80027fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1a1      	b.n	8002b66 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff f93f 	bl	8001ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff41 	bl	80026d0 <LL_ADC_IsDeepPowerDownEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff27 	bl	80026ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff5c 	bl	8002720 <LL_ADC_IsInternalRegulatorEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d115      	bne.n	800289a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff40 	bl	80026f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002878:	4b9a      	ldr	r3, [pc, #616]	; (8002ae4 <HAL_ADC_Init+0x2dc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	4a9a      	ldr	r2, [pc, #616]	; (8002ae8 <HAL_ADC_Init+0x2e0>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff3e 	bl	8002720 <LL_ADC_IsInternalRegulatorEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff76 	bl	80027bc <LL_ADC_REG_IsConversionOngoing>
 80028d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 813a 	bne.w	8002b54 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 8136 	bne.w	8002b54 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff37 	bl	8002770 <LL_ADC_IsEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d137      	bne.n	8002978 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002910:	d004      	beq.n	800291c <HAL_ADC_Init+0x114>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a75      	ldr	r2, [pc, #468]	; (8002aec <HAL_ADC_Init+0x2e4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADC_Init+0x134>
 800291c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002920:	f7ff ff26 	bl	8002770 <LL_ADC_IsEnabled>
 8002924:	4604      	mov	r4, r0
 8002926:	4871      	ldr	r0, [pc, #452]	; (8002aec <HAL_ADC_Init+0x2e4>)
 8002928:	f7ff ff22 	bl	8002770 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	4323      	orrs	r3, r4
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e008      	b.n	800294e <HAL_ADC_Init+0x146>
 800293c:	486c      	ldr	r0, [pc, #432]	; (8002af0 <HAL_ADC_Init+0x2e8>)
 800293e:	f7ff ff17 	bl	8002770 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x15e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a62      	ldr	r2, [pc, #392]	; (8002aec <HAL_ADC_Init+0x2e4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_Init+0x162>
 8002966:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_ADC_Init+0x2ec>)
 8002968:	e000      	b.n	800296c <HAL_ADC_Init+0x164>
 800296a:	4a63      	ldr	r2, [pc, #396]	; (8002af8 <HAL_ADC_Init+0x2f0>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7ff fd48 	bl	8002408 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002982:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002988:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800298e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002996:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d106      	bne.n	80029b4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	045b      	lsls	r3, r3, #17
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_ADC_Init+0x2f4>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fedc 	bl	80027bc <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fee9 	bl	80027e2 <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d17b      	bne.n	8002b10 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d178      	bne.n	8002b10 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3a:	f023 0302 	bic.w	r3, r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d017      	beq.n	8002a80 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6911      	ldr	r1, [r2, #16]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a7e:	e013      	b.n	8002aa8 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d126      	bne.n	8002b00 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e015      	b.n	8002b10 <HAL_ADC_Init+0x308>
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000400 	.word	0x50000400
 8002af4:	50000300 	.word	0x50000300
 8002af8:	50000700 	.word	0x50000700
 8002afc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10c      	bne.n	8002b32 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f023 010f 	bic.w	r1, r3, #15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e007      	b.n	8002b42 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020f 	bic.w	r2, r2, #15
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	bf00      	nop

08002b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0b6      	sub	sp, #216	; 0xd8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x24>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f000 bc04 	b.w	800339c <HAL_ADC_ConfigChannel+0x82c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe0b 	bl	80027bc <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 83e8 	bne.w	800337e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f7ff fcf6 	bl	80025ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fdf9 	bl	80027bc <LL_ADC_REG_IsConversionOngoing>
 8002bca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fe05 	bl	80027e2 <LL_ADC_INJ_IsConversionOngoing>
 8002bd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 81d9 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 81d4 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7ff fcfd 	bl	8002604 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fcb7 	bl	8002586 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c18:	e00e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fcec 	bl	8002604 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fca7 	bl	8002586 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d022      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c6a:	f7ff fc01 	bl	8002470 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff fc4d 	bl	800251a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7f1b      	ldrb	r3, [r3, #28]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x126>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x128>
 8002c96:	2300      	movs	r3, #0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff fc59 	bl	8002550 <LL_ADC_SetOffsetSaturation>
 8002c9e:	e17b      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fc06 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x15c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fbfb 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	e01e      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x19a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fbf0 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x1b2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e018      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbbf 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fba3 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x222>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fb98 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	e01e      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x260>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb8d 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002db0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x278>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	e018      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d106      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb5c 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fb40 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x2e8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fb35 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	e01e      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x326>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fb2a 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x33e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	e016      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fafb 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fadf 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x3aa>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fad4 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	e017      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x3da>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2103      	movs	r1, #3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fac9 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f34:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x3f2>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	e011      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2103      	movs	r1, #3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff faa6 	bl	80024e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fbe7 	bl	8002770 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 813d 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7ff fb50 	bl	800265c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4aa2      	ldr	r2, [pc, #648]	; (800324c <HAL_ADC_ConfigChannel+0x6dc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 812e 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x480>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e019      	b.n	8003024 <HAL_ADC_ConfigChannel+0x4b4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800300c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b09      	cmp	r3, #9
 800301c:	bf94      	ite	ls
 800301e:	2301      	movls	r3, #1
 8003020:	2300      	movhi	r3, #0
 8003022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	2b00      	cmp	r3, #0
 8003026:	d079      	beq.n	800311c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x4d4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	e015      	b.n	8003070 <HAL_ADC_ConfigChannel+0x500>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x520>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	e017      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x550>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x576>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0e9b      	lsrs	r3, r3, #26
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	e018      	b.n	8003118 <HAL_ADC_ConfigChannel+0x5a8>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003118:	430b      	orrs	r3, r1
 800311a:	e07e      	b.n	800321a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5c8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	3301      	adds	r3, #1
 8003130:	069b      	lsls	r3, r3, #26
 8003132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003136:	e015      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5f4>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	069b      	lsls	r3, r3, #26
 8003160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x614>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	e017      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x644>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	61fb      	str	r3, [r7, #28]
  return result;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	ea42 0103 	orr.w	r1, r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x670>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	3b1e      	subs	r3, #30
 80031d8:	051b      	lsls	r3, r3, #20
 80031da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031de:	e01b      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	613b      	str	r3, [r7, #16]
  return result;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff f9f0 	bl	8002604 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_ADC_ConfigChannel+0x6e0>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80af 	beq.w	8003390 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d004      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x6d6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_ADC_ConfigChannel+0x6e4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10a      	bne.n	800325c <HAL_ADC_ConfigChannel+0x6ec>
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_ADC_ConfigChannel+0x6e8>)
 8003248:	e009      	b.n	800325e <HAL_ADC_ConfigChannel+0x6ee>
 800324a:	bf00      	nop
 800324c:	407f0000 	.word	0x407f0000
 8003250:	80080000 	.word	0x80080000
 8003254:	50000100 	.word	0x50000100
 8003258:	50000300 	.word	0x50000300
 800325c:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <HAL_ADC_ConfigChannel+0x834>)
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f8f8 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8003264:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <HAL_ADC_ConfigChannel+0x838>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_ADC_ConfigChannel+0x70c>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <HAL_ADC_ConfigChannel+0x83c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d134      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800327c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12e      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d17e      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x736>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <HAL_ADC_ConfigChannel+0x840>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x73a>
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_ADC_ConfigChannel+0x844>)
 80032a8:	e000      	b.n	80032ac <HAL_ADC_ConfigChannel+0x73c>
 80032aa:	4a3e      	ldr	r2, [pc, #248]	; (80033a4 <HAL_ADC_ConfigChannel+0x834>)
 80032ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7ff f8b9 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_ADC_ConfigChannel+0x848>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <HAL_ADC_ConfigChannel+0x84c>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d6:	e002      	b.n	80032de <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3b01      	subs	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e4:	e054      	b.n	8003390 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a35      	ldr	r2, [pc, #212]	; (80033c0 <HAL_ADC_ConfigChannel+0x850>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x7c2>
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11a      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003304:	d144      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330e:	d004      	beq.n	800331a <HAL_ADC_ConfigChannel+0x7aa>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <HAL_ADC_ConfigChannel+0x840>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x7ae>
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <HAL_ADC_ConfigChannel+0x844>)
 800331c:	e000      	b.n	8003320 <HAL_ADC_ConfigChannel+0x7b0>
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_ADC_ConfigChannel+0x834>)
 8003320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f7ff f87f 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003330:	e02e      	b.n	8003390 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d129      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800333c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d123      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_ADC_ConfigChannel+0x840>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01e      	beq.n	8003390 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335a:	d004      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x7f6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <HAL_ADC_ConfigChannel+0x840>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7fa>
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_ADC_ConfigChannel+0x844>)
 8003368:	e000      	b.n	800336c <HAL_ADC_ConfigChannel+0x7fc>
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_ADC_ConfigChannel+0x834>)
 800336c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7ff f859 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
 800337c:	e008      	b.n	8003390 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003398:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800339c:	4618      	mov	r0, r3
 800339e:	37d8      	adds	r7, #216	; 0xd8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	50000700 	.word	0x50000700
 80033a8:	c3210000 	.word	0xc3210000
 80033ac:	90c00010 	.word	0x90c00010
 80033b0:	50000100 	.word	0x50000100
 80033b4:	50000300 	.word	0x50000300
 80033b8:	20000004 	.word	0x20000004
 80033bc:	053e2d63 	.word	0x053e2d63
 80033c0:	c7520000 	.word	0xc7520000
 80033c4:	cb840000 	.word	0xcb840000

080033c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f9de 	bl	8002796 <LL_ADC_IsDisableOngoing>
 80033da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f9c5 	bl	8002770 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d047      	beq.n	800347c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d144      	bne.n	800347c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030d 	and.w	r3, r3, #13
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f99f 	bl	8002748 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2203      	movs	r2, #3
 8003410:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003412:	f7fe ffcb 	bl	80023ac <HAL_GetTick>
 8003416:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003418:	e029      	b.n	800346e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e023      	b.n	800347e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003436:	f7fe ffb9 	bl	80023ac <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d914      	bls.n	800346e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e007      	b.n	800347e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1dc      	bne.n	8003436 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <LL_ADC_IsEnabled>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <LL_ADC_IsEnabled+0x18>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_IsEnabled+0x1a>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_StartCalibration>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80034be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_IsCalibrationOnGoing>:
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f2:	d101      	bne.n	80034f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <LL_ADC_REG_IsConversionOngoing>:
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d101      	bne.n	800351e <LL_ADC_REG_IsConversionOngoing+0x18>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_ADCEx_Calibration_Start+0x1c>
 8003544:	2302      	movs	r3, #2
 8003546:	e04d      	b.n	80035e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff39 	bl	80033c8 <ADC_Disable>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d136      	bne.n	80035ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003568:	f023 0302 	bic.w	r3, r3, #2
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6839      	ldr	r1, [r7, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff96 	bl	80034ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003580:	e014      	b.n	80035ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3301      	adds	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_ADCEx_Calibration_Start+0xc0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d90d      	bls.n	80035ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f023 0312 	bic.w	r3, r3, #18
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e01b      	b.n	80035e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff94 	bl	80034de <LL_ADC_IsCalibrationOnGoing>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e2      	bne.n	8003582 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	f023 0303 	bic.w	r3, r3, #3
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80035cc:	e005      	b.n	80035da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	f043 0210 	orr.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0004de01 	.word	0x0004de01

080035f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b0a1      	sub	sp, #132	; 0x84
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800360a:	2302      	movs	r3, #2
 800360c:	e0cb      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003616:	2300      	movs	r3, #0
 8003618:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800361a:	2300      	movs	r3, #0
 800361c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003626:	d102      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003628:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	e001      	b.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0aa      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff57 	bl	8003506 <LL_ADC_REG_IsConversionOngoing>
 8003658:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff51 	bl	8003506 <LL_ADC_REG_IsConversionOngoing>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 808c 	bne.w	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800366c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8088 	bne.w	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367c:	d004      	beq.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003688:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800368a:	e000      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800368e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d041      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036aa:	035b      	lsls	r3, r3, #13
 80036ac:	430b      	orrs	r3, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036bc:	d004      	beq.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3b      	ldr	r2, [pc, #236]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10f      	bne.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80036c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036cc:	f7ff fedb 	bl	8003486 <LL_ADC_IsEnabled>
 80036d0:	4604      	mov	r4, r0
 80036d2:	4837      	ldr	r0, [pc, #220]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036d4:	f7ff fed7 	bl	8003486 <LL_ADC_IsEnabled>
 80036d8:	4603      	mov	r3, r0
 80036da:	4323      	orrs	r3, r4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e008      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80036e8:	4834      	ldr	r0, [pc, #208]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80036ea:	f7ff fecc 	bl	8003486 <LL_ADC_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d04c      	beq.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003706:	f023 030f 	bic.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6811      	ldr	r1, [r2, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800371a:	e03d      	b.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800371c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003726:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003730:	d004      	beq.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10f      	bne.n	800375c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800373c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003740:	f7ff fea1 	bl	8003486 <LL_ADC_IsEnabled>
 8003744:	4604      	mov	r4, r0
 8003746:	481a      	ldr	r0, [pc, #104]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003748:	f7ff fe9d 	bl	8003486 <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	4323      	orrs	r3, r4
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e008      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 800375c:	4817      	ldr	r0, [pc, #92]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800375e:	f7ff fe92 	bl	8003486 <LL_ADC_IsEnabled>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d012      	beq.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003780:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003782:	e009      	b.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003796:	e000      	b.n	800379a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003798:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3784      	adds	r7, #132	; 0x84
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	50000100 	.word	0x50000100
 80037b4:	50000300 	.word	0x50000300
 80037b8:	50000700 	.word	0x50000700
 80037bc:	50000400 	.word	0x50000400

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003984:	f7ff ff40 	bl	8003808 <__NVIC_GetPriorityGrouping>
 8003988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	6978      	ldr	r0, [r7, #20]
 8003990:	f7ff ff90 	bl	80038b4 <NVIC_EncodePriority>
 8003994:	4602      	mov	r2, r0
 8003996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff5f 	bl	8003860 <__NVIC_SetPriority>
}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff33 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffa4 	bl	800391c <SysTick_Config>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e147      	b.n	8003c82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe f8f8 	bl	8001bfc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0210 	bic.w	r2, r2, #16
 8003a1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fcc6 	bl	80023ac <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a22:	e012      	b.n	8003a4a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a24:	f7fe fcc2 	bl	80023ac <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	d90b      	bls.n	8003a4a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e11b      	b.n	8003c82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d0e5      	beq.n	8003a24 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a68:	f7fe fca0 	bl	80023ac <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a6e:	e012      	b.n	8003a96 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a70:	f7fe fc9c 	bl	80023ac <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d90b      	bls.n	8003a96 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0f5      	b.n	8003c82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0e5      	beq.n	8003a70 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0202 	orr.w	r2, r2, #2
 8003ab2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a74      	ldr	r2, [pc, #464]	; (8003c8c <HAL_FDCAN_Init+0x2ac>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d103      	bne.n	8003ac6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003abe:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <HAL_FDCAN_Init+0x2b0>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7c1b      	ldrb	r3, [r3, #16]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e007      	b.n	8003af0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7c5b      	ldrb	r3, [r3, #17]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d108      	bne.n	8003b0a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b06:	619a      	str	r2, [r3, #24]
 8003b08:	e007      	b.n	8003b1a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7c9b      	ldrb	r3, [r3, #18]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e007      	b.n	8003b44 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b42:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b68:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0210 	bic.w	r2, r2, #16
 8003b78:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0204 	orr.w	r2, r2, #4
 8003b90:	619a      	str	r2, [r3, #24]
 8003b92:	e02c      	b.n	8003bee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d028      	beq.n	8003bee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d01c      	beq.n	8003bde <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bb2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0210 	orr.w	r2, r2, #16
 8003bc2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d110      	bne.n	8003bee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0220 	orr.w	r2, r2, #32
 8003bda:	619a      	str	r2, [r3, #24]
 8003bdc:	e007      	b.n	8003bee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0220 	orr.w	r2, r2, #32
 8003bec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bfe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c22:	d115      	bne.n	8003c50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f83c 	bl	8003ce4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40006400 	.word	0x40006400
 8003c90:	40006500 	.word	0x40006500

08003c94 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d110      	bne.n	8003cca <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e006      	b.n	8003cd8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003cee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d103      	bne.n	8003d02 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d00:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d10:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	061a      	lsls	r2, r3, #24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e005      	b.n	8003d84 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3f3      	bcc.n	8003d78 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	4000a400 	.word	0x4000a400
 8003da4:	40006800 	.word	0x40006800

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003db6:	e15a      	b.n	800406e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 814c 	beq.w	8004068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d005      	beq.n	8003de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d130      	bne.n	8003e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1e:	2201      	movs	r2, #1
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 0201 	and.w	r2, r3, #1
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d017      	beq.n	8003e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d123      	bne.n	8003eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	08da      	lsrs	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	6939      	ldr	r1, [r7, #16]
 8003ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0203 	and.w	r2, r3, #3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a6 	beq.w	8004068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1c:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_GPIO_Init+0x2e4>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	4a5a      	ldr	r2, [pc, #360]	; (800408c <HAL_GPIO_Init+0x2e4>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6613      	str	r3, [r2, #96]	; 0x60
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <HAL_GPIO_Init+0x2e4>)
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f34:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_GPIO_Init+0x2e8>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f5e:	d01f      	beq.n	8003fa0 <HAL_GPIO_Init+0x1f8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a4c      	ldr	r2, [pc, #304]	; (8004094 <HAL_GPIO_Init+0x2ec>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d019      	beq.n	8003f9c <HAL_GPIO_Init+0x1f4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a4b      	ldr	r2, [pc, #300]	; (8004098 <HAL_GPIO_Init+0x2f0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_GPIO_Init+0x1f0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4a      	ldr	r2, [pc, #296]	; (800409c <HAL_GPIO_Init+0x2f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00d      	beq.n	8003f94 <HAL_GPIO_Init+0x1ec>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <HAL_GPIO_Init+0x2f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <HAL_GPIO_Init+0x1e8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a48      	ldr	r2, [pc, #288]	; (80040a4 <HAL_GPIO_Init+0x2fc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_GPIO_Init+0x1e4>
 8003f88:	2305      	movs	r3, #5
 8003f8a:	e00a      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f8c:	2306      	movs	r3, #6
 8003f8e:	e008      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f90:	2304      	movs	r3, #4
 8003f92:	e006      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f94:	2303      	movs	r3, #3
 8003f96:	e004      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e002      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	f002 0203 	and.w	r2, r2, #3
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	4093      	lsls	r3, r2
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb2:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_GPIO_Init+0x2e8>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400e:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_GPIO_Init+0x300>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3301      	adds	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	f47f ae9d 	bne.w	8003db8 <HAL_GPIO_Init+0x10>
  }
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40021000 	.word	0x40021000
 8004090:	40010000 	.word	0x40010000
 8004094:	48000400 	.word	0x48000400
 8004098:	48000800 	.word	0x48000800
 800409c:	48000c00 	.word	0x48000c00
 80040a0:	48001000 	.word	0x48001000
 80040a4:	48001400 	.word	0x48001400
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	887b      	ldrh	r3, [r7, #2]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
 80040c8:	e001      	b.n	80040ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
 80040e8:	4613      	mov	r3, r2
 80040ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040ec:	787b      	ldrb	r3, [r7, #1]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f8:	e002      	b.n	8004100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43d9      	mvns	r1, r3
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	400b      	ands	r3, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	619a      	str	r2, [r3, #24]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e081      	b.n	8004256 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd fda2 	bl	8001cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2224      	movs	r2, #36	; 0x24
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004190:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	e006      	b.n	80041c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d104      	bne.n	80041da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d138      	bne.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800427e:	2302      	movs	r3, #2
 8004280:	e032      	b.n	80042e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2224      	movs	r2, #36	; 0x24
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	d139      	bne.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004314:	2302      	movs	r3, #2
 8004316:	e033      	b.n	8004380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	; 0x24
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004346:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d141      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800439a:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d131      	bne.n	800440c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b8:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c0:	4a41      	ldr	r2, [pc, #260]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2232      	movs	r2, #50	; 0x32
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a3f      	ldr	r2, [pc, #252]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	e002      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d102      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fa:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d158      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e057      	b.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800440c:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800441c:	e04d      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d141      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d131      	bne.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443a:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800444c:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2232      	movs	r2, #50	; 0x32
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	0c9b      	lsrs	r3, r3, #18
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446a:	e002      	b.n	8004472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d102      	bne.n	8004486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f2      	bne.n	800446c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d112      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e011      	b.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044a8:	e007      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40007000 	.word	0x40007000
 80044cc:	20000004 	.word	0x20000004
 80044d0:	431bde83 	.word	0x431bde83

080044d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e2:	6093      	str	r3, [r2, #8]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40007000 	.word	0x40007000

080044f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e306      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d075      	beq.n	80045fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4b97      	ldr	r3, [pc, #604]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d102      	bne.n	8004532 <HAL_RCC_OscConfig+0x3e>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d002      	beq.n	8004538 <HAL_RCC_OscConfig+0x44>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05b      	beq.n	80045fc <HAL_RCC_OscConfig+0x108>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d157      	bne.n	80045fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e2e1      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x74>
 800455a:	4b85      	ldr	r3, [pc, #532]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a84      	ldr	r2, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e01d      	b.n	80045a4 <HAL_RCC_OscConfig+0xb0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0x98>
 8004572:	4b7f      	ldr	r3, [pc, #508]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7e      	ldr	r2, [pc, #504]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b7c      	ldr	r3, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7b      	ldr	r2, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0xb0>
 800458c:	4b78      	ldr	r3, [pc, #480]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a77      	ldr	r2, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b75      	ldr	r3, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a74      	ldr	r2, [pc, #464]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800459e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fefe 	bl	80023ac <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd fefa 	bl	80023ac <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e2a6      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xc0>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd feea 	bl	80023ac <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd fee6 	bl	80023ac <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e292      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ee:	4b60      	ldr	r3, [pc, #384]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0xe8>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d075      	beq.n	80046f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d102      	bne.n	800462a <HAL_RCC_OscConfig+0x136>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d002      	beq.n	8004630 <HAL_RCC_OscConfig+0x13c>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11f      	bne.n	8004670 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004630:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x154>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e265      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	4946      	ldr	r1, [pc, #280]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800465c:	4b45      	ldr	r3, [pc, #276]	; (8004774 <HAL_RCC_OscConfig+0x280>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd fe57 	bl	8002314 <HAL_InitTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d043      	beq.n	80046f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e251      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d023      	beq.n	80046c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004678:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fe92 	bl	80023ac <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468c:	f7fd fe8e 	bl	80023ac <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e23a      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	492d      	ldr	r1, [pc, #180]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
 80046be:	e01a      	b.n	80046f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fe6e 	bl	80023ac <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fd fe6a 	bl	80023ac <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e216      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1e0>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d041      	beq.n	8004786 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01c      	beq.n	8004744 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fe47 	bl	80023ac <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fd fe43 	bl	80023ac <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1ef      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ef      	beq.n	8004722 <HAL_RCC_OscConfig+0x22e>
 8004742:	e020      	b.n	8004786 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x27c>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fe2a 	bl	80023ac <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800475a:	e00d      	b.n	8004778 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fd fe26 	bl	80023ac <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d906      	bls.n	8004778 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1d2      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004778:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1ea      	bne.n	800475c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a6 	beq.w	80048e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004798:	4b84      	ldr	r3, [pc, #528]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2b4>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x2b6>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a7e      	ldr	r2, [pc, #504]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ba:	4b7c      	ldr	r3, [pc, #496]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <HAL_RCC_OscConfig+0x4bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d118      	bne.n	8004808 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4b76      	ldr	r3, [pc, #472]	; (80049b0 <HAL_RCC_OscConfig+0x4bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a75      	ldr	r2, [pc, #468]	; (80049b0 <HAL_RCC_OscConfig+0x4bc>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e2:	f7fd fde3 	bl	80023ac <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fd fddf 	bl	80023ac <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e18b      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fc:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <HAL_RCC_OscConfig+0x4bc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_RCC_OscConfig+0x32e>
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004820:	e024      	b.n	800486c <HAL_RCC_OscConfig+0x378>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d110      	bne.n	800484c <HAL_RCC_OscConfig+0x358>
 800482a:	4b60      	ldr	r3, [pc, #384]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a5e      	ldr	r2, [pc, #376]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483a:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a5a      	ldr	r2, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484a:	e00f      	b.n	800486c <HAL_RCC_OscConfig+0x378>
 800484c:	4b57      	ldr	r3, [pc, #348]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a56      	ldr	r2, [pc, #344]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd fd9a 	bl	80023ac <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fd fd96 	bl	80023ac <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e140      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b46      	ldr	r3, [pc, #280]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ed      	beq.n	800487c <HAL_RCC_OscConfig+0x388>
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd fd83 	bl	80023ac <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd fd7f 	bl	80023ac <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e129      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ed      	bne.n	80048aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a34      	ldr	r2, [pc, #208]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d03c      	beq.n	8004966 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01c      	beq.n	800492e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd fd52 	bl	80023ac <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490c:	f7fd fd4e 	bl	80023ac <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0fa      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <HAL_RCC_OscConfig+0x418>
 800492c:	e01b      	b.n	8004966 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd fd35 	bl	80023ac <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004946:	f7fd fd31 	bl	80023ac <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0dd      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80d1 	beq.w	8004b12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b0c      	cmp	r3, #12
 800497a:	f000 808b 	beq.w	8004a94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d15e      	bne.n	8004a44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <HAL_RCC_OscConfig+0x4b8>)
 800498c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd fd0b 	bl	80023ac <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004998:	e00c      	b.n	80049b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd fd07 	bl	80023ac <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d905      	bls.n	80049b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e0b3      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ec      	bne.n	800499a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c0:	4b56      	ldr	r3, [pc, #344]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <HAL_RCC_OscConfig+0x62c>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6a11      	ldr	r1, [r2, #32]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80049da:	0212      	lsls	r2, r2, #8
 80049dc:	4311      	orrs	r1, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049e2:	0852      	lsrs	r2, r2, #1
 80049e4:	3a01      	subs	r2, #1
 80049e6:	0552      	lsls	r2, r2, #21
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049ee:	0852      	lsrs	r2, r2, #1
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0652      	lsls	r2, r2, #25
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049fa:	06d2      	lsls	r2, r2, #27
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4947      	ldr	r1, [pc, #284]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a04:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a44      	ldr	r2, [pc, #272]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a10:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a41      	ldr	r2, [pc, #260]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fcc6 	bl	80023ac <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fd fcc2 	bl	80023ac <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e06e      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x530>
 8004a42:	e066      	b.n	8004b12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a44:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a34      	ldr	r2, [pc, #208]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a50:	4b32      	ldr	r3, [pc, #200]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a5c:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fc9e 	bl	80023ac <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd fc9a 	bl	80023ac <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e046      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x580>
 8004a92:	e03e      	b.n	8004b12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e039      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_RCC_OscConfig+0x628>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 0203 	and.w	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d12c      	bne.n	8004b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d123      	bne.n	8004b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d11b      	bne.n	8004b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d113      	bne.n	8004b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	3b01      	subs	r3, #1
 8004af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	3b01      	subs	r3, #1
 8004b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	019f800c 	.word	0x019f800c

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e11e      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b91      	ldr	r3, [pc, #580]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	498c      	ldr	r1, [pc, #560]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e106      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d073      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d129      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b81      	ldr	r3, [pc, #516]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0f4      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b90:	f000 f99c 	bl	8004ecc <RCC_GetSysClockFreqFromPLLSource>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	; (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d93f      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d12f      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bbe:	4b72      	ldr	r3, [pc, #456]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc6:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e024      	b.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0c6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b66      	ldr	r3, [pc, #408]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0be      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bfc:	f000 f8ce 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d909      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c12:	4a5d      	ldr	r2, [pc, #372]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4957      	ldr	r1, [pc, #348]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fbbc 	bl	80023ac <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fd fbb8 	bl	80023ac <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e095      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c90:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c98:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4936      	ldr	r1, [pc, #216]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d21d      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 020f 	bic.w	r2, r3, #15
 8004cdc:	4929      	ldr	r1, [pc, #164]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd fb62 	bl	80023ac <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fd fb5e 	bl	80023ac <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03b      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1ed      	bne.n	8004cec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4917      	ldr	r1, [pc, #92]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490f      	ldr	r1, [pc, #60]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490c      	ldr	r1, [pc, #48]	; (8004d90 <HAL_RCC_ClockConfig+0x26c>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x270>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd face 	bl	8002314 <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	04c4b400 	.word	0x04c4b400
 8004d90:	0800a4b0 	.word	0x0800a4b0
 8004d94:	20000004 	.word	0x20000004
 8004d98:	20000008 	.word	0x20000008

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e047      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e03e      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d136      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3301      	adds	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	0a12      	lsrs	r2, r2, #8
 8004dfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
      break;
 8004e22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e001      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e44:	693b      	ldr	r3, [r7, #16]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	00f42400 	.word	0x00f42400

08004e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e78:	f7ff fff0 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4904      	ldr	r1, [pc, #16]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	0800a4c0 	.word	0x0800a4c0

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea4:	f7ff ffda 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0adb      	lsrs	r3, r3, #11
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4904      	ldr	r1, [pc, #16]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	0800a4c0 	.word	0x0800a4c0

08004ecc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d10c      	bne.n	8004f0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efa:	68d2      	ldr	r2, [r2, #12]
 8004efc:	0a12      	lsrs	r2, r2, #8
 8004efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	617b      	str	r3, [r7, #20]
    break;
 8004f08:	e00c      	b.n	8004f24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0a:	4a11      	ldr	r2, [pc, #68]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f14:	68d2      	ldr	r2, [r2, #12]
 8004f16:	0a12      	lsrs	r2, r2, #8
 8004f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    break;
 8004f22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f24:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0e5b      	lsrs	r3, r3, #25
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f3e:	687b      	ldr	r3, [r7, #4]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	00f42400 	.word	0x00f42400

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f60:	2300      	movs	r3, #0
 8004f62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8098 	beq.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f76:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	4b40      	ldr	r3, [pc, #256]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a39      	ldr	r2, [pc, #228]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004faa:	f7fd f9ff 	bl	80023ac <HAL_GetTick>
 8004fae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb2:	f7fd f9fb 	bl	80023ac <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	74fb      	strb	r3, [r7, #19]
        break;
 8004fc4:	e005      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ef      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d159      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d019      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b23      	ldr	r3, [pc, #140]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005010:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005020:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fd f9bb 	bl	80023ac <HAL_GetTick>
 8005036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005038:	e00b      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fd f9b7 	bl	80023ac <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d902      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	74fb      	strb	r3, [r7, #19]
            break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ec      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005074:	4903      	ldr	r1, [pc, #12]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	74bb      	strb	r3, [r7, #18]
 8005082:	e005      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005084:	40021000 	.word	0x40021000
 8005088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005090:	7c7b      	ldrb	r3, [r7, #17]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005096:	4ba7      	ldr	r3, [pc, #668]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	4aa6      	ldr	r2, [pc, #664]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ae:	4ba1      	ldr	r3, [pc, #644]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f023 0203 	bic.w	r2, r3, #3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	499d      	ldr	r1, [pc, #628]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d0:	4b98      	ldr	r3, [pc, #608]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	f023 020c 	bic.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4995      	ldr	r1, [pc, #596]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f2:	4b90      	ldr	r3, [pc, #576]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	498c      	ldr	r1, [pc, #560]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005114:	4b87      	ldr	r3, [pc, #540]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	4984      	ldr	r1, [pc, #528]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005136:	4b7f      	ldr	r3, [pc, #508]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	497b      	ldr	r1, [pc, #492]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005158:	4b76      	ldr	r3, [pc, #472]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	4973      	ldr	r1, [pc, #460]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800517a:	4b6e      	ldr	r3, [pc, #440]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	496a      	ldr	r1, [pc, #424]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800519c:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4962      	ldr	r1, [pc, #392]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051be:	4b5d      	ldr	r3, [pc, #372]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	4959      	ldr	r1, [pc, #356]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e0:	4b54      	ldr	r3, [pc, #336]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	4951      	ldr	r1, [pc, #324]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d015      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4948      	ldr	r1, [pc, #288]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005220:	d105      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005222:	4b44      	ldr	r3, [pc, #272]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a43      	ldr	r2, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005236:	2b00      	cmp	r3, #0
 8005238:	d015      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800523a:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	493a      	ldr	r1, [pc, #232]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005258:	d105      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4a35      	ldr	r2, [pc, #212]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005264:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d015      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005272:	4b30      	ldr	r3, [pc, #192]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	492c      	ldr	r1, [pc, #176]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005290:	d105      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005292:	4b28      	ldr	r3, [pc, #160]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4a27      	ldr	r2, [pc, #156]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d015      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	491e      	ldr	r1, [pc, #120]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c8:	d105      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ca:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d015      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f0:	4910      	ldr	r1, [pc, #64]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005300:	d105      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4902      	ldr	r1, [pc, #8]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	e001      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005334:	40021000 	.word	0x40021000
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533e:	d105      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005340:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	4918      	ldr	r1, [pc, #96]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005378:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539e:	490a      	ldr	r1, [pc, #40]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ae:	d105      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000

080053cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e09d      	b.n	800551a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ee:	d009      	beq.n	8005404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	61da      	str	r2, [r3, #28]
 80053f6:	e005      	b.n	8005404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc fd54 	bl	8001ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005444:	d902      	bls.n	800544c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e002      	b.n	8005452 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800544c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005450:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800545a:	d007      	beq.n	800546c <HAL_SPI_Init+0xa0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005464:	d002      	beq.n	800546c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	ea42 0103 	orr.w	r1, r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f003 0204 	and.w	r2, r3, #4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054e8:	ea42 0103 	orr.w	r1, r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e049      	b.n	80055c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fc fd03 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 fe69 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e049      	b.n	8005676 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f841 	bl	800567e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fe12 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_TIM_PWM_Start+0x24>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e03c      	b.n	8005732 <HAL_TIM_PWM_Start+0x9e>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d109      	bne.n	80056d2 <HAL_TIM_PWM_Start+0x3e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	bf14      	ite	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	2300      	moveq	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e02f      	b.n	8005732 <HAL_TIM_PWM_Start+0x9e>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d109      	bne.n	80056ec <HAL_TIM_PWM_Start+0x58>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e022      	b.n	8005732 <HAL_TIM_PWM_Start+0x9e>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d109      	bne.n	8005706 <HAL_TIM_PWM_Start+0x72>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e015      	b.n	8005732 <HAL_TIM_PWM_Start+0x9e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b10      	cmp	r3, #16
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start+0x8c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e008      	b.n	8005732 <HAL_TIM_PWM_Start+0x9e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0a1      	b.n	800587e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0xb6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	e023      	b.n	8005792 <HAL_TIM_PWM_Start+0xfe>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xc6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005758:	e01b      	b.n	8005792 <HAL_TIM_PWM_Start+0xfe>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xd6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	e013      	b.n	8005792 <HAL_TIM_PWM_Start+0xfe>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b0c      	cmp	r3, #12
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xe6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005778:	e00b      	b.n	8005792 <HAL_TIM_PWM_Start+0xfe>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b10      	cmp	r3, #16
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xf6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	e003      	b.n	8005792 <HAL_TIM_PWM_Start+0xfe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2201      	movs	r2, #1
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fad4 	bl	8006d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a38      	ldr	r2, [pc, #224]	; (8005888 <HAL_TIM_PWM_Start+0x1f4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_TIM_PWM_Start+0x148>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a37      	ldr	r2, [pc, #220]	; (800588c <HAL_TIM_PWM_Start+0x1f8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_TIM_PWM_Start+0x148>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a35      	ldr	r2, [pc, #212]	; (8005890 <HAL_TIM_PWM_Start+0x1fc>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_TIM_PWM_Start+0x148>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a34      	ldr	r2, [pc, #208]	; (8005894 <HAL_TIM_PWM_Start+0x200>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIM_PWM_Start+0x148>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a32      	ldr	r2, [pc, #200]	; (8005898 <HAL_TIM_PWM_Start+0x204>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIM_PWM_Start+0x148>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a31      	ldr	r2, [pc, #196]	; (800589c <HAL_TIM_PWM_Start+0x208>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d101      	bne.n	80057e0 <HAL_TIM_PWM_Start+0x14c>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <HAL_TIM_PWM_Start+0x14e>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <HAL_TIM_PWM_Start+0x1f4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01d      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d018      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <HAL_TIM_PWM_Start+0x20c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <HAL_TIM_PWM_Start+0x210>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <HAL_TIM_PWM_Start+0x1f8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_TIM_PWM_Start+0x1fc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIM_PWM_Start+0x1a8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_TIM_PWM_Start+0x208>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d115      	bne.n	8005868 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <HAL_TIM_PWM_Start+0x214>)
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b06      	cmp	r3, #6
 800584c:	d015      	beq.n	800587a <HAL_TIM_PWM_Start+0x1e6>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005854:	d011      	beq.n	800587a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	e008      	b.n	800587a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e000      	b.n	800587c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	40015000 	.word	0x40015000
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	00010007 	.word	0x00010007

080058ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e049      	b.n	8005952 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f841 	bl	800595a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 fca4 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d122      	bne.n	80059ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d11b      	bne.n	80059ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0202 	mvn.w	r2, #2
 800599a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc23 	bl	80061fc <HAL_TIM_IC_CaptureCallback>
 80059b6:	e005      	b.n	80059c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc15 	bl	80061e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fc26 	bl	8006210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d122      	bne.n	8005a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d11b      	bne.n	8005a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0204 	mvn.w	r2, #4
 80059ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fbf9 	bl	80061fc <HAL_TIM_IC_CaptureCallback>
 8005a0a:	e005      	b.n	8005a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fbeb 	bl	80061e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fbfc 	bl	8006210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d122      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d11b      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0208 	mvn.w	r2, #8
 8005a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2204      	movs	r2, #4
 8005a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fbcf 	bl	80061fc <HAL_TIM_IC_CaptureCallback>
 8005a5e:	e005      	b.n	8005a6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fbc1 	bl	80061e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fbd2 	bl	8006210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d122      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d11b      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f06f 0210 	mvn.w	r2, #16
 8005a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fba5 	bl	80061fc <HAL_TIM_IC_CaptureCallback>
 8005ab2:	e005      	b.n	8005ac0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb97 	bl	80061e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fba8 	bl	8006210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10e      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0201 	mvn.w	r2, #1
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb71 	bl	80061d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d10e      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d107      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f9d3 	bl	8006ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b38:	2b80      	cmp	r3, #128	; 0x80
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 f9c6 	bl	8006ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fb56 	bl	8006224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0220 	mvn.w	r2, #32
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f986 	bl	8006eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc2:	d107      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f98c 	bl	8006eec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be2:	d10f      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f97e 	bl	8006f00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c12:	d10f      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c22:	d107      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f970 	bl	8006f14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c42:	d10f      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 f962 	bl	8006f28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e088      	b.n	8005d9c <HAL_TIM_IC_ConfigChannel+0x130>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f000 fe8e 	bl	80069c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 020c 	bic.w	r2, r2, #12
 8005cba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6999      	ldr	r1, [r3, #24]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	619a      	str	r2, [r3, #24]
 8005cce:	e060      	b.n	8005d92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d11c      	bne.n	8005d10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f000 ff0c 	bl	8006b02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6999      	ldr	r1, [r3, #24]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	021a      	lsls	r2, r3, #8
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	619a      	str	r2, [r3, #24]
 8005d0e:	e040      	b.n	8005d92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f000 ff59 	bl	8006bdc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 020c 	bic.w	r2, r2, #12
 8005d38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
 8005d4c:	e021      	b.n	8005d92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d11c      	bne.n	8005d8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f000 ff76 	bl	8006c54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69d9      	ldr	r1, [r3, #28]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	61da      	str	r2, [r3, #28]
 8005d8c:	e001      	b.n	8005d92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0ff      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b14      	cmp	r3, #20
 8005dce:	f200 80f0 	bhi.w	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005fb3 	.word	0x08005fb3
 8005de0:	08005fb3 	.word	0x08005fb3
 8005de4:	08005fb3 	.word	0x08005fb3
 8005de8:	08005e6d 	.word	0x08005e6d
 8005dec:	08005fb3 	.word	0x08005fb3
 8005df0:	08005fb3 	.word	0x08005fb3
 8005df4:	08005fb3 	.word	0x08005fb3
 8005df8:	08005eaf 	.word	0x08005eaf
 8005dfc:	08005fb3 	.word	0x08005fb3
 8005e00:	08005fb3 	.word	0x08005fb3
 8005e04:	08005fb3 	.word	0x08005fb3
 8005e08:	08005eef 	.word	0x08005eef
 8005e0c:	08005fb3 	.word	0x08005fb3
 8005e10:	08005fb3 	.word	0x08005fb3
 8005e14:	08005fb3 	.word	0x08005fb3
 8005e18:	08005f31 	.word	0x08005f31
 8005e1c:	08005fb3 	.word	0x08005fb3
 8005e20:	08005fb3 	.word	0x08005fb3
 8005e24:	08005fb3 	.word	0x08005fb3
 8005e28:	08005f71 	.word	0x08005f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fa9e 	bl	8006374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0208 	orr.w	r2, r2, #8
 8005e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0204 	bic.w	r2, r2, #4
 8005e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6999      	ldr	r1, [r3, #24]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	619a      	str	r2, [r3, #24]
      break;
 8005e6a:	e0a5      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fb18 	bl	80064a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6999      	ldr	r1, [r3, #24]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	619a      	str	r2, [r3, #24]
      break;
 8005eac:	e084      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fb8b 	bl	80065d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0208 	orr.w	r2, r2, #8
 8005ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0204 	bic.w	r2, r2, #4
 8005ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69d9      	ldr	r1, [r3, #28]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	61da      	str	r2, [r3, #28]
      break;
 8005eec:	e064      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fbfd 	bl	80066f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69d9      	ldr	r1, [r3, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	021a      	lsls	r2, r3, #8
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	61da      	str	r2, [r3, #28]
      break;
 8005f2e:	e043      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc70 	bl	800681c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0208 	orr.w	r2, r2, #8
 8005f4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0204 	bic.w	r2, r2, #4
 8005f5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f6e:	e023      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fcba 	bl	80068f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	021a      	lsls	r2, r3, #8
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005fb0:	e002      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e0e6      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x1ea>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800600a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f000 80b1 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006028:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f200 80b6 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006030:	4a64      	ldr	r2, [pc, #400]	; (80061c4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f000 80a9 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006038:	4a62      	ldr	r2, [pc, #392]	; (80061c4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f200 80ae 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006040:	4a61      	ldr	r2, [pc, #388]	; (80061c8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f000 80a1 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006048:	4a5f      	ldr	r2, [pc, #380]	; (80061c8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f200 80a6 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006050:	4a5e      	ldr	r2, [pc, #376]	; (80061cc <HAL_TIM_ConfigClockSource+0x200>)
 8006052:	4293      	cmp	r3, r2
 8006054:	f000 8099 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006058:	4a5c      	ldr	r2, [pc, #368]	; (80061cc <HAL_TIM_ConfigClockSource+0x200>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f200 809e 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006060:	4a5b      	ldr	r2, [pc, #364]	; (80061d0 <HAL_TIM_ConfigClockSource+0x204>)
 8006062:	4293      	cmp	r3, r2
 8006064:	f000 8091 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006068:	4a59      	ldr	r2, [pc, #356]	; (80061d0 <HAL_TIM_ConfigClockSource+0x204>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f200 8096 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006070:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006074:	f000 8089 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1be>
 8006078:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800607c:	f200 808e 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	d03e      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x138>
 8006086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608a:	f200 8087 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006092:	f000 8086 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1d6>
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d87f      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 800609c:	2b70      	cmp	r3, #112	; 0x70
 800609e:	d01a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x10a>
 80060a0:	2b70      	cmp	r3, #112	; 0x70
 80060a2:	d87b      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060a4:	2b60      	cmp	r3, #96	; 0x60
 80060a6:	d050      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x17e>
 80060a8:	2b60      	cmp	r3, #96	; 0x60
 80060aa:	d877      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060ac:	2b50      	cmp	r3, #80	; 0x50
 80060ae:	d03c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15e>
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d873      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d058      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x19e>
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d86f      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d064      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1be>
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d86b      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d060      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1be>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d867      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1be>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d05a      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1be>
 80060d4:	e062      	b.n	800619c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6899      	ldr	r1, [r3, #8]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f000 fe0f 	bl	8006d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	609a      	str	r2, [r3, #8]
      break;
 8006102:	e04f      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6899      	ldr	r1, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f000 fdf8 	bl	8006d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006126:	609a      	str	r2, [r3, #8]
      break;
 8006128:	e03c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fcb4 	bl	8006aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2150      	movs	r1, #80	; 0x50
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fdc3 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006148:	e02c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	461a      	mov	r2, r3
 8006158:	f000 fd10 	bl	8006b7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2160      	movs	r1, #96	; 0x60
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fdb3 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006168:	e01c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	461a      	mov	r2, r3
 8006178:	f000 fc94 	bl	8006aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fda3 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006188:	e00c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 fd9a 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 800619a:	e003      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      break;
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80061a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	00100070 	.word	0x00100070
 80061c4:	00100050 	.word	0x00100050
 80061c8:	00100040 	.word	0x00100040
 80061cc:	00100030 	.word	0x00100030
 80061d0:	00100020 	.word	0x00100020

080061d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a42      	ldr	r2, [pc, #264]	; (8006354 <TIM_Base_SetConfig+0x11c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d013      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d00f      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3f      	ldr	r2, [pc, #252]	; (8006358 <TIM_Base_SetConfig+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00b      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3e      	ldr	r2, [pc, #248]	; (800635c <TIM_Base_SetConfig+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d007      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3d      	ldr	r2, [pc, #244]	; (8006360 <TIM_Base_SetConfig+0x128>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <TIM_Base_SetConfig+0x12c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a31      	ldr	r2, [pc, #196]	; (8006354 <TIM_Base_SetConfig+0x11c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01f      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d01b      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <TIM_Base_SetConfig+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d017      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2d      	ldr	r2, [pc, #180]	; (800635c <TIM_Base_SetConfig+0x124>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <TIM_Base_SetConfig+0x128>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2c      	ldr	r2, [pc, #176]	; (8006368 <TIM_Base_SetConfig+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	; (800636c <TIM_Base_SetConfig+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <TIM_Base_SetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <TIM_Base_SetConfig+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d108      	bne.n	80062e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a12      	ldr	r2, [pc, #72]	; (8006354 <TIM_Base_SetConfig+0x11c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <TIM_Base_SetConfig+0x100>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a13      	ldr	r2, [pc, #76]	; (8006360 <TIM_Base_SetConfig+0x128>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00f      	beq.n	8006338 <TIM_Base_SetConfig+0x100>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <TIM_Base_SetConfig+0x130>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00b      	beq.n	8006338 <TIM_Base_SetConfig+0x100>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a12      	ldr	r2, [pc, #72]	; (800636c <TIM_Base_SetConfig+0x134>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d007      	beq.n	8006338 <TIM_Base_SetConfig+0x100>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a11      	ldr	r2, [pc, #68]	; (8006370 <TIM_Base_SetConfig+0x138>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_Base_SetConfig+0x100>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <TIM_Base_SetConfig+0x12c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d103      	bne.n	8006340 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	615a      	str	r2, [r3, #20]
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40013400 	.word	0x40013400
 8006364:	40015000 	.word	0x40015000
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800

08006374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0302 	bic.w	r3, r3, #2
 80063c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a30      	ldr	r2, [pc, #192]	; (8006490 <TIM_OC1_SetConfig+0x11c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <TIM_OC1_SetConfig+0x88>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a2f      	ldr	r2, [pc, #188]	; (8006494 <TIM_OC1_SetConfig+0x120>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00f      	beq.n	80063fc <TIM_OC1_SetConfig+0x88>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <TIM_OC1_SetConfig+0x124>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_OC1_SetConfig+0x88>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2d      	ldr	r2, [pc, #180]	; (800649c <TIM_OC1_SetConfig+0x128>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_OC1_SetConfig+0x88>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <TIM_OC1_SetConfig+0x12c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC1_SetConfig+0x88>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <TIM_OC1_SetConfig+0x130>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d10c      	bne.n	8006416 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0308 	bic.w	r3, r3, #8
 8006402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 0304 	bic.w	r3, r3, #4
 8006414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <TIM_OC1_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <TIM_OC1_SetConfig+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <TIM_OC1_SetConfig+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_OC1_SetConfig+0xd2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1b      	ldr	r2, [pc, #108]	; (8006498 <TIM_OC1_SetConfig+0x124>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_OC1_SetConfig+0xd2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1a      	ldr	r2, [pc, #104]	; (800649c <TIM_OC1_SetConfig+0x128>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_OC1_SetConfig+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <TIM_OC1_SetConfig+0x12c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC1_SetConfig+0xd2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <TIM_OC1_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d111      	bne.n	800646a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800644c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	621a      	str	r2, [r3, #32]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800
 80064a4:	40015000 	.word	0x40015000

080064a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0210 	bic.w	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0320 	bic.w	r3, r3, #32
 80064f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <TIM_OC2_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC2_SetConfig+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2b      	ldr	r2, [pc, #172]	; (80065bc <TIM_OC2_SetConfig+0x114>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <TIM_OC2_SetConfig+0x118>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <TIM_OC2_SetConfig+0x110>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_OC2_SetConfig+0xc0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <TIM_OC2_SetConfig+0x114>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00f      	beq.n	8006568 <TIM_OC2_SetConfig+0xc0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <TIM_OC2_SetConfig+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_OC2_SetConfig+0xc0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <TIM_OC2_SetConfig+0x120>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_OC2_SetConfig+0xc0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <TIM_OC2_SetConfig+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_OC2_SetConfig+0xc0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <TIM_OC2_SetConfig+0x118>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d113      	bne.n	8006590 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800656e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40015000 	.word	0x40015000
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <TIM_OC3_SetConfig+0x10c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_OC3_SetConfig+0x72>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <TIM_OC3_SetConfig+0x110>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC3_SetConfig+0x72>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a29      	ldr	r2, [pc, #164]	; (80066e4 <TIM_OC3_SetConfig+0x114>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10d      	bne.n	800665e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800665c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <TIM_OC3_SetConfig+0x10c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_OC3_SetConfig+0xbe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <TIM_OC3_SetConfig+0x110>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_OC3_SetConfig+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <TIM_OC3_SetConfig+0x118>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_OC3_SetConfig+0xbe>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <TIM_OC3_SetConfig+0x11c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC3_SetConfig+0xbe>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <TIM_OC3_SetConfig+0x120>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC3_SetConfig+0xbe>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <TIM_OC3_SetConfig+0x114>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d113      	bne.n	80066b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40015000 	.word	0x40015000
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800

080066f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2c      	ldr	r2, [pc, #176]	; (8006804 <TIM_OC4_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_OC4_SetConfig+0x74>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2b      	ldr	r2, [pc, #172]	; (8006808 <TIM_OC4_SetConfig+0x114>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_OC4_SetConfig+0x74>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2a      	ldr	r2, [pc, #168]	; (800680c <TIM_OC4_SetConfig+0x118>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10d      	bne.n	8006784 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800676e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <TIM_OC4_SetConfig+0x110>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <TIM_OC4_SetConfig+0xc0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <TIM_OC4_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00f      	beq.n	80067b4 <TIM_OC4_SetConfig+0xc0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <TIM_OC4_SetConfig+0x11c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_OC4_SetConfig+0xc0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <TIM_OC4_SetConfig+0x120>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_OC4_SetConfig+0xc0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <TIM_OC4_SetConfig+0x124>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC4_SetConfig+0xc0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC4_SetConfig+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d113      	bne.n	80067dc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	019b      	lsls	r3, r3, #6
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40013400 	.word	0x40013400
 800680c:	40015000 	.word	0x40015000
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <TIM_OC5_SetConfig+0xbc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <TIM_OC5_SetConfig+0x82>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a18      	ldr	r2, [pc, #96]	; (80068dc <TIM_OC5_SetConfig+0xc0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00f      	beq.n	800689e <TIM_OC5_SetConfig+0x82>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC5_SetConfig+0xc4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00b      	beq.n	800689e <TIM_OC5_SetConfig+0x82>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC5_SetConfig+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_OC5_SetConfig+0x82>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <TIM_OC5_SetConfig+0xcc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC5_SetConfig+0x82>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <TIM_OC5_SetConfig+0xd0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d109      	bne.n	80068b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	621a      	str	r2, [r3, #32]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800
 80068ec:	40015000 	.word	0x40015000

080068f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	051b      	lsls	r3, r3, #20
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1a      	ldr	r2, [pc, #104]	; (80069b0 <TIM_OC6_SetConfig+0xc0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <TIM_OC6_SetConfig+0x84>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a19      	ldr	r2, [pc, #100]	; (80069b4 <TIM_OC6_SetConfig+0xc4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00f      	beq.n	8006974 <TIM_OC6_SetConfig+0x84>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <TIM_OC6_SetConfig+0xc8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00b      	beq.n	8006974 <TIM_OC6_SetConfig+0x84>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a17      	ldr	r2, [pc, #92]	; (80069bc <TIM_OC6_SetConfig+0xcc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d007      	beq.n	8006974 <TIM_OC6_SetConfig+0x84>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <TIM_OC6_SetConfig+0xd0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_OC6_SetConfig+0x84>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <TIM_OC6_SetConfig+0xd4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d109      	bne.n	8006988 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800697a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800
 80069c4:	40015000 	.word	0x40015000

080069c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <TIM_TI1_SetConfig+0xc4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d017      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d013      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a23      	ldr	r2, [pc, #140]	; (8006a90 <TIM_TI1_SetConfig+0xc8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <TIM_TI1_SetConfig+0xcc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <TIM_TI1_SetConfig+0xd0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a20      	ldr	r2, [pc, #128]	; (8006a9c <TIM_TI1_SetConfig+0xd4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_TI1_SetConfig+0x5e>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <TIM_TI1_SetConfig+0xd8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <TIM_TI1_SetConfig+0x62>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <TIM_TI1_SetConfig+0x64>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e003      	b.n	8006a4a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f023 030a 	bic.w	r3, r3, #10
 8006a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 030a 	and.w	r3, r3, #10
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40013400 	.word	0x40013400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40015000 	.word	0x40015000

08006aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 030a 	bic.w	r3, r3, #10
 8006ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f023 0210 	bic.w	r2, r3, #16
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	031b      	lsls	r3, r3, #12
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f023 0210 	bic.w	r2, r3, #16
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	031b      	lsls	r3, r3, #12
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0303 	bic.w	r3, r3, #3
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	031b      	lsls	r3, r3, #12
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	031b      	lsls	r3, r3, #12
 8006cac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f043 0307 	orr.w	r3, r3, #7
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	021a      	lsls	r2, r3, #8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e06f      	b.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a31      	ldr	r2, [pc, #196]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2e      	ldr	r2, [pc, #184]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d01d      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2c:	d018      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10c      	bne.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40015000 	.word	0x40015000
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	40014000 	.word	0x40014000

08006eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e042      	b.n	8006fd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7fa ff5b 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2224      	movs	r2, #36	; 0x24
 8006f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0201 	bic.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f82c 	bl	8006fdc <UART_SetConfig>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e022      	b.n	8006fd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb1c 	bl	80075d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fba3 	bl	8007718 <UART_CheckIdleState>
 8006fd2:	4603      	mov	r3, r0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe0:	b08c      	sub	sp, #48	; 0x30
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4313      	orrs	r3, r2
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4baa      	ldr	r3, [pc, #680]	; (80072b4 <UART_SetConfig+0x2d8>)
 800700c:	4013      	ands	r3, r2
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007014:	430b      	orrs	r3, r1
 8007016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a9f      	ldr	r2, [pc, #636]	; (80072b8 <UART_SetConfig+0x2dc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007044:	4313      	orrs	r3, r2
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007052:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705c:	430b      	orrs	r3, r1
 800705e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	f023 010f 	bic.w	r1, r3, #15
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a90      	ldr	r2, [pc, #576]	; (80072bc <UART_SetConfig+0x2e0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d125      	bne.n	80070cc <UART_SetConfig+0xf0>
 8007080:	4b8f      	ldr	r3, [pc, #572]	; (80072c0 <UART_SetConfig+0x2e4>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b03      	cmp	r3, #3
 800708c:	d81a      	bhi.n	80070c4 <UART_SetConfig+0xe8>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0xb8>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e116      	b.n	80072da <UART_SetConfig+0x2fe>
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e112      	b.n	80072da <UART_SetConfig+0x2fe>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e10e      	b.n	80072da <UART_SetConfig+0x2fe>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e10a      	b.n	80072da <UART_SetConfig+0x2fe>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e106      	b.n	80072da <UART_SetConfig+0x2fe>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a7c      	ldr	r2, [pc, #496]	; (80072c4 <UART_SetConfig+0x2e8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d138      	bne.n	8007148 <UART_SetConfig+0x16c>
 80070d6:	4b7a      	ldr	r3, [pc, #488]	; (80072c0 <UART_SetConfig+0x2e4>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	f003 030c 	and.w	r3, r3, #12
 80070e0:	2b0c      	cmp	r3, #12
 80070e2:	d82d      	bhi.n	8007140 <UART_SetConfig+0x164>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <UART_SetConfig+0x110>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007121 	.word	0x08007121
 80070f0:	08007141 	.word	0x08007141
 80070f4:	08007141 	.word	0x08007141
 80070f8:	08007141 	.word	0x08007141
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007141 	.word	0x08007141
 8007104:	08007141 	.word	0x08007141
 8007108:	08007141 	.word	0x08007141
 800710c:	08007129 	.word	0x08007129
 8007110:	08007141 	.word	0x08007141
 8007114:	08007141 	.word	0x08007141
 8007118:	08007141 	.word	0x08007141
 800711c:	08007139 	.word	0x08007139
 8007120:	2300      	movs	r3, #0
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007126:	e0d8      	b.n	80072da <UART_SetConfig+0x2fe>
 8007128:	2302      	movs	r3, #2
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712e:	e0d4      	b.n	80072da <UART_SetConfig+0x2fe>
 8007130:	2304      	movs	r3, #4
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007136:	e0d0      	b.n	80072da <UART_SetConfig+0x2fe>
 8007138:	2308      	movs	r3, #8
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713e:	e0cc      	b.n	80072da <UART_SetConfig+0x2fe>
 8007140:	2310      	movs	r3, #16
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007146:	e0c8      	b.n	80072da <UART_SetConfig+0x2fe>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a5e      	ldr	r2, [pc, #376]	; (80072c8 <UART_SetConfig+0x2ec>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d125      	bne.n	800719e <UART_SetConfig+0x1c2>
 8007152:	4b5b      	ldr	r3, [pc, #364]	; (80072c0 <UART_SetConfig+0x2e4>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007158:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800715c:	2b30      	cmp	r3, #48	; 0x30
 800715e:	d016      	beq.n	800718e <UART_SetConfig+0x1b2>
 8007160:	2b30      	cmp	r3, #48	; 0x30
 8007162:	d818      	bhi.n	8007196 <UART_SetConfig+0x1ba>
 8007164:	2b20      	cmp	r3, #32
 8007166:	d00a      	beq.n	800717e <UART_SetConfig+0x1a2>
 8007168:	2b20      	cmp	r3, #32
 800716a:	d814      	bhi.n	8007196 <UART_SetConfig+0x1ba>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <UART_SetConfig+0x19a>
 8007170:	2b10      	cmp	r3, #16
 8007172:	d008      	beq.n	8007186 <UART_SetConfig+0x1aa>
 8007174:	e00f      	b.n	8007196 <UART_SetConfig+0x1ba>
 8007176:	2300      	movs	r3, #0
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717c:	e0ad      	b.n	80072da <UART_SetConfig+0x2fe>
 800717e:	2302      	movs	r3, #2
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007184:	e0a9      	b.n	80072da <UART_SetConfig+0x2fe>
 8007186:	2304      	movs	r3, #4
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800718c:	e0a5      	b.n	80072da <UART_SetConfig+0x2fe>
 800718e:	2308      	movs	r3, #8
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007194:	e0a1      	b.n	80072da <UART_SetConfig+0x2fe>
 8007196:	2310      	movs	r3, #16
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719c:	e09d      	b.n	80072da <UART_SetConfig+0x2fe>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a4a      	ldr	r2, [pc, #296]	; (80072cc <UART_SetConfig+0x2f0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d125      	bne.n	80071f4 <UART_SetConfig+0x218>
 80071a8:	4b45      	ldr	r3, [pc, #276]	; (80072c0 <UART_SetConfig+0x2e4>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071b2:	2bc0      	cmp	r3, #192	; 0xc0
 80071b4:	d016      	beq.n	80071e4 <UART_SetConfig+0x208>
 80071b6:	2bc0      	cmp	r3, #192	; 0xc0
 80071b8:	d818      	bhi.n	80071ec <UART_SetConfig+0x210>
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d00a      	beq.n	80071d4 <UART_SetConfig+0x1f8>
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d814      	bhi.n	80071ec <UART_SetConfig+0x210>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <UART_SetConfig+0x1f0>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d008      	beq.n	80071dc <UART_SetConfig+0x200>
 80071ca:	e00f      	b.n	80071ec <UART_SetConfig+0x210>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d2:	e082      	b.n	80072da <UART_SetConfig+0x2fe>
 80071d4:	2302      	movs	r3, #2
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071da:	e07e      	b.n	80072da <UART_SetConfig+0x2fe>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e2:	e07a      	b.n	80072da <UART_SetConfig+0x2fe>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ea:	e076      	b.n	80072da <UART_SetConfig+0x2fe>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f2:	e072      	b.n	80072da <UART_SetConfig+0x2fe>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a35      	ldr	r2, [pc, #212]	; (80072d0 <UART_SetConfig+0x2f4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d12a      	bne.n	8007254 <UART_SetConfig+0x278>
 80071fe:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <UART_SetConfig+0x2e4>)
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800720c:	d01a      	beq.n	8007244 <UART_SetConfig+0x268>
 800720e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007212:	d81b      	bhi.n	800724c <UART_SetConfig+0x270>
 8007214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007218:	d00c      	beq.n	8007234 <UART_SetConfig+0x258>
 800721a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721e:	d815      	bhi.n	800724c <UART_SetConfig+0x270>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <UART_SetConfig+0x250>
 8007224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007228:	d008      	beq.n	800723c <UART_SetConfig+0x260>
 800722a:	e00f      	b.n	800724c <UART_SetConfig+0x270>
 800722c:	2300      	movs	r3, #0
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007232:	e052      	b.n	80072da <UART_SetConfig+0x2fe>
 8007234:	2302      	movs	r3, #2
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723a:	e04e      	b.n	80072da <UART_SetConfig+0x2fe>
 800723c:	2304      	movs	r3, #4
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007242:	e04a      	b.n	80072da <UART_SetConfig+0x2fe>
 8007244:	2308      	movs	r3, #8
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724a:	e046      	b.n	80072da <UART_SetConfig+0x2fe>
 800724c:	2310      	movs	r3, #16
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e042      	b.n	80072da <UART_SetConfig+0x2fe>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <UART_SetConfig+0x2dc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d13a      	bne.n	80072d4 <UART_SetConfig+0x2f8>
 800725e:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <UART_SetConfig+0x2e4>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800726c:	d01a      	beq.n	80072a4 <UART_SetConfig+0x2c8>
 800726e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007272:	d81b      	bhi.n	80072ac <UART_SetConfig+0x2d0>
 8007274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007278:	d00c      	beq.n	8007294 <UART_SetConfig+0x2b8>
 800727a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800727e:	d815      	bhi.n	80072ac <UART_SetConfig+0x2d0>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <UART_SetConfig+0x2b0>
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007288:	d008      	beq.n	800729c <UART_SetConfig+0x2c0>
 800728a:	e00f      	b.n	80072ac <UART_SetConfig+0x2d0>
 800728c:	2300      	movs	r3, #0
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e022      	b.n	80072da <UART_SetConfig+0x2fe>
 8007294:	2302      	movs	r3, #2
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e01e      	b.n	80072da <UART_SetConfig+0x2fe>
 800729c:	2304      	movs	r3, #4
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e01a      	b.n	80072da <UART_SetConfig+0x2fe>
 80072a4:	2308      	movs	r3, #8
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e016      	b.n	80072da <UART_SetConfig+0x2fe>
 80072ac:	2310      	movs	r3, #16
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b2:	e012      	b.n	80072da <UART_SetConfig+0x2fe>
 80072b4:	cfff69f3 	.word	0xcfff69f3
 80072b8:	40008000 	.word	0x40008000
 80072bc:	40013800 	.word	0x40013800
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40004400 	.word	0x40004400
 80072c8:	40004800 	.word	0x40004800
 80072cc:	40004c00 	.word	0x40004c00
 80072d0:	40005000 	.word	0x40005000
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4aae      	ldr	r2, [pc, #696]	; (8007598 <UART_SetConfig+0x5bc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	f040 8097 	bne.w	8007414 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d823      	bhi.n	8007336 <UART_SetConfig+0x35a>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <UART_SetConfig+0x318>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007337 	.word	0x08007337
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007337 	.word	0x08007337
 8007304:	08007327 	.word	0x08007327
 8007308:	08007337 	.word	0x08007337
 800730c:	08007337 	.word	0x08007337
 8007310:	08007337 	.word	0x08007337
 8007314:	0800732f 	.word	0x0800732f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007318:	f7fd fdac 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 800731c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800731e:	e010      	b.n	8007342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007320:	4b9e      	ldr	r3, [pc, #632]	; (800759c <UART_SetConfig+0x5c0>)
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007324:	e00d      	b.n	8007342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007326:	f7fd fd39 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800732a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800732c:	e009      	b.n	8007342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007334:	e005      	b.n	8007342 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8130 	beq.w	80075aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	4a94      	ldr	r2, [pc, #592]	; (80075a0 <UART_SetConfig+0x5c4>)
 8007350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007354:	461a      	mov	r2, r3
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	fbb3 f3f2 	udiv	r3, r3, r2
 800735c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	429a      	cmp	r2, r3
 800736c:	d305      	bcc.n	800737a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d903      	bls.n	8007382 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007380:	e113      	b.n	80075aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2200      	movs	r2, #0
 8007386:	60bb      	str	r3, [r7, #8]
 8007388:	60fa      	str	r2, [r7, #12]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	4a84      	ldr	r2, [pc, #528]	; (80075a0 <UART_SetConfig+0x5c4>)
 8007390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007394:	b29b      	uxth	r3, r3
 8007396:	2200      	movs	r2, #0
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073a4:	f7f9 fc28 	bl	8000bf8 <__aeabi_uldivmod>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4610      	mov	r0, r2
 80073ae:	4619      	mov	r1, r3
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	f04f 0300 	mov.w	r3, #0
 80073b8:	020b      	lsls	r3, r1, #8
 80073ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073be:	0202      	lsls	r2, r0, #8
 80073c0:	6979      	ldr	r1, [r7, #20]
 80073c2:	6849      	ldr	r1, [r1, #4]
 80073c4:	0849      	lsrs	r1, r1, #1
 80073c6:	2000      	movs	r0, #0
 80073c8:	460c      	mov	r4, r1
 80073ca:	4605      	mov	r5, r0
 80073cc:	eb12 0804 	adds.w	r8, r2, r4
 80073d0:	eb43 0905 	adc.w	r9, r3, r5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	469a      	mov	sl, r3
 80073dc:	4693      	mov	fp, r2
 80073de:	4652      	mov	r2, sl
 80073e0:	465b      	mov	r3, fp
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f9 fc07 	bl	8000bf8 <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4613      	mov	r3, r2
 80073f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f8:	d308      	bcc.n	800740c <UART_SetConfig+0x430>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007400:	d204      	bcs.n	800740c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a3a      	ldr	r2, [r7, #32]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	e0ce      	b.n	80075aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007412:	e0ca      	b.n	80075aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741c:	d166      	bne.n	80074ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800741e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007422:	2b08      	cmp	r3, #8
 8007424:	d827      	bhi.n	8007476 <UART_SetConfig+0x49a>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x450>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007451 	.word	0x08007451
 8007430:	08007459 	.word	0x08007459
 8007434:	08007461 	.word	0x08007461
 8007438:	08007477 	.word	0x08007477
 800743c:	08007467 	.word	0x08007467
 8007440:	08007477 	.word	0x08007477
 8007444:	08007477 	.word	0x08007477
 8007448:	08007477 	.word	0x08007477
 800744c:	0800746f 	.word	0x0800746f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd fd10 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 8007454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007456:	e014      	b.n	8007482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007458:	f7fd fd22 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 800745c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800745e:	e010      	b.n	8007482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007460:	4b4e      	ldr	r3, [pc, #312]	; (800759c <UART_SetConfig+0x5c0>)
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007464:	e00d      	b.n	8007482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007466:	f7fd fc99 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800746a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746c:	e009      	b.n	8007482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007474:	e005      	b.n	8007482 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8090 	beq.w	80075aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	4a44      	ldr	r2, [pc, #272]	; (80075a0 <UART_SetConfig+0x5c4>)
 8007490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007494:	461a      	mov	r2, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	fbb3 f3f2 	udiv	r3, r3, r2
 800749c:	005a      	lsls	r2, r3, #1
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	441a      	add	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d916      	bls.n	80074e4 <UART_SetConfig+0x508>
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d212      	bcs.n	80074e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f023 030f 	bic.w	r3, r3, #15
 80074c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	8bfb      	ldrh	r3, [r7, #30]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	8bfa      	ldrh	r2, [r7, #30]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e062      	b.n	80075aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074ea:	e05e      	b.n	80075aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d828      	bhi.n	8007546 <UART_SetConfig+0x56a>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x520>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	08007547 	.word	0x08007547
 800750c:	08007537 	.word	0x08007537
 8007510:	08007547 	.word	0x08007547
 8007514:	08007547 	.word	0x08007547
 8007518:	08007547 	.word	0x08007547
 800751c:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fd fca8 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 8007524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007526:	e014      	b.n	8007552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fd fcba 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 800752c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b1a      	ldr	r3, [pc, #104]	; (800759c <UART_SetConfig+0x5c0>)
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007534:	e00d      	b.n	8007552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fd fc31 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 800753a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800753c:	e009      	b.n	8007552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007544:	e005      	b.n	8007552 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007550:	bf00      	nop
    }

    if (pclk != 0U)
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d028      	beq.n	80075aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	4a10      	ldr	r2, [pc, #64]	; (80075a0 <UART_SetConfig+0x5c4>)
 800755e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007562:	461a      	mov	r2, r3
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	fbb3 f2f2 	udiv	r2, r3, r2
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	441a      	add	r2, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	fbb2 f3f3 	udiv	r3, r2, r3
 800757a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	2b0f      	cmp	r3, #15
 8007580:	d910      	bls.n	80075a4 <UART_SetConfig+0x5c8>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007588:	d20c      	bcs.n	80075a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	b29a      	uxth	r2, r3
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
 8007594:	e009      	b.n	80075aa <UART_SetConfig+0x5ce>
 8007596:	bf00      	nop
 8007598:	40008000 	.word	0x40008000
 800759c:	00f42400 	.word	0x00f42400
 80075a0:	0800a4c8 	.word	0x0800a4c8
      }
      else
      {
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2200      	movs	r2, #0
 80075be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2200      	movs	r2, #0
 80075c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3730      	adds	r7, #48	; 0x30
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01a      	beq.n	80076ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d2:	d10a      	bne.n	80076ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
  }
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af02      	add	r7, sp, #8
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007728:	f7fa fe40 	bl	80023ac <HAL_GetTick>
 800772c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b08      	cmp	r3, #8
 800773a:	d10e      	bne.n	800775a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800773c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f82f 	bl	80077ae <UART_WaitOnFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e025      	b.n	80077a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d10e      	bne.n	8007786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f819 	bl	80077ae <UART_WaitOnFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e00f      	b.n	80077a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b09c      	sub	sp, #112	; 0x70
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077be:	e0a9      	b.n	8007914 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	f000 80a5 	beq.w	8007914 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ca:	f7fa fdef 	bl	80023ac <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80077da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d140      	bne.n	8007862 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077f4:	667b      	str	r3, [r7, #100]	; 0x64
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007800:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800780c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e6      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	663b      	str	r3, [r7, #96]	; 0x60
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007832:	64ba      	str	r2, [r7, #72]	; 0x48
 8007834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e069      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d051      	beq.n	8007914 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787e:	d149      	bne.n	8007914 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800789e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
 80078aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	613b      	str	r3, [r7, #16]
   return(result);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078dc:	623a      	str	r2, [r7, #32]
 80078de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e010      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69da      	ldr	r2, [r3, #28]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	4013      	ands	r3, r2
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	429a      	cmp	r2, r3
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	429a      	cmp	r2, r3
 8007930:	f43f af46 	beq.w	80077c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3770      	adds	r7, #112	; 0x70
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_UARTEx_DisableFifoMode+0x16>
 8007950:	2302      	movs	r3, #2
 8007952:	e027      	b.n	80079a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2224      	movs	r2, #36	; 0x24
 8007960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0201 	bic.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007982:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e02d      	b.n	8007a24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2224      	movs	r2, #36	; 0x24
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f84f 	bl	8007aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e02d      	b.n	8007aa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	; 0x24
 8007a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0201 	bic.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f811 	bl	8007aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d108      	bne.n	8007aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ac8:	e031      	b.n	8007b2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aca:	2308      	movs	r3, #8
 8007acc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ace:	2308      	movs	r3, #8
 8007ad0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	0e5b      	lsrs	r3, r3, #25
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	0f5b      	lsrs	r3, r3, #29
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	7b3a      	ldrb	r2, [r7, #12]
 8007af6:	4911      	ldr	r1, [pc, #68]	; (8007b3c <UARTEx_SetNbDataToProcess+0x94>)
 8007af8:	5c8a      	ldrb	r2, [r1, r2]
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007afe:	7b3a      	ldrb	r2, [r7, #12]
 8007b00:	490f      	ldr	r1, [pc, #60]	; (8007b40 <UARTEx_SetNbDataToProcess+0x98>)
 8007b02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b04:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	7b7a      	ldrb	r2, [r7, #13]
 8007b14:	4909      	ldr	r1, [pc, #36]	; (8007b3c <UARTEx_SetNbDataToProcess+0x94>)
 8007b16:	5c8a      	ldrb	r2, [r1, r2]
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b1c:	7b7a      	ldrb	r2, [r7, #13]
 8007b1e:	4908      	ldr	r1, [pc, #32]	; (8007b40 <UARTEx_SetNbDataToProcess+0x98>)
 8007b20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b22:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	0800a4e0 	.word	0x0800a4e0
 8007b40:	0800a4e8 	.word	0x0800a4e8

08007b44 <__cvt>:
 8007b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b48:	ec55 4b10 	vmov	r4, r5, d0
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	460e      	mov	r6, r1
 8007b50:	4619      	mov	r1, r3
 8007b52:	462b      	mov	r3, r5
 8007b54:	bfbb      	ittet	lt
 8007b56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b5a:	461d      	movlt	r5, r3
 8007b5c:	2300      	movge	r3, #0
 8007b5e:	232d      	movlt	r3, #45	; 0x2d
 8007b60:	700b      	strb	r3, [r1, #0]
 8007b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b68:	4691      	mov	r9, r2
 8007b6a:	f023 0820 	bic.w	r8, r3, #32
 8007b6e:	bfbc      	itt	lt
 8007b70:	4622      	movlt	r2, r4
 8007b72:	4614      	movlt	r4, r2
 8007b74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b78:	d005      	beq.n	8007b86 <__cvt+0x42>
 8007b7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b7e:	d100      	bne.n	8007b82 <__cvt+0x3e>
 8007b80:	3601      	adds	r6, #1
 8007b82:	2102      	movs	r1, #2
 8007b84:	e000      	b.n	8007b88 <__cvt+0x44>
 8007b86:	2103      	movs	r1, #3
 8007b88:	ab03      	add	r3, sp, #12
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	ab02      	add	r3, sp, #8
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	ec45 4b10 	vmov	d0, r4, r5
 8007b94:	4653      	mov	r3, sl
 8007b96:	4632      	mov	r2, r6
 8007b98:	f000 fe36 	bl	8008808 <_dtoa_r>
 8007b9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	d102      	bne.n	8007baa <__cvt+0x66>
 8007ba4:	f019 0f01 	tst.w	r9, #1
 8007ba8:	d022      	beq.n	8007bf0 <__cvt+0xac>
 8007baa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bae:	eb07 0906 	add.w	r9, r7, r6
 8007bb2:	d110      	bne.n	8007bd6 <__cvt+0x92>
 8007bb4:	783b      	ldrb	r3, [r7, #0]
 8007bb6:	2b30      	cmp	r3, #48	; 0x30
 8007bb8:	d10a      	bne.n	8007bd0 <__cvt+0x8c>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 ffa9 	bl	8000b18 <__aeabi_dcmpeq>
 8007bc6:	b918      	cbnz	r0, 8007bd0 <__cvt+0x8c>
 8007bc8:	f1c6 0601 	rsb	r6, r6, #1
 8007bcc:	f8ca 6000 	str.w	r6, [sl]
 8007bd0:	f8da 3000 	ldr.w	r3, [sl]
 8007bd4:	4499      	add	r9, r3
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f8 ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8007be2:	b108      	cbz	r0, 8007be8 <__cvt+0xa4>
 8007be4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be8:	2230      	movs	r2, #48	; 0x30
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	454b      	cmp	r3, r9
 8007bee:	d307      	bcc.n	8007c00 <__cvt+0xbc>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf4:	1bdb      	subs	r3, r3, r7
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	b004      	add	sp, #16
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	1c59      	adds	r1, r3, #1
 8007c02:	9103      	str	r1, [sp, #12]
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e7f0      	b.n	8007bea <__cvt+0xa6>

08007c08 <__exponent>:
 8007c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfb8      	it	lt
 8007c10:	4249      	neglt	r1, r1
 8007c12:	f803 2b02 	strb.w	r2, [r3], #2
 8007c16:	bfb4      	ite	lt
 8007c18:	222d      	movlt	r2, #45	; 0x2d
 8007c1a:	222b      	movge	r2, #43	; 0x2b
 8007c1c:	2909      	cmp	r1, #9
 8007c1e:	7042      	strb	r2, [r0, #1]
 8007c20:	dd2a      	ble.n	8007c78 <__exponent+0x70>
 8007c22:	f10d 0207 	add.w	r2, sp, #7
 8007c26:	4617      	mov	r7, r2
 8007c28:	260a      	movs	r6, #10
 8007c2a:	4694      	mov	ip, r2
 8007c2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c30:	fb06 1415 	mls	r4, r6, r5, r1
 8007c34:	3430      	adds	r4, #48	; 0x30
 8007c36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	2c63      	cmp	r4, #99	; 0x63
 8007c3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c42:	4629      	mov	r1, r5
 8007c44:	dcf1      	bgt.n	8007c2a <__exponent+0x22>
 8007c46:	3130      	adds	r1, #48	; 0x30
 8007c48:	f1ac 0402 	sub.w	r4, ip, #2
 8007c4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c50:	1c41      	adds	r1, r0, #1
 8007c52:	4622      	mov	r2, r4
 8007c54:	42ba      	cmp	r2, r7
 8007c56:	d30a      	bcc.n	8007c6e <__exponent+0x66>
 8007c58:	f10d 0209 	add.w	r2, sp, #9
 8007c5c:	eba2 020c 	sub.w	r2, r2, ip
 8007c60:	42bc      	cmp	r4, r7
 8007c62:	bf88      	it	hi
 8007c64:	2200      	movhi	r2, #0
 8007c66:	4413      	add	r3, r2
 8007c68:	1a18      	subs	r0, r3, r0
 8007c6a:	b003      	add	sp, #12
 8007c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c76:	e7ed      	b.n	8007c54 <__exponent+0x4c>
 8007c78:	2330      	movs	r3, #48	; 0x30
 8007c7a:	3130      	adds	r1, #48	; 0x30
 8007c7c:	7083      	strb	r3, [r0, #2]
 8007c7e:	70c1      	strb	r1, [r0, #3]
 8007c80:	1d03      	adds	r3, r0, #4
 8007c82:	e7f1      	b.n	8007c68 <__exponent+0x60>

08007c84 <_printf_float>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	ed2d 8b02 	vpush	{d8}
 8007c8c:	b08d      	sub	sp, #52	; 0x34
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c94:	4616      	mov	r6, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	4605      	mov	r5, r0
 8007c9a:	f000 fcb5 	bl	8008608 <_localeconv_r>
 8007c9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	f7f8 fb0c 	bl	80002c0 <strlen>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930a      	str	r3, [sp, #40]	; 0x28
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	f103 0208 	add.w	r2, r3, #8
 8007cc2:	f8c8 2000 	str.w	r2, [r8]
 8007cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd4:	ee08 0a10 	vmov	s16, r0
 8007cd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce0:	4b9e      	ldr	r3, [pc, #632]	; (8007f5c <_printf_float+0x2d8>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	f7f8 ff49 	bl	8000b7c <__aeabi_dcmpun>
 8007cea:	bb88      	cbnz	r0, 8007d50 <_printf_float+0xcc>
 8007cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <_printf_float+0x2d8>)
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	f7f8 ff23 	bl	8000b40 <__aeabi_dcmple>
 8007cfa:	bb48      	cbnz	r0, 8007d50 <_printf_float+0xcc>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 ff12 	bl	8000b2c <__aeabi_dcmplt>
 8007d08:	b110      	cbz	r0, 8007d10 <_printf_float+0x8c>
 8007d0a:	232d      	movs	r3, #45	; 0x2d
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d10:	4a93      	ldr	r2, [pc, #588]	; (8007f60 <_printf_float+0x2dc>)
 8007d12:	4b94      	ldr	r3, [pc, #592]	; (8007f64 <_printf_float+0x2e0>)
 8007d14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d18:	bf94      	ite	ls
 8007d1a:	4690      	movls	r8, r2
 8007d1c:	4698      	movhi	r8, r3
 8007d1e:	2303      	movs	r3, #3
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	9b05      	ldr	r3, [sp, #20]
 8007d24:	f023 0304 	bic.w	r3, r3, #4
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	9700      	str	r7, [sp, #0]
 8007d30:	4633      	mov	r3, r6
 8007d32:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f9da 	bl	80080f0 <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f040 8090 	bne.w	8007e62 <_printf_float+0x1de>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	b00d      	add	sp, #52	; 0x34
 8007d48:	ecbd 8b02 	vpop	{d8}
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 ff10 	bl	8000b7c <__aeabi_dcmpun>
 8007d5c:	b140      	cbz	r0, 8007d70 <_printf_float+0xec>
 8007d5e:	464b      	mov	r3, r9
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfbc      	itt	lt
 8007d64:	232d      	movlt	r3, #45	; 0x2d
 8007d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d6a:	4a7f      	ldr	r2, [pc, #508]	; (8007f68 <_printf_float+0x2e4>)
 8007d6c:	4b7f      	ldr	r3, [pc, #508]	; (8007f6c <_printf_float+0x2e8>)
 8007d6e:	e7d1      	b.n	8007d14 <_printf_float+0x90>
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d76:	9206      	str	r2, [sp, #24]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	d13f      	bne.n	8007dfc <_printf_float+0x178>
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	6861      	ldr	r1, [r4, #4]
 8007d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d92:	ab09      	add	r3, sp, #36	; 0x24
 8007d94:	ec49 8b10 	vmov	d0, r8, r9
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6022      	str	r2, [r4, #0]
 8007d9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007da0:	4628      	mov	r0, r5
 8007da2:	f7ff fecf 	bl	8007b44 <__cvt>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007daa:	2b47      	cmp	r3, #71	; 0x47
 8007dac:	4680      	mov	r8, r0
 8007dae:	d108      	bne.n	8007dc2 <_printf_float+0x13e>
 8007db0:	1cc8      	adds	r0, r1, #3
 8007db2:	db02      	blt.n	8007dba <_printf_float+0x136>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	4299      	cmp	r1, r3
 8007db8:	dd41      	ble.n	8007e3e <_printf_float+0x1ba>
 8007dba:	f1ab 0302 	sub.w	r3, fp, #2
 8007dbe:	fa5f fb83 	uxtb.w	fp, r3
 8007dc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc6:	d820      	bhi.n	8007e0a <_printf_float+0x186>
 8007dc8:	3901      	subs	r1, #1
 8007dca:	465a      	mov	r2, fp
 8007dcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8007dd2:	f7ff ff19 	bl	8007c08 <__exponent>
 8007dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd8:	1813      	adds	r3, r2, r0
 8007dda:	2a01      	cmp	r2, #1
 8007ddc:	4681      	mov	r9, r0
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	dc02      	bgt.n	8007de8 <_printf_float+0x164>
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	07d2      	lsls	r2, r2, #31
 8007de6:	d501      	bpl.n	8007dec <_printf_float+0x168>
 8007de8:	3301      	adds	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d09c      	beq.n	8007d2e <_printf_float+0xaa>
 8007df4:	232d      	movs	r3, #45	; 0x2d
 8007df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfa:	e798      	b.n	8007d2e <_printf_float+0xaa>
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	2a47      	cmp	r2, #71	; 0x47
 8007e00:	d1be      	bne.n	8007d80 <_printf_float+0xfc>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1bc      	bne.n	8007d80 <_printf_float+0xfc>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7b9      	b.n	8007d7e <_printf_float+0xfa>
 8007e0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e0e:	d118      	bne.n	8007e42 <_printf_float+0x1be>
 8007e10:	2900      	cmp	r1, #0
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	dd0b      	ble.n	8007e2e <_printf_float+0x1aa>
 8007e16:	6121      	str	r1, [r4, #16]
 8007e18:	b913      	cbnz	r3, 8007e20 <_printf_float+0x19c>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d502      	bpl.n	8007e26 <_printf_float+0x1a2>
 8007e20:	3301      	adds	r3, #1
 8007e22:	440b      	add	r3, r1
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e28:	f04f 0900 	mov.w	r9, #0
 8007e2c:	e7de      	b.n	8007dec <_printf_float+0x168>
 8007e2e:	b913      	cbnz	r3, 8007e36 <_printf_float+0x1b2>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	07d2      	lsls	r2, r2, #31
 8007e34:	d501      	bpl.n	8007e3a <_printf_float+0x1b6>
 8007e36:	3302      	adds	r3, #2
 8007e38:	e7f4      	b.n	8007e24 <_printf_float+0x1a0>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e7f2      	b.n	8007e24 <_printf_float+0x1a0>
 8007e3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	4299      	cmp	r1, r3
 8007e46:	db05      	blt.n	8007e54 <_printf_float+0x1d0>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	6121      	str	r1, [r4, #16]
 8007e4c:	07d8      	lsls	r0, r3, #31
 8007e4e:	d5ea      	bpl.n	8007e26 <_printf_float+0x1a2>
 8007e50:	1c4b      	adds	r3, r1, #1
 8007e52:	e7e7      	b.n	8007e24 <_printf_float+0x1a0>
 8007e54:	2900      	cmp	r1, #0
 8007e56:	bfd4      	ite	le
 8007e58:	f1c1 0202 	rsble	r2, r1, #2
 8007e5c:	2201      	movgt	r2, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	e7e0      	b.n	8007e24 <_printf_float+0x1a0>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	055a      	lsls	r2, r3, #21
 8007e66:	d407      	bmi.n	8007e78 <_printf_float+0x1f4>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	d12c      	bne.n	8007ed0 <_printf_float+0x24c>
 8007e76:	e764      	b.n	8007d42 <_printf_float+0xbe>
 8007e78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7c:	f240 80e0 	bls.w	8008040 <_printf_float+0x3bc>
 8007e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e84:	2200      	movs	r2, #0
 8007e86:	2300      	movs	r3, #0
 8007e88:	f7f8 fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d034      	beq.n	8007efa <_printf_float+0x276>
 8007e90:	4a37      	ldr	r2, [pc, #220]	; (8007f70 <_printf_float+0x2ec>)
 8007e92:	2301      	movs	r3, #1
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af51 	beq.w	8007d42 <_printf_float+0xbe>
 8007ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	db02      	blt.n	8007eae <_printf_float+0x22a>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07d8      	lsls	r0, r3, #31
 8007eac:	d510      	bpl.n	8007ed0 <_printf_float+0x24c>
 8007eae:	ee18 3a10 	vmov	r3, s16
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f af41 	beq.w	8007d42 <_printf_float+0xbe>
 8007ec0:	f04f 0800 	mov.w	r8, #0
 8007ec4:	f104 091a 	add.w	r9, r4, #26
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4543      	cmp	r3, r8
 8007ece:	dc09      	bgt.n	8007ee4 <_printf_float+0x260>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	079b      	lsls	r3, r3, #30
 8007ed4:	f100 8107 	bmi.w	80080e6 <_printf_float+0x462>
 8007ed8:	68e0      	ldr	r0, [r4, #12]
 8007eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007edc:	4298      	cmp	r0, r3
 8007ede:	bfb8      	it	lt
 8007ee0:	4618      	movlt	r0, r3
 8007ee2:	e730      	b.n	8007d46 <_printf_float+0xc2>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af27 	beq.w	8007d42 <_printf_float+0xbe>
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	e7e6      	b.n	8007ec8 <_printf_float+0x244>
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dc39      	bgt.n	8007f74 <_printf_float+0x2f0>
 8007f00:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <_printf_float+0x2ec>)
 8007f02:	2301      	movs	r3, #1
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af19 	beq.w	8007d42 <_printf_float+0xbe>
 8007f10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f14:	4313      	orrs	r3, r2
 8007f16:	d102      	bne.n	8007f1e <_printf_float+0x29a>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	07d9      	lsls	r1, r3, #31
 8007f1c:	d5d8      	bpl.n	8007ed0 <_printf_float+0x24c>
 8007f1e:	ee18 3a10 	vmov	r3, s16
 8007f22:	4652      	mov	r2, sl
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af09 	beq.w	8007d42 <_printf_float+0xbe>
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	f104 0a1a 	add.w	sl, r4, #26
 8007f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3a:	425b      	negs	r3, r3
 8007f3c:	454b      	cmp	r3, r9
 8007f3e:	dc01      	bgt.n	8007f44 <_printf_float+0x2c0>
 8007f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f42:	e792      	b.n	8007e6a <_printf_float+0x1e6>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f aef7 	beq.w	8007d42 <_printf_float+0xbe>
 8007f54:	f109 0901 	add.w	r9, r9, #1
 8007f58:	e7ee      	b.n	8007f38 <_printf_float+0x2b4>
 8007f5a:	bf00      	nop
 8007f5c:	7fefffff 	.word	0x7fefffff
 8007f60:	0800a4f0 	.word	0x0800a4f0
 8007f64:	0800a4f4 	.word	0x0800a4f4
 8007f68:	0800a4f8 	.word	0x0800a4f8
 8007f6c:	0800a4fc 	.word	0x0800a4fc
 8007f70:	0800a500 	.word	0x0800a500
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	bfa8      	it	ge
 8007f7c:	461a      	movge	r2, r3
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	4691      	mov	r9, r2
 8007f82:	dc37      	bgt.n	8007ff4 <_printf_float+0x370>
 8007f84:	f04f 0b00 	mov.w	fp, #0
 8007f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f8c:	f104 021a 	add.w	r2, r4, #26
 8007f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	eba3 0309 	sub.w	r3, r3, r9
 8007f98:	455b      	cmp	r3, fp
 8007f9a:	dc33      	bgt.n	8008004 <_printf_float+0x380>
 8007f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	db3b      	blt.n	800801c <_printf_float+0x398>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	07da      	lsls	r2, r3, #31
 8007fa8:	d438      	bmi.n	800801c <_printf_float+0x398>
 8007faa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fae:	eba2 0903 	sub.w	r9, r2, r3
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	4591      	cmp	r9, r2
 8007fb8:	bfa8      	it	ge
 8007fba:	4691      	movge	r9, r2
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	dc35      	bgt.n	800802e <_printf_float+0x3aa>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fca:	f104 0a1a 	add.w	sl, r4, #26
 8007fce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	eba3 0309 	sub.w	r3, r3, r9
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	f77f af79 	ble.w	8007ed0 <_printf_float+0x24c>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f aeaa 	beq.w	8007d42 <_printf_float+0xbe>
 8007fee:	f108 0801 	add.w	r8, r8, #1
 8007ff2:	e7ec      	b.n	8007fce <_printf_float+0x34a>
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	d1c0      	bne.n	8007f84 <_printf_float+0x300>
 8008002:	e69e      	b.n	8007d42 <_printf_float+0xbe>
 8008004:	2301      	movs	r3, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	9205      	str	r2, [sp, #20]
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f ae97 	beq.w	8007d42 <_printf_float+0xbe>
 8008014:	9a05      	ldr	r2, [sp, #20]
 8008016:	f10b 0b01 	add.w	fp, fp, #1
 800801a:	e7b9      	b.n	8007f90 <_printf_float+0x30c>
 800801c:	ee18 3a10 	vmov	r3, s16
 8008020:	4652      	mov	r2, sl
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d1be      	bne.n	8007faa <_printf_float+0x326>
 800802c:	e689      	b.n	8007d42 <_printf_float+0xbe>
 800802e:	9a05      	ldr	r2, [sp, #20]
 8008030:	464b      	mov	r3, r9
 8008032:	4442      	add	r2, r8
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	d1c1      	bne.n	8007fc2 <_printf_float+0x33e>
 800803e:	e680      	b.n	8007d42 <_printf_float+0xbe>
 8008040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008042:	2a01      	cmp	r2, #1
 8008044:	dc01      	bgt.n	800804a <_printf_float+0x3c6>
 8008046:	07db      	lsls	r3, r3, #31
 8008048:	d53a      	bpl.n	80080c0 <_printf_float+0x43c>
 800804a:	2301      	movs	r3, #1
 800804c:	4642      	mov	r2, r8
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	47b8      	blx	r7
 8008054:	3001      	adds	r0, #1
 8008056:	f43f ae74 	beq.w	8007d42 <_printf_float+0xbe>
 800805a:	ee18 3a10 	vmov	r3, s16
 800805e:	4652      	mov	r2, sl
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae6b 	beq.w	8007d42 <_printf_float+0xbe>
 800806c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008078:	f7f8 fd4e 	bl	8000b18 <__aeabi_dcmpeq>
 800807c:	b9d8      	cbnz	r0, 80080b6 <_printf_float+0x432>
 800807e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008082:	f108 0201 	add.w	r2, r8, #1
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d10e      	bne.n	80080ae <_printf_float+0x42a>
 8008090:	e657      	b.n	8007d42 <_printf_float+0xbe>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f ae50 	beq.w	8007d42 <_printf_float+0xbe>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4543      	cmp	r3, r8
 80080ac:	dcf1      	bgt.n	8008092 <_printf_float+0x40e>
 80080ae:	464b      	mov	r3, r9
 80080b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080b4:	e6da      	b.n	8007e6c <_printf_float+0x1e8>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	f104 0a1a 	add.w	sl, r4, #26
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x422>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4642      	mov	r2, r8
 80080c4:	e7df      	b.n	8008086 <_printf_float+0x402>
 80080c6:	2301      	movs	r3, #1
 80080c8:	464a      	mov	r2, r9
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f ae36 	beq.w	8007d42 <_printf_float+0xbe>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	68e3      	ldr	r3, [r4, #12]
 80080dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080de:	1a5b      	subs	r3, r3, r1
 80080e0:	4543      	cmp	r3, r8
 80080e2:	dcf0      	bgt.n	80080c6 <_printf_float+0x442>
 80080e4:	e6f8      	b.n	8007ed8 <_printf_float+0x254>
 80080e6:	f04f 0800 	mov.w	r8, #0
 80080ea:	f104 0919 	add.w	r9, r4, #25
 80080ee:	e7f4      	b.n	80080da <_printf_float+0x456>

080080f0 <_printf_common>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	4616      	mov	r6, r2
 80080f6:	4699      	mov	r9, r3
 80080f8:	688a      	ldr	r2, [r1, #8]
 80080fa:	690b      	ldr	r3, [r1, #16]
 80080fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008100:	4293      	cmp	r3, r2
 8008102:	bfb8      	it	lt
 8008104:	4613      	movlt	r3, r2
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800810c:	4607      	mov	r7, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b10a      	cbz	r2, 8008116 <_printf_common+0x26>
 8008112:	3301      	adds	r3, #1
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	0699      	lsls	r1, r3, #26
 800811a:	bf42      	ittt	mi
 800811c:	6833      	ldrmi	r3, [r6, #0]
 800811e:	3302      	addmi	r3, #2
 8008120:	6033      	strmi	r3, [r6, #0]
 8008122:	6825      	ldr	r5, [r4, #0]
 8008124:	f015 0506 	ands.w	r5, r5, #6
 8008128:	d106      	bne.n	8008138 <_printf_common+0x48>
 800812a:	f104 0a19 	add.w	sl, r4, #25
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	6832      	ldr	r2, [r6, #0]
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	42ab      	cmp	r3, r5
 8008136:	dc26      	bgt.n	8008186 <_printf_common+0x96>
 8008138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800813c:	1e13      	subs	r3, r2, #0
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	bf18      	it	ne
 8008142:	2301      	movne	r3, #1
 8008144:	0692      	lsls	r2, r2, #26
 8008146:	d42b      	bmi.n	80081a0 <_printf_common+0xb0>
 8008148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800814c:	4649      	mov	r1, r9
 800814e:	4638      	mov	r0, r7
 8008150:	47c0      	blx	r8
 8008152:	3001      	adds	r0, #1
 8008154:	d01e      	beq.n	8008194 <_printf_common+0xa4>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	6922      	ldr	r2, [r4, #16]
 800815a:	f003 0306 	and.w	r3, r3, #6
 800815e:	2b04      	cmp	r3, #4
 8008160:	bf02      	ittt	eq
 8008162:	68e5      	ldreq	r5, [r4, #12]
 8008164:	6833      	ldreq	r3, [r6, #0]
 8008166:	1aed      	subeq	r5, r5, r3
 8008168:	68a3      	ldr	r3, [r4, #8]
 800816a:	bf0c      	ite	eq
 800816c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008170:	2500      	movne	r5, #0
 8008172:	4293      	cmp	r3, r2
 8008174:	bfc4      	itt	gt
 8008176:	1a9b      	subgt	r3, r3, r2
 8008178:	18ed      	addgt	r5, r5, r3
 800817a:	2600      	movs	r6, #0
 800817c:	341a      	adds	r4, #26
 800817e:	42b5      	cmp	r5, r6
 8008180:	d11a      	bne.n	80081b8 <_printf_common+0xc8>
 8008182:	2000      	movs	r0, #0
 8008184:	e008      	b.n	8008198 <_printf_common+0xa8>
 8008186:	2301      	movs	r3, #1
 8008188:	4652      	mov	r2, sl
 800818a:	4649      	mov	r1, r9
 800818c:	4638      	mov	r0, r7
 800818e:	47c0      	blx	r8
 8008190:	3001      	adds	r0, #1
 8008192:	d103      	bne.n	800819c <_printf_common+0xac>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819c:	3501      	adds	r5, #1
 800819e:	e7c6      	b.n	800812e <_printf_common+0x3e>
 80081a0:	18e1      	adds	r1, r4, r3
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	2030      	movs	r0, #48	; 0x30
 80081a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081aa:	4422      	add	r2, r4
 80081ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b4:	3302      	adds	r3, #2
 80081b6:	e7c7      	b.n	8008148 <_printf_common+0x58>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4622      	mov	r2, r4
 80081bc:	4649      	mov	r1, r9
 80081be:	4638      	mov	r0, r7
 80081c0:	47c0      	blx	r8
 80081c2:	3001      	adds	r0, #1
 80081c4:	d0e6      	beq.n	8008194 <_printf_common+0xa4>
 80081c6:	3601      	adds	r6, #1
 80081c8:	e7d9      	b.n	800817e <_printf_common+0x8e>
	...

080081cc <_printf_i>:
 80081cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d0:	7e0f      	ldrb	r7, [r1, #24]
 80081d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081d4:	2f78      	cmp	r7, #120	; 0x78
 80081d6:	4691      	mov	r9, r2
 80081d8:	4680      	mov	r8, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	469a      	mov	sl, r3
 80081de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081e2:	d807      	bhi.n	80081f4 <_printf_i+0x28>
 80081e4:	2f62      	cmp	r7, #98	; 0x62
 80081e6:	d80a      	bhi.n	80081fe <_printf_i+0x32>
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	f000 80d4 	beq.w	8008396 <_printf_i+0x1ca>
 80081ee:	2f58      	cmp	r7, #88	; 0x58
 80081f0:	f000 80c0 	beq.w	8008374 <_printf_i+0x1a8>
 80081f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081fc:	e03a      	b.n	8008274 <_printf_i+0xa8>
 80081fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008202:	2b15      	cmp	r3, #21
 8008204:	d8f6      	bhi.n	80081f4 <_printf_i+0x28>
 8008206:	a101      	add	r1, pc, #4	; (adr r1, 800820c <_printf_i+0x40>)
 8008208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800820c:	08008265 	.word	0x08008265
 8008210:	08008279 	.word	0x08008279
 8008214:	080081f5 	.word	0x080081f5
 8008218:	080081f5 	.word	0x080081f5
 800821c:	080081f5 	.word	0x080081f5
 8008220:	080081f5 	.word	0x080081f5
 8008224:	08008279 	.word	0x08008279
 8008228:	080081f5 	.word	0x080081f5
 800822c:	080081f5 	.word	0x080081f5
 8008230:	080081f5 	.word	0x080081f5
 8008234:	080081f5 	.word	0x080081f5
 8008238:	0800837d 	.word	0x0800837d
 800823c:	080082a5 	.word	0x080082a5
 8008240:	08008337 	.word	0x08008337
 8008244:	080081f5 	.word	0x080081f5
 8008248:	080081f5 	.word	0x080081f5
 800824c:	0800839f 	.word	0x0800839f
 8008250:	080081f5 	.word	0x080081f5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080081f5 	.word	0x080081f5
 800825c:	080081f5 	.word	0x080081f5
 8008260:	0800833f 	.word	0x0800833f
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008274:	2301      	movs	r3, #1
 8008276:	e09f      	b.n	80083b8 <_printf_i+0x1ec>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	0607      	lsls	r7, r0, #24
 800827e:	f103 0104 	add.w	r1, r3, #4
 8008282:	6029      	str	r1, [r5, #0]
 8008284:	d501      	bpl.n	800828a <_printf_i+0xbe>
 8008286:	681e      	ldr	r6, [r3, #0]
 8008288:	e003      	b.n	8008292 <_printf_i+0xc6>
 800828a:	0646      	lsls	r6, r0, #25
 800828c:	d5fb      	bpl.n	8008286 <_printf_i+0xba>
 800828e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008292:	2e00      	cmp	r6, #0
 8008294:	da03      	bge.n	800829e <_printf_i+0xd2>
 8008296:	232d      	movs	r3, #45	; 0x2d
 8008298:	4276      	negs	r6, r6
 800829a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829e:	485a      	ldr	r0, [pc, #360]	; (8008408 <_printf_i+0x23c>)
 80082a0:	230a      	movs	r3, #10
 80082a2:	e012      	b.n	80082ca <_printf_i+0xfe>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	1d19      	adds	r1, r3, #4
 80082aa:	6029      	str	r1, [r5, #0]
 80082ac:	0605      	lsls	r5, r0, #24
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0xe8>
 80082b0:	681e      	ldr	r6, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0xee>
 80082b4:	0641      	lsls	r1, r0, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0xe4>
 80082b8:	881e      	ldrh	r6, [r3, #0]
 80082ba:	4853      	ldr	r0, [pc, #332]	; (8008408 <_printf_i+0x23c>)
 80082bc:	2f6f      	cmp	r7, #111	; 0x6f
 80082be:	bf0c      	ite	eq
 80082c0:	2308      	moveq	r3, #8
 80082c2:	230a      	movne	r3, #10
 80082c4:	2100      	movs	r1, #0
 80082c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ca:	6865      	ldr	r5, [r4, #4]
 80082cc:	60a5      	str	r5, [r4, #8]
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	bfa2      	ittt	ge
 80082d2:	6821      	ldrge	r1, [r4, #0]
 80082d4:	f021 0104 	bicge.w	r1, r1, #4
 80082d8:	6021      	strge	r1, [r4, #0]
 80082da:	b90e      	cbnz	r6, 80082e0 <_printf_i+0x114>
 80082dc:	2d00      	cmp	r5, #0
 80082de:	d04b      	beq.n	8008378 <_printf_i+0x1ac>
 80082e0:	4615      	mov	r5, r2
 80082e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80082e6:	fb03 6711 	mls	r7, r3, r1, r6
 80082ea:	5dc7      	ldrb	r7, [r0, r7]
 80082ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082f0:	4637      	mov	r7, r6
 80082f2:	42bb      	cmp	r3, r7
 80082f4:	460e      	mov	r6, r1
 80082f6:	d9f4      	bls.n	80082e2 <_printf_i+0x116>
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d10b      	bne.n	8008314 <_printf_i+0x148>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	07de      	lsls	r6, r3, #31
 8008300:	d508      	bpl.n	8008314 <_printf_i+0x148>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6861      	ldr	r1, [r4, #4]
 8008306:	4299      	cmp	r1, r3
 8008308:	bfde      	ittt	le
 800830a:	2330      	movle	r3, #48	; 0x30
 800830c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008314:	1b52      	subs	r2, r2, r5
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	f8cd a000 	str.w	sl, [sp]
 800831c:	464b      	mov	r3, r9
 800831e:	aa03      	add	r2, sp, #12
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff fee4 	bl	80080f0 <_printf_common>
 8008328:	3001      	adds	r0, #1
 800832a:	d14a      	bne.n	80083c2 <_printf_i+0x1f6>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	b004      	add	sp, #16
 8008332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	4833      	ldr	r0, [pc, #204]	; (800840c <_printf_i+0x240>)
 8008340:	2778      	movs	r7, #120	; 0x78
 8008342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	6829      	ldr	r1, [r5, #0]
 800834a:	061f      	lsls	r7, r3, #24
 800834c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008350:	d402      	bmi.n	8008358 <_printf_i+0x18c>
 8008352:	065f      	lsls	r7, r3, #25
 8008354:	bf48      	it	mi
 8008356:	b2b6      	uxthmi	r6, r6
 8008358:	07df      	lsls	r7, r3, #31
 800835a:	bf48      	it	mi
 800835c:	f043 0320 	orrmi.w	r3, r3, #32
 8008360:	6029      	str	r1, [r5, #0]
 8008362:	bf48      	it	mi
 8008364:	6023      	strmi	r3, [r4, #0]
 8008366:	b91e      	cbnz	r6, 8008370 <_printf_i+0x1a4>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	f023 0320 	bic.w	r3, r3, #32
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	2310      	movs	r3, #16
 8008372:	e7a7      	b.n	80082c4 <_printf_i+0xf8>
 8008374:	4824      	ldr	r0, [pc, #144]	; (8008408 <_printf_i+0x23c>)
 8008376:	e7e4      	b.n	8008342 <_printf_i+0x176>
 8008378:	4615      	mov	r5, r2
 800837a:	e7bd      	b.n	80082f8 <_printf_i+0x12c>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	6826      	ldr	r6, [r4, #0]
 8008380:	6961      	ldr	r1, [r4, #20]
 8008382:	1d18      	adds	r0, r3, #4
 8008384:	6028      	str	r0, [r5, #0]
 8008386:	0635      	lsls	r5, r6, #24
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	d501      	bpl.n	8008390 <_printf_i+0x1c4>
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0x1ca>
 8008390:	0670      	lsls	r0, r6, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0x1c0>
 8008394:	8019      	strh	r1, [r3, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	4615      	mov	r5, r2
 800839c:	e7bc      	b.n	8008318 <_printf_i+0x14c>
 800839e:	682b      	ldr	r3, [r5, #0]
 80083a0:	1d1a      	adds	r2, r3, #4
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	6862      	ldr	r2, [r4, #4]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7f7 ff38 	bl	8000220 <memchr>
 80083b0:	b108      	cbz	r0, 80083b6 <_printf_i+0x1ea>
 80083b2:	1b40      	subs	r0, r0, r5
 80083b4:	6060      	str	r0, [r4, #4]
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	2300      	movs	r3, #0
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c0:	e7aa      	b.n	8008318 <_printf_i+0x14c>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	462a      	mov	r2, r5
 80083c6:	4649      	mov	r1, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	47d0      	blx	sl
 80083cc:	3001      	adds	r0, #1
 80083ce:	d0ad      	beq.n	800832c <_printf_i+0x160>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	079b      	lsls	r3, r3, #30
 80083d4:	d413      	bmi.n	80083fe <_printf_i+0x232>
 80083d6:	68e0      	ldr	r0, [r4, #12]
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	4298      	cmp	r0, r3
 80083dc:	bfb8      	it	lt
 80083de:	4618      	movlt	r0, r3
 80083e0:	e7a6      	b.n	8008330 <_printf_i+0x164>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4632      	mov	r2, r6
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d09d      	beq.n	800832c <_printf_i+0x160>
 80083f0:	3501      	adds	r5, #1
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	9903      	ldr	r1, [sp, #12]
 80083f6:	1a5b      	subs	r3, r3, r1
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dcf2      	bgt.n	80083e2 <_printf_i+0x216>
 80083fc:	e7eb      	b.n	80083d6 <_printf_i+0x20a>
 80083fe:	2500      	movs	r5, #0
 8008400:	f104 0619 	add.w	r6, r4, #25
 8008404:	e7f5      	b.n	80083f2 <_printf_i+0x226>
 8008406:	bf00      	nop
 8008408:	0800a502 	.word	0x0800a502
 800840c:	0800a513 	.word	0x0800a513

08008410 <std>:
 8008410:	2300      	movs	r3, #0
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	e9c0 3300 	strd	r3, r3, [r0]
 800841a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800841e:	6083      	str	r3, [r0, #8]
 8008420:	8181      	strh	r1, [r0, #12]
 8008422:	6643      	str	r3, [r0, #100]	; 0x64
 8008424:	81c2      	strh	r2, [r0, #14]
 8008426:	6183      	str	r3, [r0, #24]
 8008428:	4619      	mov	r1, r3
 800842a:	2208      	movs	r2, #8
 800842c:	305c      	adds	r0, #92	; 0x5c
 800842e:	f000 f8e2 	bl	80085f6 <memset>
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <std+0x38>)
 8008434:	6263      	str	r3, [r4, #36]	; 0x24
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x3c>)
 8008438:	62a3      	str	r3, [r4, #40]	; 0x28
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <std+0x40>)
 800843c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <std+0x44>)
 8008440:	6224      	str	r4, [r4, #32]
 8008442:	6323      	str	r3, [r4, #48]	; 0x30
 8008444:	bd10      	pop	{r4, pc}
 8008446:	bf00      	nop
 8008448:	08008571 	.word	0x08008571
 800844c:	08008593 	.word	0x08008593
 8008450:	080085cb 	.word	0x080085cb
 8008454:	080085ef 	.word	0x080085ef

08008458 <stdio_exit_handler>:
 8008458:	4a02      	ldr	r2, [pc, #8]	; (8008464 <stdio_exit_handler+0xc>)
 800845a:	4903      	ldr	r1, [pc, #12]	; (8008468 <stdio_exit_handler+0x10>)
 800845c:	4803      	ldr	r0, [pc, #12]	; (800846c <stdio_exit_handler+0x14>)
 800845e:	f000 b869 	b.w	8008534 <_fwalk_sglue>
 8008462:	bf00      	nop
 8008464:	20000010 	.word	0x20000010
 8008468:	08009df1 	.word	0x08009df1
 800846c:	2000001c 	.word	0x2000001c

08008470 <cleanup_stdio>:
 8008470:	6841      	ldr	r1, [r0, #4]
 8008472:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <cleanup_stdio+0x34>)
 8008474:	4299      	cmp	r1, r3
 8008476:	b510      	push	{r4, lr}
 8008478:	4604      	mov	r4, r0
 800847a:	d001      	beq.n	8008480 <cleanup_stdio+0x10>
 800847c:	f001 fcb8 	bl	8009df0 <_fflush_r>
 8008480:	68a1      	ldr	r1, [r4, #8]
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <cleanup_stdio+0x38>)
 8008484:	4299      	cmp	r1, r3
 8008486:	d002      	beq.n	800848e <cleanup_stdio+0x1e>
 8008488:	4620      	mov	r0, r4
 800848a:	f001 fcb1 	bl	8009df0 <_fflush_r>
 800848e:	68e1      	ldr	r1, [r4, #12]
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <cleanup_stdio+0x3c>)
 8008492:	4299      	cmp	r1, r3
 8008494:	d004      	beq.n	80084a0 <cleanup_stdio+0x30>
 8008496:	4620      	mov	r0, r4
 8008498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849c:	f001 bca8 	b.w	8009df0 <_fflush_r>
 80084a0:	bd10      	pop	{r4, pc}
 80084a2:	bf00      	nop
 80084a4:	200005ac 	.word	0x200005ac
 80084a8:	20000614 	.word	0x20000614
 80084ac:	2000067c 	.word	0x2000067c

080084b0 <global_stdio_init.part.0>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <global_stdio_init.part.0+0x30>)
 80084b4:	4c0b      	ldr	r4, [pc, #44]	; (80084e4 <global_stdio_init.part.0+0x34>)
 80084b6:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <global_stdio_init.part.0+0x38>)
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	4620      	mov	r0, r4
 80084bc:	2200      	movs	r2, #0
 80084be:	2104      	movs	r1, #4
 80084c0:	f7ff ffa6 	bl	8008410 <std>
 80084c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084c8:	2201      	movs	r2, #1
 80084ca:	2109      	movs	r1, #9
 80084cc:	f7ff ffa0 	bl	8008410 <std>
 80084d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084d4:	2202      	movs	r2, #2
 80084d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084da:	2112      	movs	r1, #18
 80084dc:	f7ff bf98 	b.w	8008410 <std>
 80084e0:	200006e4 	.word	0x200006e4
 80084e4:	200005ac 	.word	0x200005ac
 80084e8:	08008459 	.word	0x08008459

080084ec <__sfp_lock_acquire>:
 80084ec:	4801      	ldr	r0, [pc, #4]	; (80084f4 <__sfp_lock_acquire+0x8>)
 80084ee:	f000 b8ff 	b.w	80086f0 <__retarget_lock_acquire_recursive>
 80084f2:	bf00      	nop
 80084f4:	200006ed 	.word	0x200006ed

080084f8 <__sfp_lock_release>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__sfp_lock_release+0x8>)
 80084fa:	f000 b8fa 	b.w	80086f2 <__retarget_lock_release_recursive>
 80084fe:	bf00      	nop
 8008500:	200006ed 	.word	0x200006ed

08008504 <__sinit>:
 8008504:	b510      	push	{r4, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	f7ff fff0 	bl	80084ec <__sfp_lock_acquire>
 800850c:	6a23      	ldr	r3, [r4, #32]
 800850e:	b11b      	cbz	r3, 8008518 <__sinit+0x14>
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f7ff bff0 	b.w	80084f8 <__sfp_lock_release>
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <__sinit+0x28>)
 800851a:	6223      	str	r3, [r4, #32]
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <__sinit+0x2c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f5      	bne.n	8008510 <__sinit+0xc>
 8008524:	f7ff ffc4 	bl	80084b0 <global_stdio_init.part.0>
 8008528:	e7f2      	b.n	8008510 <__sinit+0xc>
 800852a:	bf00      	nop
 800852c:	08008471 	.word	0x08008471
 8008530:	200006e4 	.word	0x200006e4

08008534 <_fwalk_sglue>:
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008538:	4607      	mov	r7, r0
 800853a:	4688      	mov	r8, r1
 800853c:	4614      	mov	r4, r2
 800853e:	2600      	movs	r6, #0
 8008540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008544:	f1b9 0901 	subs.w	r9, r9, #1
 8008548:	d505      	bpl.n	8008556 <_fwalk_sglue+0x22>
 800854a:	6824      	ldr	r4, [r4, #0]
 800854c:	2c00      	cmp	r4, #0
 800854e:	d1f7      	bne.n	8008540 <_fwalk_sglue+0xc>
 8008550:	4630      	mov	r0, r6
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d907      	bls.n	800856c <_fwalk_sglue+0x38>
 800855c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008560:	3301      	adds	r3, #1
 8008562:	d003      	beq.n	800856c <_fwalk_sglue+0x38>
 8008564:	4629      	mov	r1, r5
 8008566:	4638      	mov	r0, r7
 8008568:	47c0      	blx	r8
 800856a:	4306      	orrs	r6, r0
 800856c:	3568      	adds	r5, #104	; 0x68
 800856e:	e7e9      	b.n	8008544 <_fwalk_sglue+0x10>

08008570 <__sread>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	f000 f86c 	bl	8008654 <_read_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	bfab      	itete	ge
 8008580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008582:	89a3      	ldrhlt	r3, [r4, #12]
 8008584:	181b      	addge	r3, r3, r0
 8008586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800858a:	bfac      	ite	ge
 800858c:	6563      	strge	r3, [r4, #84]	; 0x54
 800858e:	81a3      	strhlt	r3, [r4, #12]
 8008590:	bd10      	pop	{r4, pc}

08008592 <__swrite>:
 8008592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	461f      	mov	r7, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	05db      	lsls	r3, r3, #23
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d505      	bpl.n	80085b0 <__swrite+0x1e>
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2302      	movs	r3, #2
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f840 	bl	8008630 <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	f000 b857 	b.w	8008678 <_write_r>

080085ca <__sseek>:
 80085ca:	b510      	push	{r4, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 f82d 	bl	8008630 <_lseek_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	bf15      	itete	ne
 80085dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strheq	r3, [r4, #12]
 80085e8:	bf18      	it	ne
 80085ea:	81a3      	strhne	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__sclose>:
 80085ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f2:	f000 b80d 	b.w	8008610 <_close_r>

080085f6 <memset>:
 80085f6:	4402      	add	r2, r0
 80085f8:	4603      	mov	r3, r0
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d100      	bne.n	8008600 <memset+0xa>
 80085fe:	4770      	bx	lr
 8008600:	f803 1b01 	strb.w	r1, [r3], #1
 8008604:	e7f9      	b.n	80085fa <memset+0x4>
	...

08008608 <_localeconv_r>:
 8008608:	4800      	ldr	r0, [pc, #0]	; (800860c <_localeconv_r+0x4>)
 800860a:	4770      	bx	lr
 800860c:	2000015c 	.word	0x2000015c

08008610 <_close_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d06      	ldr	r5, [pc, #24]	; (800862c <_close_r+0x1c>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7f9 fdbb 	bl	8002196 <_close>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_close_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_close_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	200006e8 	.word	0x200006e8

08008630 <_lseek_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	; (8008650 <_lseek_r+0x20>)
 8008634:	4604      	mov	r4, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f9 fdd0 	bl	80021e4 <_lseek>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_lseek_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_lseek_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200006e8 	.word	0x200006e8

08008654 <_read_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	; (8008674 <_read_r+0x20>)
 8008658:	4604      	mov	r4, r0
 800865a:	4608      	mov	r0, r1
 800865c:	4611      	mov	r1, r2
 800865e:	2200      	movs	r2, #0
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f7f9 fd5e 	bl	8002124 <_read>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_read_r+0x1e>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_read_r+0x1e>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	200006e8 	.word	0x200006e8

08008678 <_write_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d07      	ldr	r5, [pc, #28]	; (8008698 <_write_r+0x20>)
 800867c:	4604      	mov	r4, r0
 800867e:	4608      	mov	r0, r1
 8008680:	4611      	mov	r1, r2
 8008682:	2200      	movs	r2, #0
 8008684:	602a      	str	r2, [r5, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	f7f9 fd69 	bl	800215e <_write>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_write_r+0x1e>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_write_r+0x1e>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	200006e8 	.word	0x200006e8

0800869c <__errno>:
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <__errno+0x8>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000068 	.word	0x20000068

080086a8 <__libc_init_array>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4d0d      	ldr	r5, [pc, #52]	; (80086e0 <__libc_init_array+0x38>)
 80086ac:	4c0d      	ldr	r4, [pc, #52]	; (80086e4 <__libc_init_array+0x3c>)
 80086ae:	1b64      	subs	r4, r4, r5
 80086b0:	10a4      	asrs	r4, r4, #2
 80086b2:	2600      	movs	r6, #0
 80086b4:	42a6      	cmp	r6, r4
 80086b6:	d109      	bne.n	80086cc <__libc_init_array+0x24>
 80086b8:	4d0b      	ldr	r5, [pc, #44]	; (80086e8 <__libc_init_array+0x40>)
 80086ba:	4c0c      	ldr	r4, [pc, #48]	; (80086ec <__libc_init_array+0x44>)
 80086bc:	f001 feec 	bl	800a498 <_init>
 80086c0:	1b64      	subs	r4, r4, r5
 80086c2:	10a4      	asrs	r4, r4, #2
 80086c4:	2600      	movs	r6, #0
 80086c6:	42a6      	cmp	r6, r4
 80086c8:	d105      	bne.n	80086d6 <__libc_init_array+0x2e>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d0:	4798      	blx	r3
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7ee      	b.n	80086b4 <__libc_init_array+0xc>
 80086d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086da:	4798      	blx	r3
 80086dc:	3601      	adds	r6, #1
 80086de:	e7f2      	b.n	80086c6 <__libc_init_array+0x1e>
 80086e0:	0800a86c 	.word	0x0800a86c
 80086e4:	0800a86c 	.word	0x0800a86c
 80086e8:	0800a86c 	.word	0x0800a86c
 80086ec:	0800a870 	.word	0x0800a870

080086f0 <__retarget_lock_acquire_recursive>:
 80086f0:	4770      	bx	lr

080086f2 <__retarget_lock_release_recursive>:
 80086f2:	4770      	bx	lr

080086f4 <quorem>:
 80086f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	6903      	ldr	r3, [r0, #16]
 80086fa:	690c      	ldr	r4, [r1, #16]
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	4607      	mov	r7, r0
 8008700:	db7e      	blt.n	8008800 <quorem+0x10c>
 8008702:	3c01      	subs	r4, #1
 8008704:	f101 0814 	add.w	r8, r1, #20
 8008708:	f100 0514 	add.w	r5, r0, #20
 800870c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800871a:	3301      	adds	r3, #1
 800871c:	429a      	cmp	r2, r3
 800871e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008722:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008726:	fbb2 f6f3 	udiv	r6, r2, r3
 800872a:	d331      	bcc.n	8008790 <quorem+0x9c>
 800872c:	f04f 0e00 	mov.w	lr, #0
 8008730:	4640      	mov	r0, r8
 8008732:	46ac      	mov	ip, r5
 8008734:	46f2      	mov	sl, lr
 8008736:	f850 2b04 	ldr.w	r2, [r0], #4
 800873a:	b293      	uxth	r3, r2
 800873c:	fb06 e303 	mla	r3, r6, r3, lr
 8008740:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008744:	0c1a      	lsrs	r2, r3, #16
 8008746:	b29b      	uxth	r3, r3
 8008748:	ebaa 0303 	sub.w	r3, sl, r3
 800874c:	f8dc a000 	ldr.w	sl, [ip]
 8008750:	fa13 f38a 	uxtah	r3, r3, sl
 8008754:	fb06 220e 	mla	r2, r6, lr, r2
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008760:	b292      	uxth	r2, r2
 8008762:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800876a:	f8bd 3000 	ldrh.w	r3, [sp]
 800876e:	4581      	cmp	r9, r0
 8008770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008774:	f84c 3b04 	str.w	r3, [ip], #4
 8008778:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800877c:	d2db      	bcs.n	8008736 <quorem+0x42>
 800877e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008782:	b92b      	cbnz	r3, 8008790 <quorem+0x9c>
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	3b04      	subs	r3, #4
 8008788:	429d      	cmp	r5, r3
 800878a:	461a      	mov	r2, r3
 800878c:	d32c      	bcc.n	80087e8 <quorem+0xf4>
 800878e:	613c      	str	r4, [r7, #16]
 8008790:	4638      	mov	r0, r7
 8008792:	f001 f9a7 	bl	8009ae4 <__mcmp>
 8008796:	2800      	cmp	r0, #0
 8008798:	db22      	blt.n	80087e0 <quorem+0xec>
 800879a:	3601      	adds	r6, #1
 800879c:	4629      	mov	r1, r5
 800879e:	2000      	movs	r0, #0
 80087a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80087a4:	f8d1 c000 	ldr.w	ip, [r1]
 80087a8:	b293      	uxth	r3, r2
 80087aa:	1ac3      	subs	r3, r0, r3
 80087ac:	0c12      	lsrs	r2, r2, #16
 80087ae:	fa13 f38c 	uxtah	r3, r3, ip
 80087b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80087b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c0:	45c1      	cmp	r9, r8
 80087c2:	f841 3b04 	str.w	r3, [r1], #4
 80087c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087ca:	d2e9      	bcs.n	80087a0 <quorem+0xac>
 80087cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d4:	b922      	cbnz	r2, 80087e0 <quorem+0xec>
 80087d6:	3b04      	subs	r3, #4
 80087d8:	429d      	cmp	r5, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	d30a      	bcc.n	80087f4 <quorem+0x100>
 80087de:	613c      	str	r4, [r7, #16]
 80087e0:	4630      	mov	r0, r6
 80087e2:	b003      	add	sp, #12
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1ce      	bne.n	800878e <quorem+0x9a>
 80087f0:	3c01      	subs	r4, #1
 80087f2:	e7c9      	b.n	8008788 <quorem+0x94>
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	3b04      	subs	r3, #4
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d1f0      	bne.n	80087de <quorem+0xea>
 80087fc:	3c01      	subs	r4, #1
 80087fe:	e7eb      	b.n	80087d8 <quorem+0xe4>
 8008800:	2000      	movs	r0, #0
 8008802:	e7ee      	b.n	80087e2 <quorem+0xee>
 8008804:	0000      	movs	r0, r0
	...

08008808 <_dtoa_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	ed2d 8b04 	vpush	{d8-d9}
 8008810:	69c5      	ldr	r5, [r0, #28]
 8008812:	b093      	sub	sp, #76	; 0x4c
 8008814:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008820:	9107      	str	r1, [sp, #28]
 8008822:	4604      	mov	r4, r0
 8008824:	920a      	str	r2, [sp, #40]	; 0x28
 8008826:	930d      	str	r3, [sp, #52]	; 0x34
 8008828:	b975      	cbnz	r5, 8008848 <_dtoa_r+0x40>
 800882a:	2010      	movs	r0, #16
 800882c:	f000 fe2a 	bl	8009484 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	61e0      	str	r0, [r4, #28]
 8008834:	b920      	cbnz	r0, 8008840 <_dtoa_r+0x38>
 8008836:	4bae      	ldr	r3, [pc, #696]	; (8008af0 <_dtoa_r+0x2e8>)
 8008838:	21ef      	movs	r1, #239	; 0xef
 800883a:	48ae      	ldr	r0, [pc, #696]	; (8008af4 <_dtoa_r+0x2ec>)
 800883c:	f001 fb1e 	bl	8009e7c <__assert_func>
 8008840:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008844:	6005      	str	r5, [r0, #0]
 8008846:	60c5      	str	r5, [r0, #12]
 8008848:	69e3      	ldr	r3, [r4, #28]
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	b151      	cbz	r1, 8008864 <_dtoa_r+0x5c>
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	604a      	str	r2, [r1, #4]
 8008852:	2301      	movs	r3, #1
 8008854:	4093      	lsls	r3, r2
 8008856:	608b      	str	r3, [r1, #8]
 8008858:	4620      	mov	r0, r4
 800885a:	f000 ff07 	bl	800966c <_Bfree>
 800885e:	69e3      	ldr	r3, [r4, #28]
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	1e3b      	subs	r3, r7, #0
 8008866:	bfbb      	ittet	lt
 8008868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800886c:	9303      	strlt	r3, [sp, #12]
 800886e:	2300      	movge	r3, #0
 8008870:	2201      	movlt	r2, #1
 8008872:	bfac      	ite	ge
 8008874:	f8c8 3000 	strge.w	r3, [r8]
 8008878:	f8c8 2000 	strlt.w	r2, [r8]
 800887c:	4b9e      	ldr	r3, [pc, #632]	; (8008af8 <_dtoa_r+0x2f0>)
 800887e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008882:	ea33 0308 	bics.w	r3, r3, r8
 8008886:	d11b      	bne.n	80088c0 <_dtoa_r+0xb8>
 8008888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800888a:	f242 730f 	movw	r3, #9999	; 0x270f
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008894:	4333      	orrs	r3, r6
 8008896:	f000 8593 	beq.w	80093c0 <_dtoa_r+0xbb8>
 800889a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800889c:	b963      	cbnz	r3, 80088b8 <_dtoa_r+0xb0>
 800889e:	4b97      	ldr	r3, [pc, #604]	; (8008afc <_dtoa_r+0x2f4>)
 80088a0:	e027      	b.n	80088f2 <_dtoa_r+0xea>
 80088a2:	4b97      	ldr	r3, [pc, #604]	; (8008b00 <_dtoa_r+0x2f8>)
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	9800      	ldr	r0, [sp, #0]
 80088ae:	b013      	add	sp, #76	; 0x4c
 80088b0:	ecbd 8b04 	vpop	{d8-d9}
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	4b90      	ldr	r3, [pc, #576]	; (8008afc <_dtoa_r+0x2f4>)
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	3303      	adds	r3, #3
 80088be:	e7f3      	b.n	80088a8 <_dtoa_r+0xa0>
 80088c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088c4:	2200      	movs	r2, #0
 80088c6:	ec51 0b17 	vmov	r0, r1, d7
 80088ca:	eeb0 8a47 	vmov.f32	s16, s14
 80088ce:	eef0 8a67 	vmov.f32	s17, s15
 80088d2:	2300      	movs	r3, #0
 80088d4:	f7f8 f920 	bl	8000b18 <__aeabi_dcmpeq>
 80088d8:	4681      	mov	r9, r0
 80088da:	b160      	cbz	r0, 80088f6 <_dtoa_r+0xee>
 80088dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088de:	2301      	movs	r3, #1
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8568 	beq.w	80093ba <_dtoa_r+0xbb2>
 80088ea:	4b86      	ldr	r3, [pc, #536]	; (8008b04 <_dtoa_r+0x2fc>)
 80088ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	e7da      	b.n	80088ac <_dtoa_r+0xa4>
 80088f6:	aa10      	add	r2, sp, #64	; 0x40
 80088f8:	a911      	add	r1, sp, #68	; 0x44
 80088fa:	4620      	mov	r0, r4
 80088fc:	eeb0 0a48 	vmov.f32	s0, s16
 8008900:	eef0 0a68 	vmov.f32	s1, s17
 8008904:	f001 f994 	bl	8009c30 <__d2b>
 8008908:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800890c:	4682      	mov	sl, r0
 800890e:	2d00      	cmp	r5, #0
 8008910:	d07f      	beq.n	8008a12 <_dtoa_r+0x20a>
 8008912:	ee18 3a90 	vmov	r3, s17
 8008916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800891a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800891e:	ec51 0b18 	vmov	r0, r1, d8
 8008922:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800892a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800892e:	4619      	mov	r1, r3
 8008930:	2200      	movs	r2, #0
 8008932:	4b75      	ldr	r3, [pc, #468]	; (8008b08 <_dtoa_r+0x300>)
 8008934:	f7f7 fcd0 	bl	80002d8 <__aeabi_dsub>
 8008938:	a367      	add	r3, pc, #412	; (adr r3, 8008ad8 <_dtoa_r+0x2d0>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fe83 	bl	8000648 <__aeabi_dmul>
 8008942:	a367      	add	r3, pc, #412	; (adr r3, 8008ae0 <_dtoa_r+0x2d8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fcc8 	bl	80002dc <__adddf3>
 800894c:	4606      	mov	r6, r0
 800894e:	4628      	mov	r0, r5
 8008950:	460f      	mov	r7, r1
 8008952:	f7f7 fe0f 	bl	8000574 <__aeabi_i2d>
 8008956:	a364      	add	r3, pc, #400	; (adr r3, 8008ae8 <_dtoa_r+0x2e0>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fe74 	bl	8000648 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f7 fcb8 	bl	80002dc <__adddf3>
 800896c:	4606      	mov	r6, r0
 800896e:	460f      	mov	r7, r1
 8008970:	f7f8 f91a 	bl	8000ba8 <__aeabi_d2iz>
 8008974:	2200      	movs	r2, #0
 8008976:	4683      	mov	fp, r0
 8008978:	2300      	movs	r3, #0
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	f7f8 f8d5 	bl	8000b2c <__aeabi_dcmplt>
 8008982:	b148      	cbz	r0, 8008998 <_dtoa_r+0x190>
 8008984:	4658      	mov	r0, fp
 8008986:	f7f7 fdf5 	bl	8000574 <__aeabi_i2d>
 800898a:	4632      	mov	r2, r6
 800898c:	463b      	mov	r3, r7
 800898e:	f7f8 f8c3 	bl	8000b18 <__aeabi_dcmpeq>
 8008992:	b908      	cbnz	r0, 8008998 <_dtoa_r+0x190>
 8008994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008998:	f1bb 0f16 	cmp.w	fp, #22
 800899c:	d857      	bhi.n	8008a4e <_dtoa_r+0x246>
 800899e:	4b5b      	ldr	r3, [pc, #364]	; (8008b0c <_dtoa_r+0x304>)
 80089a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	ec51 0b18 	vmov	r0, r1, d8
 80089ac:	f7f8 f8be 	bl	8000b2c <__aeabi_dcmplt>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d04e      	beq.n	8008a52 <_dtoa_r+0x24a>
 80089b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089b8:	2300      	movs	r3, #0
 80089ba:	930c      	str	r3, [sp, #48]	; 0x30
 80089bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089be:	1b5b      	subs	r3, r3, r5
 80089c0:	1e5a      	subs	r2, r3, #1
 80089c2:	bf45      	ittet	mi
 80089c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80089c8:	9305      	strmi	r3, [sp, #20]
 80089ca:	2300      	movpl	r3, #0
 80089cc:	2300      	movmi	r3, #0
 80089ce:	9206      	str	r2, [sp, #24]
 80089d0:	bf54      	ite	pl
 80089d2:	9305      	strpl	r3, [sp, #20]
 80089d4:	9306      	strmi	r3, [sp, #24]
 80089d6:	f1bb 0f00 	cmp.w	fp, #0
 80089da:	db3c      	blt.n	8008a56 <_dtoa_r+0x24e>
 80089dc:	9b06      	ldr	r3, [sp, #24]
 80089de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089e2:	445b      	add	r3, fp
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	2300      	movs	r3, #0
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	9b07      	ldr	r3, [sp, #28]
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d868      	bhi.n	8008ac2 <_dtoa_r+0x2ba>
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	bfc4      	itt	gt
 80089f4:	3b04      	subgt	r3, #4
 80089f6:	9307      	strgt	r3, [sp, #28]
 80089f8:	9b07      	ldr	r3, [sp, #28]
 80089fa:	f1a3 0302 	sub.w	r3, r3, #2
 80089fe:	bfcc      	ite	gt
 8008a00:	2500      	movgt	r5, #0
 8008a02:	2501      	movle	r5, #1
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	f200 8085 	bhi.w	8008b14 <_dtoa_r+0x30c>
 8008a0a:	e8df f003 	tbb	[pc, r3]
 8008a0e:	3b2e      	.short	0x3b2e
 8008a10:	5839      	.short	0x5839
 8008a12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a16:	441d      	add	r5, r3
 8008a18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	bfc1      	itttt	gt
 8008a20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a24:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008a2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008a30:	bfd6      	itet	le
 8008a32:	f1c3 0320 	rsble	r3, r3, #32
 8008a36:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a3a:	fa06 f003 	lslle.w	r0, r6, r3
 8008a3e:	f7f7 fd89 	bl	8000554 <__aeabi_ui2d>
 8008a42:	2201      	movs	r2, #1
 8008a44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a48:	3d01      	subs	r5, #1
 8008a4a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a4c:	e76f      	b.n	800892e <_dtoa_r+0x126>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7b3      	b.n	80089ba <_dtoa_r+0x1b2>
 8008a52:	900c      	str	r0, [sp, #48]	; 0x30
 8008a54:	e7b2      	b.n	80089bc <_dtoa_r+0x1b4>
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	eba3 030b 	sub.w	r3, r3, fp
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	f1cb 0300 	rsb	r3, fp, #0
 8008a62:	9308      	str	r3, [sp, #32]
 8008a64:	2300      	movs	r3, #0
 8008a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a68:	e7bf      	b.n	80089ea <_dtoa_r+0x1e2>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc52      	bgt.n	8008b1a <_dtoa_r+0x312>
 8008a74:	2301      	movs	r3, #1
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a7e:	e00b      	b.n	8008a98 <_dtoa_r+0x290>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7f3      	b.n	8008a6c <_dtoa_r+0x264>
 8008a84:	2300      	movs	r3, #0
 8008a86:	9309      	str	r3, [sp, #36]	; 0x24
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	445b      	add	r3, fp
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	bfb8      	it	lt
 8008a96:	2301      	movlt	r3, #1
 8008a98:	69e0      	ldr	r0, [r4, #28]
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	2204      	movs	r2, #4
 8008a9e:	f102 0614 	add.w	r6, r2, #20
 8008aa2:	429e      	cmp	r6, r3
 8008aa4:	d93d      	bls.n	8008b22 <_dtoa_r+0x31a>
 8008aa6:	6041      	str	r1, [r0, #4]
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fd9f 	bl	80095ec <_Balloc>
 8008aae:	9000      	str	r0, [sp, #0]
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d139      	bne.n	8008b28 <_dtoa_r+0x320>
 8008ab4:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <_dtoa_r+0x308>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f240 11af 	movw	r1, #431	; 0x1af
 8008abc:	e6bd      	b.n	800883a <_dtoa_r+0x32>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7e1      	b.n	8008a86 <_dtoa_r+0x27e>
 8008ac2:	2501      	movs	r5, #1
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	9509      	str	r5, [sp, #36]	; 0x24
 8008aca:	f04f 33ff 	mov.w	r3, #4294967295
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2312      	movs	r3, #18
 8008ad6:	e7d1      	b.n	8008a7c <_dtoa_r+0x274>
 8008ad8:	636f4361 	.word	0x636f4361
 8008adc:	3fd287a7 	.word	0x3fd287a7
 8008ae0:	8b60c8b3 	.word	0x8b60c8b3
 8008ae4:	3fc68a28 	.word	0x3fc68a28
 8008ae8:	509f79fb 	.word	0x509f79fb
 8008aec:	3fd34413 	.word	0x3fd34413
 8008af0:	0800a531 	.word	0x0800a531
 8008af4:	0800a548 	.word	0x0800a548
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	0800a52d 	.word	0x0800a52d
 8008b00:	0800a524 	.word	0x0800a524
 8008b04:	0800a501 	.word	0x0800a501
 8008b08:	3ff80000 	.word	0x3ff80000
 8008b0c:	0800a638 	.word	0x0800a638
 8008b10:	0800a5a0 	.word	0x0800a5a0
 8008b14:	2301      	movs	r3, #1
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	e7d7      	b.n	8008aca <_dtoa_r+0x2c2>
 8008b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	e7ba      	b.n	8008a98 <_dtoa_r+0x290>
 8008b22:	3101      	adds	r1, #1
 8008b24:	0052      	lsls	r2, r2, #1
 8008b26:	e7ba      	b.n	8008a9e <_dtoa_r+0x296>
 8008b28:	69e3      	ldr	r3, [r4, #28]
 8008b2a:	9a00      	ldr	r2, [sp, #0]
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	2b0e      	cmp	r3, #14
 8008b32:	f200 80a8 	bhi.w	8008c86 <_dtoa_r+0x47e>
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	f000 80a5 	beq.w	8008c86 <_dtoa_r+0x47e>
 8008b3c:	f1bb 0f00 	cmp.w	fp, #0
 8008b40:	dd38      	ble.n	8008bb4 <_dtoa_r+0x3ac>
 8008b42:	4bc0      	ldr	r3, [pc, #768]	; (8008e44 <_dtoa_r+0x63c>)
 8008b44:	f00b 020f 	and.w	r2, fp, #15
 8008b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b58:	d019      	beq.n	8008b8e <_dtoa_r+0x386>
 8008b5a:	4bbb      	ldr	r3, [pc, #748]	; (8008e48 <_dtoa_r+0x640>)
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b64:	f7f7 fe9a 	bl	800089c <__aeabi_ddiv>
 8008b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6c:	f008 080f 	and.w	r8, r8, #15
 8008b70:	2503      	movs	r5, #3
 8008b72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e48 <_dtoa_r+0x640>
 8008b76:	f1b8 0f00 	cmp.w	r8, #0
 8008b7a:	d10a      	bne.n	8008b92 <_dtoa_r+0x38a>
 8008b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	f7f7 fe8a 	bl	800089c <__aeabi_ddiv>
 8008b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b8c:	e02b      	b.n	8008be6 <_dtoa_r+0x3de>
 8008b8e:	2502      	movs	r5, #2
 8008b90:	e7ef      	b.n	8008b72 <_dtoa_r+0x36a>
 8008b92:	f018 0f01 	tst.w	r8, #1
 8008b96:	d008      	beq.n	8008baa <_dtoa_r+0x3a2>
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ba0:	f7f7 fd52 	bl	8000648 <__aeabi_dmul>
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460f      	mov	r7, r1
 8008baa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008bae:	f109 0908 	add.w	r9, r9, #8
 8008bb2:	e7e0      	b.n	8008b76 <_dtoa_r+0x36e>
 8008bb4:	f000 809f 	beq.w	8008cf6 <_dtoa_r+0x4ee>
 8008bb8:	f1cb 0600 	rsb	r6, fp, #0
 8008bbc:	4ba1      	ldr	r3, [pc, #644]	; (8008e44 <_dtoa_r+0x63c>)
 8008bbe:	4fa2      	ldr	r7, [pc, #648]	; (8008e48 <_dtoa_r+0x640>)
 8008bc0:	f006 020f 	and.w	r2, r6, #15
 8008bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	ec51 0b18 	vmov	r0, r1, d8
 8008bd0:	f7f7 fd3a 	bl	8000648 <__aeabi_dmul>
 8008bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd8:	1136      	asrs	r6, r6, #4
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2502      	movs	r5, #2
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d17e      	bne.n	8008ce0 <_dtoa_r+0x4d8>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1d0      	bne.n	8008b88 <_dtoa_r+0x380>
 8008be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8084 	beq.w	8008cfa <_dtoa_r+0x4f2>
 8008bf2:	4b96      	ldr	r3, [pc, #600]	; (8008e4c <_dtoa_r+0x644>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 ff97 	bl	8000b2c <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d07b      	beq.n	8008cfa <_dtoa_r+0x4f2>
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d078      	beq.n	8008cfa <_dtoa_r+0x4f2>
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd39      	ble.n	8008c82 <_dtoa_r+0x47a>
 8008c0e:	4b90      	ldr	r3, [pc, #576]	; (8008e50 <_dtoa_r+0x648>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 fd17 	bl	8000648 <__aeabi_dmul>
 8008c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c1e:	9e01      	ldr	r6, [sp, #4]
 8008c20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c24:	3501      	adds	r5, #1
 8008c26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f7f7 fca2 	bl	8000574 <__aeabi_i2d>
 8008c30:	4642      	mov	r2, r8
 8008c32:	464b      	mov	r3, r9
 8008c34:	f7f7 fd08 	bl	8000648 <__aeabi_dmul>
 8008c38:	4b86      	ldr	r3, [pc, #536]	; (8008e54 <_dtoa_r+0x64c>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fb4e 	bl	80002dc <__adddf3>
 8008c40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d158      	bne.n	8008d00 <_dtoa_r+0x4f8>
 8008c4e:	4b82      	ldr	r3, [pc, #520]	; (8008e58 <_dtoa_r+0x650>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb3f 	bl	80002d8 <__aeabi_dsub>
 8008c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5e:	4680      	mov	r8, r0
 8008c60:	4689      	mov	r9, r1
 8008c62:	f7f7 ff81 	bl	8000b68 <__aeabi_dcmpgt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f040 8296 	bne.w	8009198 <_dtoa_r+0x990>
 8008c6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c70:	4640      	mov	r0, r8
 8008c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 ff58 	bl	8000b2c <__aeabi_dcmplt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f040 8289 	bne.w	8009194 <_dtoa_r+0x98c>
 8008c82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f2c0 814e 	blt.w	8008f2a <_dtoa_r+0x722>
 8008c8e:	f1bb 0f0e 	cmp.w	fp, #14
 8008c92:	f300 814a 	bgt.w	8008f2a <_dtoa_r+0x722>
 8008c96:	4b6b      	ldr	r3, [pc, #428]	; (8008e44 <_dtoa_r+0x63c>)
 8008c98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f280 80dc 	bge.w	8008e60 <_dtoa_r+0x658>
 8008ca8:	9b04      	ldr	r3, [sp, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f300 80d8 	bgt.w	8008e60 <_dtoa_r+0x658>
 8008cb0:	f040 826f 	bne.w	8009192 <_dtoa_r+0x98a>
 8008cb4:	4b68      	ldr	r3, [pc, #416]	; (8008e58 <_dtoa_r+0x650>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 fcc4 	bl	8000648 <__aeabi_dmul>
 8008cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc4:	f7f7 ff46 	bl	8000b54 <__aeabi_dcmpge>
 8008cc8:	9e04      	ldr	r6, [sp, #16]
 8008cca:	4637      	mov	r7, r6
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	f040 8245 	bne.w	800915c <_dtoa_r+0x954>
 8008cd2:	9d00      	ldr	r5, [sp, #0]
 8008cd4:	2331      	movs	r3, #49	; 0x31
 8008cd6:	f805 3b01 	strb.w	r3, [r5], #1
 8008cda:	f10b 0b01 	add.w	fp, fp, #1
 8008cde:	e241      	b.n	8009164 <_dtoa_r+0x95c>
 8008ce0:	07f2      	lsls	r2, r6, #31
 8008ce2:	d505      	bpl.n	8008cf0 <_dtoa_r+0x4e8>
 8008ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce8:	f7f7 fcae 	bl	8000648 <__aeabi_dmul>
 8008cec:	3501      	adds	r5, #1
 8008cee:	2301      	movs	r3, #1
 8008cf0:	1076      	asrs	r6, r6, #1
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	e773      	b.n	8008bde <_dtoa_r+0x3d6>
 8008cf6:	2502      	movs	r5, #2
 8008cf8:	e775      	b.n	8008be6 <_dtoa_r+0x3de>
 8008cfa:	9e04      	ldr	r6, [sp, #16]
 8008cfc:	465f      	mov	r7, fp
 8008cfe:	e792      	b.n	8008c26 <_dtoa_r+0x41e>
 8008d00:	9900      	ldr	r1, [sp, #0]
 8008d02:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <_dtoa_r+0x63c>)
 8008d04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d08:	4431      	add	r1, r6
 8008d0a:	9102      	str	r1, [sp, #8]
 8008d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d0e:	eeb0 9a47 	vmov.f32	s18, s14
 8008d12:	eef0 9a67 	vmov.f32	s19, s15
 8008d16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d1e:	2900      	cmp	r1, #0
 8008d20:	d044      	beq.n	8008dac <_dtoa_r+0x5a4>
 8008d22:	494e      	ldr	r1, [pc, #312]	; (8008e5c <_dtoa_r+0x654>)
 8008d24:	2000      	movs	r0, #0
 8008d26:	f7f7 fdb9 	bl	800089c <__aeabi_ddiv>
 8008d2a:	ec53 2b19 	vmov	r2, r3, d9
 8008d2e:	f7f7 fad3 	bl	80002d8 <__aeabi_dsub>
 8008d32:	9d00      	ldr	r5, [sp, #0]
 8008d34:	ec41 0b19 	vmov	d9, r0, r1
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f7f7 ff34 	bl	8000ba8 <__aeabi_d2iz>
 8008d40:	4606      	mov	r6, r0
 8008d42:	f7f7 fc17 	bl	8000574 <__aeabi_i2d>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fac3 	bl	80002d8 <__aeabi_dsub>
 8008d52:	3630      	adds	r6, #48	; 0x30
 8008d54:	f805 6b01 	strb.w	r6, [r5], #1
 8008d58:	ec53 2b19 	vmov	r2, r3, d9
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	f7f7 fee4 	bl	8000b2c <__aeabi_dcmplt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d164      	bne.n	8008e32 <_dtoa_r+0x62a>
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4937      	ldr	r1, [pc, #220]	; (8008e4c <_dtoa_r+0x644>)
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f7f7 fab2 	bl	80002d8 <__aeabi_dsub>
 8008d74:	ec53 2b19 	vmov	r2, r3, d9
 8008d78:	f7f7 fed8 	bl	8000b2c <__aeabi_dcmplt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f040 80b6 	bne.w	8008eee <_dtoa_r+0x6e6>
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	429d      	cmp	r5, r3
 8008d86:	f43f af7c 	beq.w	8008c82 <_dtoa_r+0x47a>
 8008d8a:	4b31      	ldr	r3, [pc, #196]	; (8008e50 <_dtoa_r+0x648>)
 8008d8c:	ec51 0b19 	vmov	r0, r1, d9
 8008d90:	2200      	movs	r2, #0
 8008d92:	f7f7 fc59 	bl	8000648 <__aeabi_dmul>
 8008d96:	4b2e      	ldr	r3, [pc, #184]	; (8008e50 <_dtoa_r+0x648>)
 8008d98:	ec41 0b19 	vmov	d9, r0, r1
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fc51 	bl	8000648 <__aeabi_dmul>
 8008da6:	4680      	mov	r8, r0
 8008da8:	4689      	mov	r9, r1
 8008daa:	e7c5      	b.n	8008d38 <_dtoa_r+0x530>
 8008dac:	ec51 0b17 	vmov	r0, r1, d7
 8008db0:	f7f7 fc4a 	bl	8000648 <__aeabi_dmul>
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	9d00      	ldr	r5, [sp, #0]
 8008db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dba:	ec41 0b19 	vmov	d9, r0, r1
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	f7f7 fef1 	bl	8000ba8 <__aeabi_d2iz>
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	f7f7 fbd4 	bl	8000574 <__aeabi_i2d>
 8008dcc:	3630      	adds	r6, #48	; 0x30
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fa7f 	bl	80002d8 <__aeabi_dsub>
 8008dda:	f805 6b01 	strb.w	r6, [r5], #1
 8008dde:	9b02      	ldr	r3, [sp, #8]
 8008de0:	429d      	cmp	r5, r3
 8008de2:	4680      	mov	r8, r0
 8008de4:	4689      	mov	r9, r1
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	d124      	bne.n	8008e36 <_dtoa_r+0x62e>
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <_dtoa_r+0x654>)
 8008dee:	ec51 0b19 	vmov	r0, r1, d9
 8008df2:	f7f7 fa73 	bl	80002dc <__adddf3>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	f7f7 feb3 	bl	8000b68 <__aeabi_dcmpgt>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d173      	bne.n	8008eee <_dtoa_r+0x6e6>
 8008e06:	ec53 2b19 	vmov	r2, r3, d9
 8008e0a:	4914      	ldr	r1, [pc, #80]	; (8008e5c <_dtoa_r+0x654>)
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f7f7 fa63 	bl	80002d8 <__aeabi_dsub>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4640      	mov	r0, r8
 8008e18:	4649      	mov	r1, r9
 8008e1a:	f7f7 fe87 	bl	8000b2c <__aeabi_dcmplt>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f43f af2f 	beq.w	8008c82 <_dtoa_r+0x47a>
 8008e24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e26:	1e6b      	subs	r3, r5, #1
 8008e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e2e:	2b30      	cmp	r3, #48	; 0x30
 8008e30:	d0f8      	beq.n	8008e24 <_dtoa_r+0x61c>
 8008e32:	46bb      	mov	fp, r7
 8008e34:	e04a      	b.n	8008ecc <_dtoa_r+0x6c4>
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <_dtoa_r+0x648>)
 8008e38:	f7f7 fc06 	bl	8000648 <__aeabi_dmul>
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	4689      	mov	r9, r1
 8008e40:	e7bd      	b.n	8008dbe <_dtoa_r+0x5b6>
 8008e42:	bf00      	nop
 8008e44:	0800a638 	.word	0x0800a638
 8008e48:	0800a610 	.word	0x0800a610
 8008e4c:	3ff00000 	.word	0x3ff00000
 8008e50:	40240000 	.word	0x40240000
 8008e54:	401c0000 	.word	0x401c0000
 8008e58:	40140000 	.word	0x40140000
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e64:	9d00      	ldr	r5, [sp, #0]
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 fd15 	bl	800089c <__aeabi_ddiv>
 8008e72:	f7f7 fe99 	bl	8000ba8 <__aeabi_d2iz>
 8008e76:	9001      	str	r0, [sp, #4]
 8008e78:	f7f7 fb7c 	bl	8000574 <__aeabi_i2d>
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	464b      	mov	r3, r9
 8008e80:	f7f7 fbe2 	bl	8000648 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 fa24 	bl	80002d8 <__aeabi_dsub>
 8008e90:	9e01      	ldr	r6, [sp, #4]
 8008e92:	9f04      	ldr	r7, [sp, #16]
 8008e94:	3630      	adds	r6, #48	; 0x30
 8008e96:	f805 6b01 	strb.w	r6, [r5], #1
 8008e9a:	9e00      	ldr	r6, [sp, #0]
 8008e9c:	1bae      	subs	r6, r5, r6
 8008e9e:	42b7      	cmp	r7, r6
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	d134      	bne.n	8008f10 <_dtoa_r+0x708>
 8008ea6:	f7f7 fa19 	bl	80002dc <__adddf3>
 8008eaa:	4642      	mov	r2, r8
 8008eac:	464b      	mov	r3, r9
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	f7f7 fe59 	bl	8000b68 <__aeabi_dcmpgt>
 8008eb6:	b9c8      	cbnz	r0, 8008eec <_dtoa_r+0x6e4>
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7f7 fe2a 	bl	8000b18 <__aeabi_dcmpeq>
 8008ec4:	b110      	cbz	r0, 8008ecc <_dtoa_r+0x6c4>
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	07db      	lsls	r3, r3, #31
 8008eca:	d40f      	bmi.n	8008eec <_dtoa_r+0x6e4>
 8008ecc:	4651      	mov	r1, sl
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fbcc 	bl	800966c <_Bfree>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ed8:	702b      	strb	r3, [r5, #0]
 8008eda:	f10b 0301 	add.w	r3, fp, #1
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f43f ace2 	beq.w	80088ac <_dtoa_r+0xa4>
 8008ee8:	601d      	str	r5, [r3, #0]
 8008eea:	e4df      	b.n	80088ac <_dtoa_r+0xa4>
 8008eec:	465f      	mov	r7, fp
 8008eee:	462b      	mov	r3, r5
 8008ef0:	461d      	mov	r5, r3
 8008ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ef6:	2a39      	cmp	r2, #57	; 0x39
 8008ef8:	d106      	bne.n	8008f08 <_dtoa_r+0x700>
 8008efa:	9a00      	ldr	r2, [sp, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d1f7      	bne.n	8008ef0 <_dtoa_r+0x6e8>
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	2230      	movs	r2, #48	; 0x30
 8008f04:	3701      	adds	r7, #1
 8008f06:	700a      	strb	r2, [r1, #0]
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	3201      	adds	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e790      	b.n	8008e32 <_dtoa_r+0x62a>
 8008f10:	4ba3      	ldr	r3, [pc, #652]	; (80091a0 <_dtoa_r+0x998>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	f7f7 fb98 	bl	8000648 <__aeabi_dmul>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	f7f7 fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d09e      	beq.n	8008e66 <_dtoa_r+0x65e>
 8008f28:	e7d0      	b.n	8008ecc <_dtoa_r+0x6c4>
 8008f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	f000 80ca 	beq.w	80090c6 <_dtoa_r+0x8be>
 8008f32:	9a07      	ldr	r2, [sp, #28]
 8008f34:	2a01      	cmp	r2, #1
 8008f36:	f300 80ad 	bgt.w	8009094 <_dtoa_r+0x88c>
 8008f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	f000 80a5 	beq.w	800908c <_dtoa_r+0x884>
 8008f42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f46:	9e08      	ldr	r6, [sp, #32]
 8008f48:	9d05      	ldr	r5, [sp, #20]
 8008f4a:	9a05      	ldr	r2, [sp, #20]
 8008f4c:	441a      	add	r2, r3
 8008f4e:	9205      	str	r2, [sp, #20]
 8008f50:	9a06      	ldr	r2, [sp, #24]
 8008f52:	2101      	movs	r1, #1
 8008f54:	441a      	add	r2, r3
 8008f56:	4620      	mov	r0, r4
 8008f58:	9206      	str	r2, [sp, #24]
 8008f5a:	f000 fc3d 	bl	80097d8 <__i2b>
 8008f5e:	4607      	mov	r7, r0
 8008f60:	b165      	cbz	r5, 8008f7c <_dtoa_r+0x774>
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dd09      	ble.n	8008f7c <_dtoa_r+0x774>
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	9a05      	ldr	r2, [sp, #20]
 8008f6c:	bfa8      	it	ge
 8008f6e:	462b      	movge	r3, r5
 8008f70:	1ad2      	subs	r2, r2, r3
 8008f72:	9205      	str	r2, [sp, #20]
 8008f74:	9a06      	ldr	r2, [sp, #24]
 8008f76:	1aed      	subs	r5, r5, r3
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	9306      	str	r3, [sp, #24]
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	b1f3      	cbz	r3, 8008fbe <_dtoa_r+0x7b6>
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a3 	beq.w	80090ce <_dtoa_r+0x8c6>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	dd10      	ble.n	8008fae <_dtoa_r+0x7a6>
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4632      	mov	r2, r6
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fce1 	bl	8009958 <__pow5mult>
 8008f96:	4652      	mov	r2, sl
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 fc31 	bl	8009804 <__multiply>
 8008fa2:	4651      	mov	r1, sl
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fb60 	bl	800966c <_Bfree>
 8008fac:	46c2      	mov	sl, r8
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	1b9a      	subs	r2, r3, r6
 8008fb2:	d004      	beq.n	8008fbe <_dtoa_r+0x7b6>
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fcce 	bl	8009958 <__pow5mult>
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fc09 	bl	80097d8 <__i2b>
 8008fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	4606      	mov	r6, r0
 8008fcc:	f340 8081 	ble.w	80090d2 <_dtoa_r+0x8ca>
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 fcbf 	bl	8009958 <__pow5mult>
 8008fda:	9b07      	ldr	r3, [sp, #28]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	4606      	mov	r6, r0
 8008fe0:	dd7a      	ble.n	80090d8 <_dtoa_r+0x8d0>
 8008fe2:	f04f 0800 	mov.w	r8, #0
 8008fe6:	6933      	ldr	r3, [r6, #16]
 8008fe8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	f000 fba5 	bl	800973c <__hi0bits>
 8008ff2:	f1c0 0020 	rsb	r0, r0, #32
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	4418      	add	r0, r3
 8008ffa:	f010 001f 	ands.w	r0, r0, #31
 8008ffe:	f000 8094 	beq.w	800912a <_dtoa_r+0x922>
 8009002:	f1c0 0320 	rsb	r3, r0, #32
 8009006:	2b04      	cmp	r3, #4
 8009008:	f340 8085 	ble.w	8009116 <_dtoa_r+0x90e>
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	f1c0 001c 	rsb	r0, r0, #28
 8009012:	4403      	add	r3, r0
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	4403      	add	r3, r0
 800901a:	4405      	add	r5, r0
 800901c:	9306      	str	r3, [sp, #24]
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd05      	ble.n	8009030 <_dtoa_r+0x828>
 8009024:	4651      	mov	r1, sl
 8009026:	461a      	mov	r2, r3
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fcef 	bl	8009a0c <__lshift>
 800902e:	4682      	mov	sl, r0
 8009030:	9b06      	ldr	r3, [sp, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	dd05      	ble.n	8009042 <_dtoa_r+0x83a>
 8009036:	4631      	mov	r1, r6
 8009038:	461a      	mov	r2, r3
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fce6 	bl	8009a0c <__lshift>
 8009040:	4606      	mov	r6, r0
 8009042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009044:	2b00      	cmp	r3, #0
 8009046:	d072      	beq.n	800912e <_dtoa_r+0x926>
 8009048:	4631      	mov	r1, r6
 800904a:	4650      	mov	r0, sl
 800904c:	f000 fd4a 	bl	8009ae4 <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	da6c      	bge.n	800912e <_dtoa_r+0x926>
 8009054:	2300      	movs	r3, #0
 8009056:	4651      	mov	r1, sl
 8009058:	220a      	movs	r2, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f000 fb28 	bl	80096b0 <__multadd>
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009066:	4682      	mov	sl, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 81b0 	beq.w	80093ce <_dtoa_r+0xbc6>
 800906e:	2300      	movs	r3, #0
 8009070:	4639      	mov	r1, r7
 8009072:	220a      	movs	r2, #10
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fb1b 	bl	80096b0 <__multadd>
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	4607      	mov	r7, r0
 8009080:	f300 8096 	bgt.w	80091b0 <_dtoa_r+0x9a8>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	2b02      	cmp	r3, #2
 8009088:	dc59      	bgt.n	800913e <_dtoa_r+0x936>
 800908a:	e091      	b.n	80091b0 <_dtoa_r+0x9a8>
 800908c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800908e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009092:	e758      	b.n	8008f46 <_dtoa_r+0x73e>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	1e5e      	subs	r6, r3, #1
 8009098:	9b08      	ldr	r3, [sp, #32]
 800909a:	42b3      	cmp	r3, r6
 800909c:	bfbf      	itttt	lt
 800909e:	9b08      	ldrlt	r3, [sp, #32]
 80090a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80090a2:	9608      	strlt	r6, [sp, #32]
 80090a4:	1af3      	sublt	r3, r6, r3
 80090a6:	bfb4      	ite	lt
 80090a8:	18d2      	addlt	r2, r2, r3
 80090aa:	1b9e      	subge	r6, r3, r6
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	bfbc      	itt	lt
 80090b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80090b2:	2600      	movlt	r6, #0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfb7      	itett	lt
 80090b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80090bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80090c0:	1a9d      	sublt	r5, r3, r2
 80090c2:	2300      	movlt	r3, #0
 80090c4:	e741      	b.n	8008f4a <_dtoa_r+0x742>
 80090c6:	9e08      	ldr	r6, [sp, #32]
 80090c8:	9d05      	ldr	r5, [sp, #20]
 80090ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090cc:	e748      	b.n	8008f60 <_dtoa_r+0x758>
 80090ce:	9a08      	ldr	r2, [sp, #32]
 80090d0:	e770      	b.n	8008fb4 <_dtoa_r+0x7ac>
 80090d2:	9b07      	ldr	r3, [sp, #28]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	dc19      	bgt.n	800910c <_dtoa_r+0x904>
 80090d8:	9b02      	ldr	r3, [sp, #8]
 80090da:	b9bb      	cbnz	r3, 800910c <_dtoa_r+0x904>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e2:	b99b      	cbnz	r3, 800910c <_dtoa_r+0x904>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ea:	0d1b      	lsrs	r3, r3, #20
 80090ec:	051b      	lsls	r3, r3, #20
 80090ee:	b183      	cbz	r3, 8009112 <_dtoa_r+0x90a>
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	3301      	adds	r3, #1
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	3301      	adds	r3, #1
 80090fa:	9306      	str	r3, [sp, #24]
 80090fc:	f04f 0801 	mov.w	r8, #1
 8009100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	f47f af6f 	bne.w	8008fe6 <_dtoa_r+0x7de>
 8009108:	2001      	movs	r0, #1
 800910a:	e774      	b.n	8008ff6 <_dtoa_r+0x7ee>
 800910c:	f04f 0800 	mov.w	r8, #0
 8009110:	e7f6      	b.n	8009100 <_dtoa_r+0x8f8>
 8009112:	4698      	mov	r8, r3
 8009114:	e7f4      	b.n	8009100 <_dtoa_r+0x8f8>
 8009116:	d082      	beq.n	800901e <_dtoa_r+0x816>
 8009118:	9a05      	ldr	r2, [sp, #20]
 800911a:	331c      	adds	r3, #28
 800911c:	441a      	add	r2, r3
 800911e:	9205      	str	r2, [sp, #20]
 8009120:	9a06      	ldr	r2, [sp, #24]
 8009122:	441a      	add	r2, r3
 8009124:	441d      	add	r5, r3
 8009126:	9206      	str	r2, [sp, #24]
 8009128:	e779      	b.n	800901e <_dtoa_r+0x816>
 800912a:	4603      	mov	r3, r0
 800912c:	e7f4      	b.n	8009118 <_dtoa_r+0x910>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc37      	bgt.n	80091a4 <_dtoa_r+0x99c>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	2b02      	cmp	r3, #2
 8009138:	dd34      	ble.n	80091a4 <_dtoa_r+0x99c>
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	b963      	cbnz	r3, 800915c <_dtoa_r+0x954>
 8009142:	4631      	mov	r1, r6
 8009144:	2205      	movs	r2, #5
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fab2 	bl	80096b0 <__multadd>
 800914c:	4601      	mov	r1, r0
 800914e:	4606      	mov	r6, r0
 8009150:	4650      	mov	r0, sl
 8009152:	f000 fcc7 	bl	8009ae4 <__mcmp>
 8009156:	2800      	cmp	r0, #0
 8009158:	f73f adbb 	bgt.w	8008cd2 <_dtoa_r+0x4ca>
 800915c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915e:	9d00      	ldr	r5, [sp, #0]
 8009160:	ea6f 0b03 	mvn.w	fp, r3
 8009164:	f04f 0800 	mov.w	r8, #0
 8009168:	4631      	mov	r1, r6
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fa7e 	bl	800966c <_Bfree>
 8009170:	2f00      	cmp	r7, #0
 8009172:	f43f aeab 	beq.w	8008ecc <_dtoa_r+0x6c4>
 8009176:	f1b8 0f00 	cmp.w	r8, #0
 800917a:	d005      	beq.n	8009188 <_dtoa_r+0x980>
 800917c:	45b8      	cmp	r8, r7
 800917e:	d003      	beq.n	8009188 <_dtoa_r+0x980>
 8009180:	4641      	mov	r1, r8
 8009182:	4620      	mov	r0, r4
 8009184:	f000 fa72 	bl	800966c <_Bfree>
 8009188:	4639      	mov	r1, r7
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fa6e 	bl	800966c <_Bfree>
 8009190:	e69c      	b.n	8008ecc <_dtoa_r+0x6c4>
 8009192:	2600      	movs	r6, #0
 8009194:	4637      	mov	r7, r6
 8009196:	e7e1      	b.n	800915c <_dtoa_r+0x954>
 8009198:	46bb      	mov	fp, r7
 800919a:	4637      	mov	r7, r6
 800919c:	e599      	b.n	8008cd2 <_dtoa_r+0x4ca>
 800919e:	bf00      	nop
 80091a0:	40240000 	.word	0x40240000
 80091a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80c8 	beq.w	800933c <_dtoa_r+0xb34>
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	dd05      	ble.n	80091c0 <_dtoa_r+0x9b8>
 80091b4:	4639      	mov	r1, r7
 80091b6:	462a      	mov	r2, r5
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fc27 	bl	8009a0c <__lshift>
 80091be:	4607      	mov	r7, r0
 80091c0:	f1b8 0f00 	cmp.w	r8, #0
 80091c4:	d05b      	beq.n	800927e <_dtoa_r+0xa76>
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fa0f 	bl	80095ec <_Balloc>
 80091ce:	4605      	mov	r5, r0
 80091d0:	b928      	cbnz	r0, 80091de <_dtoa_r+0x9d6>
 80091d2:	4b83      	ldr	r3, [pc, #524]	; (80093e0 <_dtoa_r+0xbd8>)
 80091d4:	4602      	mov	r2, r0
 80091d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80091da:	f7ff bb2e 	b.w	800883a <_dtoa_r+0x32>
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	0092      	lsls	r2, r2, #2
 80091e4:	f107 010c 	add.w	r1, r7, #12
 80091e8:	300c      	adds	r0, #12
 80091ea:	f000 fe39 	bl	8009e60 <memcpy>
 80091ee:	2201      	movs	r2, #1
 80091f0:	4629      	mov	r1, r5
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 fc0a 	bl	8009a0c <__lshift>
 80091f8:	9b00      	ldr	r3, [sp, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009202:	4413      	add	r3, r2
 8009204:	9308      	str	r3, [sp, #32]
 8009206:	9b02      	ldr	r3, [sp, #8]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	46b8      	mov	r8, r7
 800920e:	9306      	str	r3, [sp, #24]
 8009210:	4607      	mov	r7, r0
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	4631      	mov	r1, r6
 8009216:	3b01      	subs	r3, #1
 8009218:	4650      	mov	r0, sl
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	f7ff fa6a 	bl	80086f4 <quorem>
 8009220:	4641      	mov	r1, r8
 8009222:	9002      	str	r0, [sp, #8]
 8009224:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009228:	4650      	mov	r0, sl
 800922a:	f000 fc5b 	bl	8009ae4 <__mcmp>
 800922e:	463a      	mov	r2, r7
 8009230:	9005      	str	r0, [sp, #20]
 8009232:	4631      	mov	r1, r6
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fc71 	bl	8009b1c <__mdiff>
 800923a:	68c2      	ldr	r2, [r0, #12]
 800923c:	4605      	mov	r5, r0
 800923e:	bb02      	cbnz	r2, 8009282 <_dtoa_r+0xa7a>
 8009240:	4601      	mov	r1, r0
 8009242:	4650      	mov	r0, sl
 8009244:	f000 fc4e 	bl	8009ae4 <__mcmp>
 8009248:	4602      	mov	r2, r0
 800924a:	4629      	mov	r1, r5
 800924c:	4620      	mov	r0, r4
 800924e:	9209      	str	r2, [sp, #36]	; 0x24
 8009250:	f000 fa0c 	bl	800966c <_Bfree>
 8009254:	9b07      	ldr	r3, [sp, #28]
 8009256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009258:	9d04      	ldr	r5, [sp, #16]
 800925a:	ea43 0102 	orr.w	r1, r3, r2
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	4319      	orrs	r1, r3
 8009262:	d110      	bne.n	8009286 <_dtoa_r+0xa7e>
 8009264:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009268:	d029      	beq.n	80092be <_dtoa_r+0xab6>
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dd02      	ble.n	8009276 <_dtoa_r+0xa6e>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	f883 9000 	strb.w	r9, [r3]
 800927c:	e774      	b.n	8009168 <_dtoa_r+0x960>
 800927e:	4638      	mov	r0, r7
 8009280:	e7ba      	b.n	80091f8 <_dtoa_r+0x9f0>
 8009282:	2201      	movs	r2, #1
 8009284:	e7e1      	b.n	800924a <_dtoa_r+0xa42>
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	db04      	blt.n	8009296 <_dtoa_r+0xa8e>
 800928c:	9907      	ldr	r1, [sp, #28]
 800928e:	430b      	orrs	r3, r1
 8009290:	9906      	ldr	r1, [sp, #24]
 8009292:	430b      	orrs	r3, r1
 8009294:	d120      	bne.n	80092d8 <_dtoa_r+0xad0>
 8009296:	2a00      	cmp	r2, #0
 8009298:	dded      	ble.n	8009276 <_dtoa_r+0xa6e>
 800929a:	4651      	mov	r1, sl
 800929c:	2201      	movs	r2, #1
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fbb4 	bl	8009a0c <__lshift>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4682      	mov	sl, r0
 80092a8:	f000 fc1c 	bl	8009ae4 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dc03      	bgt.n	80092b8 <_dtoa_r+0xab0>
 80092b0:	d1e1      	bne.n	8009276 <_dtoa_r+0xa6e>
 80092b2:	f019 0f01 	tst.w	r9, #1
 80092b6:	d0de      	beq.n	8009276 <_dtoa_r+0xa6e>
 80092b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092bc:	d1d8      	bne.n	8009270 <_dtoa_r+0xa68>
 80092be:	9a01      	ldr	r2, [sp, #4]
 80092c0:	2339      	movs	r3, #57	; 0x39
 80092c2:	7013      	strb	r3, [r2, #0]
 80092c4:	462b      	mov	r3, r5
 80092c6:	461d      	mov	r5, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092ce:	2a39      	cmp	r2, #57	; 0x39
 80092d0:	d06c      	beq.n	80093ac <_dtoa_r+0xba4>
 80092d2:	3201      	adds	r2, #1
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e747      	b.n	8009168 <_dtoa_r+0x960>
 80092d8:	2a00      	cmp	r2, #0
 80092da:	dd07      	ble.n	80092ec <_dtoa_r+0xae4>
 80092dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092e0:	d0ed      	beq.n	80092be <_dtoa_r+0xab6>
 80092e2:	9a01      	ldr	r2, [sp, #4]
 80092e4:	f109 0301 	add.w	r3, r9, #1
 80092e8:	7013      	strb	r3, [r2, #0]
 80092ea:	e73d      	b.n	8009168 <_dtoa_r+0x960>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	9a08      	ldr	r2, [sp, #32]
 80092f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d043      	beq.n	8009380 <_dtoa_r+0xb78>
 80092f8:	4651      	mov	r1, sl
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f9d6 	bl	80096b0 <__multadd>
 8009304:	45b8      	cmp	r8, r7
 8009306:	4682      	mov	sl, r0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	f04f 020a 	mov.w	r2, #10
 8009310:	4641      	mov	r1, r8
 8009312:	4620      	mov	r0, r4
 8009314:	d107      	bne.n	8009326 <_dtoa_r+0xb1e>
 8009316:	f000 f9cb 	bl	80096b0 <__multadd>
 800931a:	4680      	mov	r8, r0
 800931c:	4607      	mov	r7, r0
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	3301      	adds	r3, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	e775      	b.n	8009212 <_dtoa_r+0xa0a>
 8009326:	f000 f9c3 	bl	80096b0 <__multadd>
 800932a:	4639      	mov	r1, r7
 800932c:	4680      	mov	r8, r0
 800932e:	2300      	movs	r3, #0
 8009330:	220a      	movs	r2, #10
 8009332:	4620      	mov	r0, r4
 8009334:	f000 f9bc 	bl	80096b0 <__multadd>
 8009338:	4607      	mov	r7, r0
 800933a:	e7f0      	b.n	800931e <_dtoa_r+0xb16>
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	9d00      	ldr	r5, [sp, #0]
 8009342:	4631      	mov	r1, r6
 8009344:	4650      	mov	r0, sl
 8009346:	f7ff f9d5 	bl	80086f4 <quorem>
 800934a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	f805 9b01 	strb.w	r9, [r5], #1
 8009354:	1aea      	subs	r2, r5, r3
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	4293      	cmp	r3, r2
 800935a:	dd07      	ble.n	800936c <_dtoa_r+0xb64>
 800935c:	4651      	mov	r1, sl
 800935e:	2300      	movs	r3, #0
 8009360:	220a      	movs	r2, #10
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f9a4 	bl	80096b0 <__multadd>
 8009368:	4682      	mov	sl, r0
 800936a:	e7ea      	b.n	8009342 <_dtoa_r+0xb3a>
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfc8      	it	gt
 8009372:	461d      	movgt	r5, r3
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	bfd8      	it	le
 8009378:	2501      	movle	r5, #1
 800937a:	441d      	add	r5, r3
 800937c:	f04f 0800 	mov.w	r8, #0
 8009380:	4651      	mov	r1, sl
 8009382:	2201      	movs	r2, #1
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fb41 	bl	8009a0c <__lshift>
 800938a:	4631      	mov	r1, r6
 800938c:	4682      	mov	sl, r0
 800938e:	f000 fba9 	bl	8009ae4 <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	dc96      	bgt.n	80092c4 <_dtoa_r+0xabc>
 8009396:	d102      	bne.n	800939e <_dtoa_r+0xb96>
 8009398:	f019 0f01 	tst.w	r9, #1
 800939c:	d192      	bne.n	80092c4 <_dtoa_r+0xabc>
 800939e:	462b      	mov	r3, r5
 80093a0:	461d      	mov	r5, r3
 80093a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093a6:	2a30      	cmp	r2, #48	; 0x30
 80093a8:	d0fa      	beq.n	80093a0 <_dtoa_r+0xb98>
 80093aa:	e6dd      	b.n	8009168 <_dtoa_r+0x960>
 80093ac:	9a00      	ldr	r2, [sp, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d189      	bne.n	80092c6 <_dtoa_r+0xabe>
 80093b2:	f10b 0b01 	add.w	fp, fp, #1
 80093b6:	2331      	movs	r3, #49	; 0x31
 80093b8:	e796      	b.n	80092e8 <_dtoa_r+0xae0>
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <_dtoa_r+0xbdc>)
 80093bc:	f7ff ba99 	b.w	80088f2 <_dtoa_r+0xea>
 80093c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f47f aa6d 	bne.w	80088a2 <_dtoa_r+0x9a>
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <_dtoa_r+0xbe0>)
 80093ca:	f7ff ba92 	b.w	80088f2 <_dtoa_r+0xea>
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dcb5      	bgt.n	8009340 <_dtoa_r+0xb38>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	f73f aeb1 	bgt.w	800913e <_dtoa_r+0x936>
 80093dc:	e7b0      	b.n	8009340 <_dtoa_r+0xb38>
 80093de:	bf00      	nop
 80093e0:	0800a5a0 	.word	0x0800a5a0
 80093e4:	0800a500 	.word	0x0800a500
 80093e8:	0800a524 	.word	0x0800a524

080093ec <_free_r>:
 80093ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d044      	beq.n	800947c <_free_r+0x90>
 80093f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f6:	9001      	str	r0, [sp, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f1a1 0404 	sub.w	r4, r1, #4
 80093fe:	bfb8      	it	lt
 8009400:	18e4      	addlt	r4, r4, r3
 8009402:	f000 f8e7 	bl	80095d4 <__malloc_lock>
 8009406:	4a1e      	ldr	r2, [pc, #120]	; (8009480 <_free_r+0x94>)
 8009408:	9801      	ldr	r0, [sp, #4]
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	b933      	cbnz	r3, 800941c <_free_r+0x30>
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	6014      	str	r4, [r2, #0]
 8009412:	b003      	add	sp, #12
 8009414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009418:	f000 b8e2 	b.w	80095e0 <__malloc_unlock>
 800941c:	42a3      	cmp	r3, r4
 800941e:	d908      	bls.n	8009432 <_free_r+0x46>
 8009420:	6825      	ldr	r5, [r4, #0]
 8009422:	1961      	adds	r1, r4, r5
 8009424:	428b      	cmp	r3, r1
 8009426:	bf01      	itttt	eq
 8009428:	6819      	ldreq	r1, [r3, #0]
 800942a:	685b      	ldreq	r3, [r3, #4]
 800942c:	1949      	addeq	r1, r1, r5
 800942e:	6021      	streq	r1, [r4, #0]
 8009430:	e7ed      	b.n	800940e <_free_r+0x22>
 8009432:	461a      	mov	r2, r3
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b10b      	cbz	r3, 800943c <_free_r+0x50>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d9fa      	bls.n	8009432 <_free_r+0x46>
 800943c:	6811      	ldr	r1, [r2, #0]
 800943e:	1855      	adds	r5, r2, r1
 8009440:	42a5      	cmp	r5, r4
 8009442:	d10b      	bne.n	800945c <_free_r+0x70>
 8009444:	6824      	ldr	r4, [r4, #0]
 8009446:	4421      	add	r1, r4
 8009448:	1854      	adds	r4, r2, r1
 800944a:	42a3      	cmp	r3, r4
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	d1e0      	bne.n	8009412 <_free_r+0x26>
 8009450:	681c      	ldr	r4, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6053      	str	r3, [r2, #4]
 8009456:	440c      	add	r4, r1
 8009458:	6014      	str	r4, [r2, #0]
 800945a:	e7da      	b.n	8009412 <_free_r+0x26>
 800945c:	d902      	bls.n	8009464 <_free_r+0x78>
 800945e:	230c      	movs	r3, #12
 8009460:	6003      	str	r3, [r0, #0]
 8009462:	e7d6      	b.n	8009412 <_free_r+0x26>
 8009464:	6825      	ldr	r5, [r4, #0]
 8009466:	1961      	adds	r1, r4, r5
 8009468:	428b      	cmp	r3, r1
 800946a:	bf04      	itt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bf04      	itt	eq
 8009474:	1949      	addeq	r1, r1, r5
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6054      	str	r4, [r2, #4]
 800947a:	e7ca      	b.n	8009412 <_free_r+0x26>
 800947c:	b003      	add	sp, #12
 800947e:	bd30      	pop	{r4, r5, pc}
 8009480:	200006f0 	.word	0x200006f0

08009484 <malloc>:
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <malloc+0xc>)
 8009486:	4601      	mov	r1, r0
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	f000 b823 	b.w	80094d4 <_malloc_r>
 800948e:	bf00      	nop
 8009490:	20000068 	.word	0x20000068

08009494 <sbrk_aligned>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4e0e      	ldr	r6, [pc, #56]	; (80094d0 <sbrk_aligned+0x3c>)
 8009498:	460c      	mov	r4, r1
 800949a:	6831      	ldr	r1, [r6, #0]
 800949c:	4605      	mov	r5, r0
 800949e:	b911      	cbnz	r1, 80094a6 <sbrk_aligned+0x12>
 80094a0:	f000 fcce 	bl	8009e40 <_sbrk_r>
 80094a4:	6030      	str	r0, [r6, #0]
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 fcc9 	bl	8009e40 <_sbrk_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	d00a      	beq.n	80094c8 <sbrk_aligned+0x34>
 80094b2:	1cc4      	adds	r4, r0, #3
 80094b4:	f024 0403 	bic.w	r4, r4, #3
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d007      	beq.n	80094cc <sbrk_aligned+0x38>
 80094bc:	1a21      	subs	r1, r4, r0
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 fcbe 	bl	8009e40 <_sbrk_r>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d101      	bne.n	80094cc <sbrk_aligned+0x38>
 80094c8:	f04f 34ff 	mov.w	r4, #4294967295
 80094cc:	4620      	mov	r0, r4
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	200006f4 	.word	0x200006f4

080094d4 <_malloc_r>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	1ccd      	adds	r5, r1, #3
 80094da:	f025 0503 	bic.w	r5, r5, #3
 80094de:	3508      	adds	r5, #8
 80094e0:	2d0c      	cmp	r5, #12
 80094e2:	bf38      	it	cc
 80094e4:	250c      	movcc	r5, #12
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	4607      	mov	r7, r0
 80094ea:	db01      	blt.n	80094f0 <_malloc_r+0x1c>
 80094ec:	42a9      	cmp	r1, r5
 80094ee:	d905      	bls.n	80094fc <_malloc_r+0x28>
 80094f0:	230c      	movs	r3, #12
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	2600      	movs	r6, #0
 80094f6:	4630      	mov	r0, r6
 80094f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095d0 <_malloc_r+0xfc>
 8009500:	f000 f868 	bl	80095d4 <__malloc_lock>
 8009504:	f8d8 3000 	ldr.w	r3, [r8]
 8009508:	461c      	mov	r4, r3
 800950a:	bb5c      	cbnz	r4, 8009564 <_malloc_r+0x90>
 800950c:	4629      	mov	r1, r5
 800950e:	4638      	mov	r0, r7
 8009510:	f7ff ffc0 	bl	8009494 <sbrk_aligned>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	4604      	mov	r4, r0
 8009518:	d155      	bne.n	80095c6 <_malloc_r+0xf2>
 800951a:	f8d8 4000 	ldr.w	r4, [r8]
 800951e:	4626      	mov	r6, r4
 8009520:	2e00      	cmp	r6, #0
 8009522:	d145      	bne.n	80095b0 <_malloc_r+0xdc>
 8009524:	2c00      	cmp	r4, #0
 8009526:	d048      	beq.n	80095ba <_malloc_r+0xe6>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	4631      	mov	r1, r6
 800952c:	4638      	mov	r0, r7
 800952e:	eb04 0903 	add.w	r9, r4, r3
 8009532:	f000 fc85 	bl	8009e40 <_sbrk_r>
 8009536:	4581      	cmp	r9, r0
 8009538:	d13f      	bne.n	80095ba <_malloc_r+0xe6>
 800953a:	6821      	ldr	r1, [r4, #0]
 800953c:	1a6d      	subs	r5, r5, r1
 800953e:	4629      	mov	r1, r5
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff ffa7 	bl	8009494 <sbrk_aligned>
 8009546:	3001      	adds	r0, #1
 8009548:	d037      	beq.n	80095ba <_malloc_r+0xe6>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	442b      	add	r3, r5
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	f8d8 3000 	ldr.w	r3, [r8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d038      	beq.n	80095ca <_malloc_r+0xf6>
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	42a2      	cmp	r2, r4
 800955c:	d12b      	bne.n	80095b6 <_malloc_r+0xe2>
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	e00f      	b.n	8009584 <_malloc_r+0xb0>
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	1b52      	subs	r2, r2, r5
 8009568:	d41f      	bmi.n	80095aa <_malloc_r+0xd6>
 800956a:	2a0b      	cmp	r2, #11
 800956c:	d917      	bls.n	800959e <_malloc_r+0xca>
 800956e:	1961      	adds	r1, r4, r5
 8009570:	42a3      	cmp	r3, r4
 8009572:	6025      	str	r5, [r4, #0]
 8009574:	bf18      	it	ne
 8009576:	6059      	strne	r1, [r3, #4]
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	bf08      	it	eq
 800957c:	f8c8 1000 	streq.w	r1, [r8]
 8009580:	5162      	str	r2, [r4, r5]
 8009582:	604b      	str	r3, [r1, #4]
 8009584:	4638      	mov	r0, r7
 8009586:	f104 060b 	add.w	r6, r4, #11
 800958a:	f000 f829 	bl	80095e0 <__malloc_unlock>
 800958e:	f026 0607 	bic.w	r6, r6, #7
 8009592:	1d23      	adds	r3, r4, #4
 8009594:	1af2      	subs	r2, r6, r3
 8009596:	d0ae      	beq.n	80094f6 <_malloc_r+0x22>
 8009598:	1b9b      	subs	r3, r3, r6
 800959a:	50a3      	str	r3, [r4, r2]
 800959c:	e7ab      	b.n	80094f6 <_malloc_r+0x22>
 800959e:	42a3      	cmp	r3, r4
 80095a0:	6862      	ldr	r2, [r4, #4]
 80095a2:	d1dd      	bne.n	8009560 <_malloc_r+0x8c>
 80095a4:	f8c8 2000 	str.w	r2, [r8]
 80095a8:	e7ec      	b.n	8009584 <_malloc_r+0xb0>
 80095aa:	4623      	mov	r3, r4
 80095ac:	6864      	ldr	r4, [r4, #4]
 80095ae:	e7ac      	b.n	800950a <_malloc_r+0x36>
 80095b0:	4634      	mov	r4, r6
 80095b2:	6876      	ldr	r6, [r6, #4]
 80095b4:	e7b4      	b.n	8009520 <_malloc_r+0x4c>
 80095b6:	4613      	mov	r3, r2
 80095b8:	e7cc      	b.n	8009554 <_malloc_r+0x80>
 80095ba:	230c      	movs	r3, #12
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	4638      	mov	r0, r7
 80095c0:	f000 f80e 	bl	80095e0 <__malloc_unlock>
 80095c4:	e797      	b.n	80094f6 <_malloc_r+0x22>
 80095c6:	6025      	str	r5, [r4, #0]
 80095c8:	e7dc      	b.n	8009584 <_malloc_r+0xb0>
 80095ca:	605b      	str	r3, [r3, #4]
 80095cc:	deff      	udf	#255	; 0xff
 80095ce:	bf00      	nop
 80095d0:	200006f0 	.word	0x200006f0

080095d4 <__malloc_lock>:
 80095d4:	4801      	ldr	r0, [pc, #4]	; (80095dc <__malloc_lock+0x8>)
 80095d6:	f7ff b88b 	b.w	80086f0 <__retarget_lock_acquire_recursive>
 80095da:	bf00      	nop
 80095dc:	200006ec 	.word	0x200006ec

080095e0 <__malloc_unlock>:
 80095e0:	4801      	ldr	r0, [pc, #4]	; (80095e8 <__malloc_unlock+0x8>)
 80095e2:	f7ff b886 	b.w	80086f2 <__retarget_lock_release_recursive>
 80095e6:	bf00      	nop
 80095e8:	200006ec 	.word	0x200006ec

080095ec <_Balloc>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	69c6      	ldr	r6, [r0, #28]
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	b976      	cbnz	r6, 8009614 <_Balloc+0x28>
 80095f6:	2010      	movs	r0, #16
 80095f8:	f7ff ff44 	bl	8009484 <malloc>
 80095fc:	4602      	mov	r2, r0
 80095fe:	61e0      	str	r0, [r4, #28]
 8009600:	b920      	cbnz	r0, 800960c <_Balloc+0x20>
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <_Balloc+0x78>)
 8009604:	4818      	ldr	r0, [pc, #96]	; (8009668 <_Balloc+0x7c>)
 8009606:	216b      	movs	r1, #107	; 0x6b
 8009608:	f000 fc38 	bl	8009e7c <__assert_func>
 800960c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009610:	6006      	str	r6, [r0, #0]
 8009612:	60c6      	str	r6, [r0, #12]
 8009614:	69e6      	ldr	r6, [r4, #28]
 8009616:	68f3      	ldr	r3, [r6, #12]
 8009618:	b183      	cbz	r3, 800963c <_Balloc+0x50>
 800961a:	69e3      	ldr	r3, [r4, #28]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009622:	b9b8      	cbnz	r0, 8009654 <_Balloc+0x68>
 8009624:	2101      	movs	r1, #1
 8009626:	fa01 f605 	lsl.w	r6, r1, r5
 800962a:	1d72      	adds	r2, r6, #5
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fc42 	bl	8009eb8 <_calloc_r>
 8009634:	b160      	cbz	r0, 8009650 <_Balloc+0x64>
 8009636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800963a:	e00e      	b.n	800965a <_Balloc+0x6e>
 800963c:	2221      	movs	r2, #33	; 0x21
 800963e:	2104      	movs	r1, #4
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fc39 	bl	8009eb8 <_calloc_r>
 8009646:	69e3      	ldr	r3, [r4, #28]
 8009648:	60f0      	str	r0, [r6, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e4      	bne.n	800961a <_Balloc+0x2e>
 8009650:	2000      	movs	r0, #0
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	6802      	ldr	r2, [r0, #0]
 8009656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800965a:	2300      	movs	r3, #0
 800965c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009660:	e7f7      	b.n	8009652 <_Balloc+0x66>
 8009662:	bf00      	nop
 8009664:	0800a531 	.word	0x0800a531
 8009668:	0800a5b1 	.word	0x0800a5b1

0800966c <_Bfree>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	69c6      	ldr	r6, [r0, #28]
 8009670:	4605      	mov	r5, r0
 8009672:	460c      	mov	r4, r1
 8009674:	b976      	cbnz	r6, 8009694 <_Bfree+0x28>
 8009676:	2010      	movs	r0, #16
 8009678:	f7ff ff04 	bl	8009484 <malloc>
 800967c:	4602      	mov	r2, r0
 800967e:	61e8      	str	r0, [r5, #28]
 8009680:	b920      	cbnz	r0, 800968c <_Bfree+0x20>
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <_Bfree+0x3c>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <_Bfree+0x40>)
 8009686:	218f      	movs	r1, #143	; 0x8f
 8009688:	f000 fbf8 	bl	8009e7c <__assert_func>
 800968c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009690:	6006      	str	r6, [r0, #0]
 8009692:	60c6      	str	r6, [r0, #12]
 8009694:	b13c      	cbz	r4, 80096a6 <_Bfree+0x3a>
 8009696:	69eb      	ldr	r3, [r5, #28]
 8009698:	6862      	ldr	r2, [r4, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096a0:	6021      	str	r1, [r4, #0]
 80096a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	0800a531 	.word	0x0800a531
 80096ac:	0800a5b1 	.word	0x0800a5b1

080096b0 <__multadd>:
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	690d      	ldr	r5, [r1, #16]
 80096b6:	4607      	mov	r7, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	461e      	mov	r6, r3
 80096bc:	f101 0c14 	add.w	ip, r1, #20
 80096c0:	2000      	movs	r0, #0
 80096c2:	f8dc 3000 	ldr.w	r3, [ip]
 80096c6:	b299      	uxth	r1, r3
 80096c8:	fb02 6101 	mla	r1, r2, r1, r6
 80096cc:	0c1e      	lsrs	r6, r3, #16
 80096ce:	0c0b      	lsrs	r3, r1, #16
 80096d0:	fb02 3306 	mla	r3, r2, r6, r3
 80096d4:	b289      	uxth	r1, r1
 80096d6:	3001      	adds	r0, #1
 80096d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096dc:	4285      	cmp	r5, r0
 80096de:	f84c 1b04 	str.w	r1, [ip], #4
 80096e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096e6:	dcec      	bgt.n	80096c2 <__multadd+0x12>
 80096e8:	b30e      	cbz	r6, 800972e <__multadd+0x7e>
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	dc19      	bgt.n	8009724 <__multadd+0x74>
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	4638      	mov	r0, r7
 80096f4:	3101      	adds	r1, #1
 80096f6:	f7ff ff79 	bl	80095ec <_Balloc>
 80096fa:	4680      	mov	r8, r0
 80096fc:	b928      	cbnz	r0, 800970a <__multadd+0x5a>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <__multadd+0x84>)
 8009702:	480d      	ldr	r0, [pc, #52]	; (8009738 <__multadd+0x88>)
 8009704:	21ba      	movs	r1, #186	; 0xba
 8009706:	f000 fbb9 	bl	8009e7c <__assert_func>
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	3202      	adds	r2, #2
 800970e:	f104 010c 	add.w	r1, r4, #12
 8009712:	0092      	lsls	r2, r2, #2
 8009714:	300c      	adds	r0, #12
 8009716:	f000 fba3 	bl	8009e60 <memcpy>
 800971a:	4621      	mov	r1, r4
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff ffa5 	bl	800966c <_Bfree>
 8009722:	4644      	mov	r4, r8
 8009724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009728:	3501      	adds	r5, #1
 800972a:	615e      	str	r6, [r3, #20]
 800972c:	6125      	str	r5, [r4, #16]
 800972e:	4620      	mov	r0, r4
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	0800a5a0 	.word	0x0800a5a0
 8009738:	0800a5b1 	.word	0x0800a5b1

0800973c <__hi0bits>:
 800973c:	0c03      	lsrs	r3, r0, #16
 800973e:	041b      	lsls	r3, r3, #16
 8009740:	b9d3      	cbnz	r3, 8009778 <__hi0bits+0x3c>
 8009742:	0400      	lsls	r0, r0, #16
 8009744:	2310      	movs	r3, #16
 8009746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800974a:	bf04      	itt	eq
 800974c:	0200      	lsleq	r0, r0, #8
 800974e:	3308      	addeq	r3, #8
 8009750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009754:	bf04      	itt	eq
 8009756:	0100      	lsleq	r0, r0, #4
 8009758:	3304      	addeq	r3, #4
 800975a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800975e:	bf04      	itt	eq
 8009760:	0080      	lsleq	r0, r0, #2
 8009762:	3302      	addeq	r3, #2
 8009764:	2800      	cmp	r0, #0
 8009766:	db05      	blt.n	8009774 <__hi0bits+0x38>
 8009768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800976c:	f103 0301 	add.w	r3, r3, #1
 8009770:	bf08      	it	eq
 8009772:	2320      	moveq	r3, #32
 8009774:	4618      	mov	r0, r3
 8009776:	4770      	bx	lr
 8009778:	2300      	movs	r3, #0
 800977a:	e7e4      	b.n	8009746 <__hi0bits+0xa>

0800977c <__lo0bits>:
 800977c:	6803      	ldr	r3, [r0, #0]
 800977e:	f013 0207 	ands.w	r2, r3, #7
 8009782:	d00c      	beq.n	800979e <__lo0bits+0x22>
 8009784:	07d9      	lsls	r1, r3, #31
 8009786:	d422      	bmi.n	80097ce <__lo0bits+0x52>
 8009788:	079a      	lsls	r2, r3, #30
 800978a:	bf49      	itett	mi
 800978c:	085b      	lsrmi	r3, r3, #1
 800978e:	089b      	lsrpl	r3, r3, #2
 8009790:	6003      	strmi	r3, [r0, #0]
 8009792:	2201      	movmi	r2, #1
 8009794:	bf5c      	itt	pl
 8009796:	6003      	strpl	r3, [r0, #0]
 8009798:	2202      	movpl	r2, #2
 800979a:	4610      	mov	r0, r2
 800979c:	4770      	bx	lr
 800979e:	b299      	uxth	r1, r3
 80097a0:	b909      	cbnz	r1, 80097a6 <__lo0bits+0x2a>
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	2210      	movs	r2, #16
 80097a6:	b2d9      	uxtb	r1, r3
 80097a8:	b909      	cbnz	r1, 80097ae <__lo0bits+0x32>
 80097aa:	3208      	adds	r2, #8
 80097ac:	0a1b      	lsrs	r3, r3, #8
 80097ae:	0719      	lsls	r1, r3, #28
 80097b0:	bf04      	itt	eq
 80097b2:	091b      	lsreq	r3, r3, #4
 80097b4:	3204      	addeq	r2, #4
 80097b6:	0799      	lsls	r1, r3, #30
 80097b8:	bf04      	itt	eq
 80097ba:	089b      	lsreq	r3, r3, #2
 80097bc:	3202      	addeq	r2, #2
 80097be:	07d9      	lsls	r1, r3, #31
 80097c0:	d403      	bmi.n	80097ca <__lo0bits+0x4e>
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	f102 0201 	add.w	r2, r2, #1
 80097c8:	d003      	beq.n	80097d2 <__lo0bits+0x56>
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	e7e5      	b.n	800979a <__lo0bits+0x1e>
 80097ce:	2200      	movs	r2, #0
 80097d0:	e7e3      	b.n	800979a <__lo0bits+0x1e>
 80097d2:	2220      	movs	r2, #32
 80097d4:	e7e1      	b.n	800979a <__lo0bits+0x1e>
	...

080097d8 <__i2b>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	460c      	mov	r4, r1
 80097dc:	2101      	movs	r1, #1
 80097de:	f7ff ff05 	bl	80095ec <_Balloc>
 80097e2:	4602      	mov	r2, r0
 80097e4:	b928      	cbnz	r0, 80097f2 <__i2b+0x1a>
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <__i2b+0x24>)
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <__i2b+0x28>)
 80097ea:	f240 1145 	movw	r1, #325	; 0x145
 80097ee:	f000 fb45 	bl	8009e7c <__assert_func>
 80097f2:	2301      	movs	r3, #1
 80097f4:	6144      	str	r4, [r0, #20]
 80097f6:	6103      	str	r3, [r0, #16]
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	0800a5a0 	.word	0x0800a5a0
 8009800:	0800a5b1 	.word	0x0800a5b1

08009804 <__multiply>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4691      	mov	r9, r2
 800980a:	690a      	ldr	r2, [r1, #16]
 800980c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009810:	429a      	cmp	r2, r3
 8009812:	bfb8      	it	lt
 8009814:	460b      	movlt	r3, r1
 8009816:	460c      	mov	r4, r1
 8009818:	bfbc      	itt	lt
 800981a:	464c      	movlt	r4, r9
 800981c:	4699      	movlt	r9, r3
 800981e:	6927      	ldr	r7, [r4, #16]
 8009820:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	6861      	ldr	r1, [r4, #4]
 8009828:	eb07 060a 	add.w	r6, r7, sl
 800982c:	42b3      	cmp	r3, r6
 800982e:	b085      	sub	sp, #20
 8009830:	bfb8      	it	lt
 8009832:	3101      	addlt	r1, #1
 8009834:	f7ff feda 	bl	80095ec <_Balloc>
 8009838:	b930      	cbnz	r0, 8009848 <__multiply+0x44>
 800983a:	4602      	mov	r2, r0
 800983c:	4b44      	ldr	r3, [pc, #272]	; (8009950 <__multiply+0x14c>)
 800983e:	4845      	ldr	r0, [pc, #276]	; (8009954 <__multiply+0x150>)
 8009840:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009844:	f000 fb1a 	bl	8009e7c <__assert_func>
 8009848:	f100 0514 	add.w	r5, r0, #20
 800984c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009850:	462b      	mov	r3, r5
 8009852:	2200      	movs	r2, #0
 8009854:	4543      	cmp	r3, r8
 8009856:	d321      	bcc.n	800989c <__multiply+0x98>
 8009858:	f104 0314 	add.w	r3, r4, #20
 800985c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009860:	f109 0314 	add.w	r3, r9, #20
 8009864:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009868:	9202      	str	r2, [sp, #8]
 800986a:	1b3a      	subs	r2, r7, r4
 800986c:	3a15      	subs	r2, #21
 800986e:	f022 0203 	bic.w	r2, r2, #3
 8009872:	3204      	adds	r2, #4
 8009874:	f104 0115 	add.w	r1, r4, #21
 8009878:	428f      	cmp	r7, r1
 800987a:	bf38      	it	cc
 800987c:	2204      	movcc	r2, #4
 800987e:	9201      	str	r2, [sp, #4]
 8009880:	9a02      	ldr	r2, [sp, #8]
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	429a      	cmp	r2, r3
 8009886:	d80c      	bhi.n	80098a2 <__multiply+0x9e>
 8009888:	2e00      	cmp	r6, #0
 800988a:	dd03      	ble.n	8009894 <__multiply+0x90>
 800988c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009890:	2b00      	cmp	r3, #0
 8009892:	d05b      	beq.n	800994c <__multiply+0x148>
 8009894:	6106      	str	r6, [r0, #16]
 8009896:	b005      	add	sp, #20
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	f843 2b04 	str.w	r2, [r3], #4
 80098a0:	e7d8      	b.n	8009854 <__multiply+0x50>
 80098a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098a6:	f1ba 0f00 	cmp.w	sl, #0
 80098aa:	d024      	beq.n	80098f6 <__multiply+0xf2>
 80098ac:	f104 0e14 	add.w	lr, r4, #20
 80098b0:	46a9      	mov	r9, r5
 80098b2:	f04f 0c00 	mov.w	ip, #0
 80098b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098ba:	f8d9 1000 	ldr.w	r1, [r9]
 80098be:	fa1f fb82 	uxth.w	fp, r2
 80098c2:	b289      	uxth	r1, r1
 80098c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098cc:	f8d9 2000 	ldr.w	r2, [r9]
 80098d0:	4461      	add	r1, ip
 80098d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80098da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098de:	b289      	uxth	r1, r1
 80098e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098e4:	4577      	cmp	r7, lr
 80098e6:	f849 1b04 	str.w	r1, [r9], #4
 80098ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098ee:	d8e2      	bhi.n	80098b6 <__multiply+0xb2>
 80098f0:	9a01      	ldr	r2, [sp, #4]
 80098f2:	f845 c002 	str.w	ip, [r5, r2]
 80098f6:	9a03      	ldr	r2, [sp, #12]
 80098f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098fc:	3304      	adds	r3, #4
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	d021      	beq.n	8009948 <__multiply+0x144>
 8009904:	6829      	ldr	r1, [r5, #0]
 8009906:	f104 0c14 	add.w	ip, r4, #20
 800990a:	46ae      	mov	lr, r5
 800990c:	f04f 0a00 	mov.w	sl, #0
 8009910:	f8bc b000 	ldrh.w	fp, [ip]
 8009914:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009918:	fb09 220b 	mla	r2, r9, fp, r2
 800991c:	4452      	add	r2, sl
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009924:	f84e 1b04 	str.w	r1, [lr], #4
 8009928:	f85c 1b04 	ldr.w	r1, [ip], #4
 800992c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009930:	f8be 1000 	ldrh.w	r1, [lr]
 8009934:	fb09 110a 	mla	r1, r9, sl, r1
 8009938:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800993c:	4567      	cmp	r7, ip
 800993e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009942:	d8e5      	bhi.n	8009910 <__multiply+0x10c>
 8009944:	9a01      	ldr	r2, [sp, #4]
 8009946:	50a9      	str	r1, [r5, r2]
 8009948:	3504      	adds	r5, #4
 800994a:	e799      	b.n	8009880 <__multiply+0x7c>
 800994c:	3e01      	subs	r6, #1
 800994e:	e79b      	b.n	8009888 <__multiply+0x84>
 8009950:	0800a5a0 	.word	0x0800a5a0
 8009954:	0800a5b1 	.word	0x0800a5b1

08009958 <__pow5mult>:
 8009958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800995c:	4615      	mov	r5, r2
 800995e:	f012 0203 	ands.w	r2, r2, #3
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	d007      	beq.n	8009978 <__pow5mult+0x20>
 8009968:	4c25      	ldr	r4, [pc, #148]	; (8009a00 <__pow5mult+0xa8>)
 800996a:	3a01      	subs	r2, #1
 800996c:	2300      	movs	r3, #0
 800996e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009972:	f7ff fe9d 	bl	80096b0 <__multadd>
 8009976:	4607      	mov	r7, r0
 8009978:	10ad      	asrs	r5, r5, #2
 800997a:	d03d      	beq.n	80099f8 <__pow5mult+0xa0>
 800997c:	69f4      	ldr	r4, [r6, #28]
 800997e:	b97c      	cbnz	r4, 80099a0 <__pow5mult+0x48>
 8009980:	2010      	movs	r0, #16
 8009982:	f7ff fd7f 	bl	8009484 <malloc>
 8009986:	4602      	mov	r2, r0
 8009988:	61f0      	str	r0, [r6, #28]
 800998a:	b928      	cbnz	r0, 8009998 <__pow5mult+0x40>
 800998c:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <__pow5mult+0xac>)
 800998e:	481e      	ldr	r0, [pc, #120]	; (8009a08 <__pow5mult+0xb0>)
 8009990:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009994:	f000 fa72 	bl	8009e7c <__assert_func>
 8009998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800999c:	6004      	str	r4, [r0, #0]
 800999e:	60c4      	str	r4, [r0, #12]
 80099a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80099a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099a8:	b94c      	cbnz	r4, 80099be <__pow5mult+0x66>
 80099aa:	f240 2171 	movw	r1, #625	; 0x271
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ff12 	bl	80097d8 <__i2b>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ba:	4604      	mov	r4, r0
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	f04f 0900 	mov.w	r9, #0
 80099c2:	07eb      	lsls	r3, r5, #31
 80099c4:	d50a      	bpl.n	80099dc <__pow5mult+0x84>
 80099c6:	4639      	mov	r1, r7
 80099c8:	4622      	mov	r2, r4
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff1a 	bl	8009804 <__multiply>
 80099d0:	4639      	mov	r1, r7
 80099d2:	4680      	mov	r8, r0
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff fe49 	bl	800966c <_Bfree>
 80099da:	4647      	mov	r7, r8
 80099dc:	106d      	asrs	r5, r5, #1
 80099de:	d00b      	beq.n	80099f8 <__pow5mult+0xa0>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	b938      	cbnz	r0, 80099f4 <__pow5mult+0x9c>
 80099e4:	4622      	mov	r2, r4
 80099e6:	4621      	mov	r1, r4
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff ff0b 	bl	8009804 <__multiply>
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	f8c0 9000 	str.w	r9, [r0]
 80099f4:	4604      	mov	r4, r0
 80099f6:	e7e4      	b.n	80099c2 <__pow5mult+0x6a>
 80099f8:	4638      	mov	r0, r7
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	bf00      	nop
 8009a00:	0800a700 	.word	0x0800a700
 8009a04:	0800a531 	.word	0x0800a531
 8009a08:	0800a5b1 	.word	0x0800a5b1

08009a0c <__lshift>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	6849      	ldr	r1, [r1, #4]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	4691      	mov	r9, r2
 8009a20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a24:	f108 0601 	add.w	r6, r8, #1
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	db0b      	blt.n	8009a44 <__lshift+0x38>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff fddd 	bl	80095ec <_Balloc>
 8009a32:	4605      	mov	r5, r0
 8009a34:	b948      	cbnz	r0, 8009a4a <__lshift+0x3e>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b28      	ldr	r3, [pc, #160]	; (8009adc <__lshift+0xd0>)
 8009a3a:	4829      	ldr	r0, [pc, #164]	; (8009ae0 <__lshift+0xd4>)
 8009a3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a40:	f000 fa1c 	bl	8009e7c <__assert_func>
 8009a44:	3101      	adds	r1, #1
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	e7ee      	b.n	8009a28 <__lshift+0x1c>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f100 0114 	add.w	r1, r0, #20
 8009a50:	f100 0210 	add.w	r2, r0, #16
 8009a54:	4618      	mov	r0, r3
 8009a56:	4553      	cmp	r3, sl
 8009a58:	db33      	blt.n	8009ac2 <__lshift+0xb6>
 8009a5a:	6920      	ldr	r0, [r4, #16]
 8009a5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	f019 091f 	ands.w	r9, r9, #31
 8009a68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a70:	d02b      	beq.n	8009aca <__lshift+0xbe>
 8009a72:	f1c9 0e20 	rsb	lr, r9, #32
 8009a76:	468a      	mov	sl, r1
 8009a78:	2200      	movs	r2, #0
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a80:	4310      	orrs	r0, r2
 8009a82:	f84a 0b04 	str.w	r0, [sl], #4
 8009a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8a:	459c      	cmp	ip, r3
 8009a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a90:	d8f3      	bhi.n	8009a7a <__lshift+0x6e>
 8009a92:	ebac 0304 	sub.w	r3, ip, r4
 8009a96:	3b15      	subs	r3, #21
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	f104 0015 	add.w	r0, r4, #21
 8009aa2:	4584      	cmp	ip, r0
 8009aa4:	bf38      	it	cc
 8009aa6:	2304      	movcc	r3, #4
 8009aa8:	50ca      	str	r2, [r1, r3]
 8009aaa:	b10a      	cbz	r2, 8009ab0 <__lshift+0xa4>
 8009aac:	f108 0602 	add.w	r6, r8, #2
 8009ab0:	3e01      	subs	r6, #1
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	612e      	str	r6, [r5, #16]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f7ff fdd8 	bl	800966c <_Bfree>
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	e7c5      	b.n	8009a56 <__lshift+0x4a>
 8009aca:	3904      	subs	r1, #4
 8009acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ad4:	459c      	cmp	ip, r3
 8009ad6:	d8f9      	bhi.n	8009acc <__lshift+0xc0>
 8009ad8:	e7ea      	b.n	8009ab0 <__lshift+0xa4>
 8009ada:	bf00      	nop
 8009adc:	0800a5a0 	.word	0x0800a5a0
 8009ae0:	0800a5b1 	.word	0x0800a5b1

08009ae4 <__mcmp>:
 8009ae4:	b530      	push	{r4, r5, lr}
 8009ae6:	6902      	ldr	r2, [r0, #16]
 8009ae8:	690c      	ldr	r4, [r1, #16]
 8009aea:	1b12      	subs	r2, r2, r4
 8009aec:	d10e      	bne.n	8009b0c <__mcmp+0x28>
 8009aee:	f100 0314 	add.w	r3, r0, #20
 8009af2:	3114      	adds	r1, #20
 8009af4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009af8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009afc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b04:	42a5      	cmp	r5, r4
 8009b06:	d003      	beq.n	8009b10 <__mcmp+0x2c>
 8009b08:	d305      	bcc.n	8009b16 <__mcmp+0x32>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	bd30      	pop	{r4, r5, pc}
 8009b10:	4283      	cmp	r3, r0
 8009b12:	d3f3      	bcc.n	8009afc <__mcmp+0x18>
 8009b14:	e7fa      	b.n	8009b0c <__mcmp+0x28>
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	e7f7      	b.n	8009b0c <__mcmp+0x28>

08009b1c <__mdiff>:
 8009b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460c      	mov	r4, r1
 8009b22:	4606      	mov	r6, r0
 8009b24:	4611      	mov	r1, r2
 8009b26:	4620      	mov	r0, r4
 8009b28:	4690      	mov	r8, r2
 8009b2a:	f7ff ffdb 	bl	8009ae4 <__mcmp>
 8009b2e:	1e05      	subs	r5, r0, #0
 8009b30:	d110      	bne.n	8009b54 <__mdiff+0x38>
 8009b32:	4629      	mov	r1, r5
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff fd59 	bl	80095ec <_Balloc>
 8009b3a:	b930      	cbnz	r0, 8009b4a <__mdiff+0x2e>
 8009b3c:	4b3a      	ldr	r3, [pc, #232]	; (8009c28 <__mdiff+0x10c>)
 8009b3e:	4602      	mov	r2, r0
 8009b40:	f240 2137 	movw	r1, #567	; 0x237
 8009b44:	4839      	ldr	r0, [pc, #228]	; (8009c2c <__mdiff+0x110>)
 8009b46:	f000 f999 	bl	8009e7c <__assert_func>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	bfa4      	itt	ge
 8009b56:	4643      	movge	r3, r8
 8009b58:	46a0      	movge	r8, r4
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b60:	bfa6      	itte	ge
 8009b62:	461c      	movge	r4, r3
 8009b64:	2500      	movge	r5, #0
 8009b66:	2501      	movlt	r5, #1
 8009b68:	f7ff fd40 	bl	80095ec <_Balloc>
 8009b6c:	b920      	cbnz	r0, 8009b78 <__mdiff+0x5c>
 8009b6e:	4b2e      	ldr	r3, [pc, #184]	; (8009c28 <__mdiff+0x10c>)
 8009b70:	4602      	mov	r2, r0
 8009b72:	f240 2145 	movw	r1, #581	; 0x245
 8009b76:	e7e5      	b.n	8009b44 <__mdiff+0x28>
 8009b78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b7c:	6926      	ldr	r6, [r4, #16]
 8009b7e:	60c5      	str	r5, [r0, #12]
 8009b80:	f104 0914 	add.w	r9, r4, #20
 8009b84:	f108 0514 	add.w	r5, r8, #20
 8009b88:	f100 0e14 	add.w	lr, r0, #20
 8009b8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b94:	f108 0210 	add.w	r2, r8, #16
 8009b98:	46f2      	mov	sl, lr
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ba4:	fa11 f88b 	uxtah	r8, r1, fp
 8009ba8:	b299      	uxth	r1, r3
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	eba8 0801 	sub.w	r8, r8, r1
 8009bb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bb4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bb8:	fa1f f888 	uxth.w	r8, r8
 8009bbc:	1419      	asrs	r1, r3, #16
 8009bbe:	454e      	cmp	r6, r9
 8009bc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bc4:	f84a 3b04 	str.w	r3, [sl], #4
 8009bc8:	d8e8      	bhi.n	8009b9c <__mdiff+0x80>
 8009bca:	1b33      	subs	r3, r6, r4
 8009bcc:	3b15      	subs	r3, #21
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	3415      	adds	r4, #21
 8009bd6:	42a6      	cmp	r6, r4
 8009bd8:	bf38      	it	cc
 8009bda:	2304      	movcc	r3, #4
 8009bdc:	441d      	add	r5, r3
 8009bde:	4473      	add	r3, lr
 8009be0:	469e      	mov	lr, r3
 8009be2:	462e      	mov	r6, r5
 8009be4:	4566      	cmp	r6, ip
 8009be6:	d30e      	bcc.n	8009c06 <__mdiff+0xea>
 8009be8:	f10c 0203 	add.w	r2, ip, #3
 8009bec:	1b52      	subs	r2, r2, r5
 8009bee:	f022 0203 	bic.w	r2, r2, #3
 8009bf2:	3d03      	subs	r5, #3
 8009bf4:	45ac      	cmp	ip, r5
 8009bf6:	bf38      	it	cc
 8009bf8:	2200      	movcc	r2, #0
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c00:	b17a      	cbz	r2, 8009c22 <__mdiff+0x106>
 8009c02:	6107      	str	r7, [r0, #16]
 8009c04:	e7a4      	b.n	8009b50 <__mdiff+0x34>
 8009c06:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c0a:	fa11 f288 	uxtah	r2, r1, r8
 8009c0e:	1414      	asrs	r4, r2, #16
 8009c10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c14:	b292      	uxth	r2, r2
 8009c16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c1a:	f84e 2b04 	str.w	r2, [lr], #4
 8009c1e:	1421      	asrs	r1, r4, #16
 8009c20:	e7e0      	b.n	8009be4 <__mdiff+0xc8>
 8009c22:	3f01      	subs	r7, #1
 8009c24:	e7ea      	b.n	8009bfc <__mdiff+0xe0>
 8009c26:	bf00      	nop
 8009c28:	0800a5a0 	.word	0x0800a5a0
 8009c2c:	0800a5b1 	.word	0x0800a5b1

08009c30 <__d2b>:
 8009c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	460f      	mov	r7, r1
 8009c36:	2101      	movs	r1, #1
 8009c38:	ec59 8b10 	vmov	r8, r9, d0
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	f7ff fcd5 	bl	80095ec <_Balloc>
 8009c42:	4604      	mov	r4, r0
 8009c44:	b930      	cbnz	r0, 8009c54 <__d2b+0x24>
 8009c46:	4602      	mov	r2, r0
 8009c48:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <__d2b+0xac>)
 8009c4a:	4825      	ldr	r0, [pc, #148]	; (8009ce0 <__d2b+0xb0>)
 8009c4c:	f240 310f 	movw	r1, #783	; 0x30f
 8009c50:	f000 f914 	bl	8009e7c <__assert_func>
 8009c54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c5c:	bb2d      	cbnz	r5, 8009caa <__d2b+0x7a>
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	f1b8 0300 	subs.w	r3, r8, #0
 8009c64:	d026      	beq.n	8009cb4 <__d2b+0x84>
 8009c66:	4668      	mov	r0, sp
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	f7ff fd87 	bl	800977c <__lo0bits>
 8009c6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c72:	b1e8      	cbz	r0, 8009cb0 <__d2b+0x80>
 8009c74:	f1c0 0320 	rsb	r3, r0, #32
 8009c78:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	40c2      	lsrs	r2, r0
 8009c80:	6163      	str	r3, [r4, #20]
 8009c82:	9201      	str	r2, [sp, #4]
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	61a3      	str	r3, [r4, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bf14      	ite	ne
 8009c8c:	2202      	movne	r2, #2
 8009c8e:	2201      	moveq	r2, #1
 8009c90:	6122      	str	r2, [r4, #16]
 8009c92:	b1bd      	cbz	r5, 8009cc4 <__d2b+0x94>
 8009c94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c98:	4405      	add	r5, r0
 8009c9a:	603d      	str	r5, [r7, #0]
 8009c9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ca0:	6030      	str	r0, [r6, #0]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	b003      	add	sp, #12
 8009ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cae:	e7d6      	b.n	8009c5e <__d2b+0x2e>
 8009cb0:	6161      	str	r1, [r4, #20]
 8009cb2:	e7e7      	b.n	8009c84 <__d2b+0x54>
 8009cb4:	a801      	add	r0, sp, #4
 8009cb6:	f7ff fd61 	bl	800977c <__lo0bits>
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	6163      	str	r3, [r4, #20]
 8009cbe:	3020      	adds	r0, #32
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	e7e5      	b.n	8009c90 <__d2b+0x60>
 8009cc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ccc:	6038      	str	r0, [r7, #0]
 8009cce:	6918      	ldr	r0, [r3, #16]
 8009cd0:	f7ff fd34 	bl	800973c <__hi0bits>
 8009cd4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cd8:	e7e2      	b.n	8009ca0 <__d2b+0x70>
 8009cda:	bf00      	nop
 8009cdc:	0800a5a0 	.word	0x0800a5a0
 8009ce0:	0800a5b1 	.word	0x0800a5b1

08009ce4 <__sflush_r>:
 8009ce4:	898a      	ldrh	r2, [r1, #12]
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	0710      	lsls	r0, r2, #28
 8009cee:	460c      	mov	r4, r1
 8009cf0:	d458      	bmi.n	8009da4 <__sflush_r+0xc0>
 8009cf2:	684b      	ldr	r3, [r1, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc05      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d0f9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	6a21      	ldr	r1, [r4, #32]
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	d032      	beq.n	8009d7e <__sflush_r+0x9a>
 8009d18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	075a      	lsls	r2, r3, #29
 8009d1e:	d505      	bpl.n	8009d2c <__sflush_r+0x48>
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	1ac0      	subs	r0, r0, r3
 8009d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d26:	b10b      	cbz	r3, 8009d2c <__sflush_r+0x48>
 8009d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d2a:	1ac0      	subs	r0, r0, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4602      	mov	r2, r0
 8009d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d32:	6a21      	ldr	r1, [r4, #32]
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b0      	blx	r6
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	d106      	bne.n	8009d4c <__sflush_r+0x68>
 8009d3e:	6829      	ldr	r1, [r5, #0]
 8009d40:	291d      	cmp	r1, #29
 8009d42:	d82b      	bhi.n	8009d9c <__sflush_r+0xb8>
 8009d44:	4a29      	ldr	r2, [pc, #164]	; (8009dec <__sflush_r+0x108>)
 8009d46:	410a      	asrs	r2, r1
 8009d48:	07d6      	lsls	r6, r2, #31
 8009d4a:	d427      	bmi.n	8009d9c <__sflush_r+0xb8>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	6062      	str	r2, [r4, #4]
 8009d50:	04d9      	lsls	r1, r3, #19
 8009d52:	6922      	ldr	r2, [r4, #16]
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	d504      	bpl.n	8009d62 <__sflush_r+0x7e>
 8009d58:	1c42      	adds	r2, r0, #1
 8009d5a:	d101      	bne.n	8009d60 <__sflush_r+0x7c>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b903      	cbnz	r3, 8009d62 <__sflush_r+0x7e>
 8009d60:	6560      	str	r0, [r4, #84]	; 0x54
 8009d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d64:	602f      	str	r7, [r5, #0]
 8009d66:	2900      	cmp	r1, #0
 8009d68:	d0c9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d6e:	4299      	cmp	r1, r3
 8009d70:	d002      	beq.n	8009d78 <__sflush_r+0x94>
 8009d72:	4628      	mov	r0, r5
 8009d74:	f7ff fb3a 	bl	80093ec <_free_r>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d7c:	e7c0      	b.n	8009d00 <__sflush_r+0x1c>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b0      	blx	r6
 8009d84:	1c41      	adds	r1, r0, #1
 8009d86:	d1c8      	bne.n	8009d1a <__sflush_r+0x36>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c5      	beq.n	8009d1a <__sflush_r+0x36>
 8009d8e:	2b1d      	cmp	r3, #29
 8009d90:	d001      	beq.n	8009d96 <__sflush_r+0xb2>
 8009d92:	2b16      	cmp	r3, #22
 8009d94:	d101      	bne.n	8009d9a <__sflush_r+0xb6>
 8009d96:	602f      	str	r7, [r5, #0]
 8009d98:	e7b1      	b.n	8009cfe <__sflush_r+0x1a>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7ad      	b.n	8009d00 <__sflush_r+0x1c>
 8009da4:	690f      	ldr	r7, [r1, #16]
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d0a9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009daa:	0793      	lsls	r3, r2, #30
 8009dac:	680e      	ldr	r6, [r1, #0]
 8009dae:	bf08      	it	eq
 8009db0:	694b      	ldreq	r3, [r1, #20]
 8009db2:	600f      	str	r7, [r1, #0]
 8009db4:	bf18      	it	ne
 8009db6:	2300      	movne	r3, #0
 8009db8:	eba6 0807 	sub.w	r8, r6, r7
 8009dbc:	608b      	str	r3, [r1, #8]
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	dd9c      	ble.n	8009cfe <__sflush_r+0x1a>
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dc8:	4643      	mov	r3, r8
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	dc06      	bgt.n	8009de2 <__sflush_r+0xfe>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e78e      	b.n	8009d00 <__sflush_r+0x1c>
 8009de2:	4407      	add	r7, r0
 8009de4:	eba8 0800 	sub.w	r8, r8, r0
 8009de8:	e7e9      	b.n	8009dbe <__sflush_r+0xda>
 8009dea:	bf00      	nop
 8009dec:	dfbffffe 	.word	0xdfbffffe

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6a03      	ldr	r3, [r0, #32]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f7fe fb7d 	bl	8008504 <__sinit>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f3      	beq.n	8009dfa <_fflush_r+0xa>
 8009e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e14:	07d0      	lsls	r0, r2, #31
 8009e16:	d404      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e18:	0599      	lsls	r1, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e1e:	f7fe fc67 	bl	80086f0 <__retarget_lock_acquire_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	4621      	mov	r1, r4
 8009e26:	f7ff ff5d 	bl	8009ce4 <__sflush_r>
 8009e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e2c:	07da      	lsls	r2, r3, #31
 8009e2e:	4605      	mov	r5, r0
 8009e30:	d4e4      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	059b      	lsls	r3, r3, #22
 8009e36:	d4e1      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3a:	f7fe fc5a 	bl	80086f2 <__retarget_lock_release_recursive>
 8009e3e:	e7dd      	b.n	8009dfc <_fflush_r+0xc>

08009e40 <_sbrk_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_sbrk_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f8 f9d8 	bl	8002200 <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_sbrk_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_sbrk_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	200006e8 	.word	0x200006e8

08009e60 <memcpy>:
 8009e60:	440a      	add	r2, r1
 8009e62:	4291      	cmp	r1, r2
 8009e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e68:	d100      	bne.n	8009e6c <memcpy+0xc>
 8009e6a:	4770      	bx	lr
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e76:	4291      	cmp	r1, r2
 8009e78:	d1f9      	bne.n	8009e6e <memcpy+0xe>
 8009e7a:	bd10      	pop	{r4, pc}

08009e7c <__assert_func>:
 8009e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e7e:	4614      	mov	r4, r2
 8009e80:	461a      	mov	r2, r3
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <__assert_func+0x2c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	68d8      	ldr	r0, [r3, #12]
 8009e8a:	b14c      	cbz	r4, 8009ea0 <__assert_func+0x24>
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <__assert_func+0x30>)
 8009e8e:	9100      	str	r1, [sp, #0]
 8009e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e94:	4906      	ldr	r1, [pc, #24]	; (8009eb0 <__assert_func+0x34>)
 8009e96:	462b      	mov	r3, r5
 8009e98:	f000 f844 	bl	8009f24 <fiprintf>
 8009e9c:	f000 f854 	bl	8009f48 <abort>
 8009ea0:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <__assert_func+0x38>)
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	e7f3      	b.n	8009e8e <__assert_func+0x12>
 8009ea6:	bf00      	nop
 8009ea8:	20000068 	.word	0x20000068
 8009eac:	0800a716 	.word	0x0800a716
 8009eb0:	0800a723 	.word	0x0800a723
 8009eb4:	0800a751 	.word	0x0800a751

08009eb8 <_calloc_r>:
 8009eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eba:	fba1 2402 	umull	r2, r4, r1, r2
 8009ebe:	b94c      	cbnz	r4, 8009ed4 <_calloc_r+0x1c>
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	9201      	str	r2, [sp, #4]
 8009ec4:	f7ff fb06 	bl	80094d4 <_malloc_r>
 8009ec8:	9a01      	ldr	r2, [sp, #4]
 8009eca:	4605      	mov	r5, r0
 8009ecc:	b930      	cbnz	r0, 8009edc <_calloc_r+0x24>
 8009ece:	4628      	mov	r0, r5
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bd30      	pop	{r4, r5, pc}
 8009ed4:	220c      	movs	r2, #12
 8009ed6:	6002      	str	r2, [r0, #0]
 8009ed8:	2500      	movs	r5, #0
 8009eda:	e7f8      	b.n	8009ece <_calloc_r+0x16>
 8009edc:	4621      	mov	r1, r4
 8009ede:	f7fe fb8a 	bl	80085f6 <memset>
 8009ee2:	e7f4      	b.n	8009ece <_calloc_r+0x16>

08009ee4 <__ascii_mbtowc>:
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	b901      	cbnz	r1, 8009eea <__ascii_mbtowc+0x6>
 8009ee8:	a901      	add	r1, sp, #4
 8009eea:	b142      	cbz	r2, 8009efe <__ascii_mbtowc+0x1a>
 8009eec:	b14b      	cbz	r3, 8009f02 <__ascii_mbtowc+0x1e>
 8009eee:	7813      	ldrb	r3, [r2, #0]
 8009ef0:	600b      	str	r3, [r1, #0]
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	1e10      	subs	r0, r2, #0
 8009ef6:	bf18      	it	ne
 8009ef8:	2001      	movne	r0, #1
 8009efa:	b002      	add	sp, #8
 8009efc:	4770      	bx	lr
 8009efe:	4610      	mov	r0, r2
 8009f00:	e7fb      	b.n	8009efa <__ascii_mbtowc+0x16>
 8009f02:	f06f 0001 	mvn.w	r0, #1
 8009f06:	e7f8      	b.n	8009efa <__ascii_mbtowc+0x16>

08009f08 <__ascii_wctomb>:
 8009f08:	b149      	cbz	r1, 8009f1e <__ascii_wctomb+0x16>
 8009f0a:	2aff      	cmp	r2, #255	; 0xff
 8009f0c:	bf85      	ittet	hi
 8009f0e:	238a      	movhi	r3, #138	; 0x8a
 8009f10:	6003      	strhi	r3, [r0, #0]
 8009f12:	700a      	strbls	r2, [r1, #0]
 8009f14:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f18:	bf98      	it	ls
 8009f1a:	2001      	movls	r0, #1
 8009f1c:	4770      	bx	lr
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4770      	bx	lr
	...

08009f24 <fiprintf>:
 8009f24:	b40e      	push	{r1, r2, r3}
 8009f26:	b503      	push	{r0, r1, lr}
 8009f28:	4601      	mov	r1, r0
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	4805      	ldr	r0, [pc, #20]	; (8009f44 <fiprintf+0x20>)
 8009f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f32:	6800      	ldr	r0, [r0, #0]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f000 f837 	bl	8009fa8 <_vfiprintf_r>
 8009f3a:	b002      	add	sp, #8
 8009f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f40:	b003      	add	sp, #12
 8009f42:	4770      	bx	lr
 8009f44:	20000068 	.word	0x20000068

08009f48 <abort>:
 8009f48:	b508      	push	{r3, lr}
 8009f4a:	2006      	movs	r0, #6
 8009f4c:	f000 fa04 	bl	800a358 <raise>
 8009f50:	2001      	movs	r0, #1
 8009f52:	f7f8 f8dd 	bl	8002110 <_exit>

08009f56 <__sfputc_r>:
 8009f56:	6893      	ldr	r3, [r2, #8]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	b410      	push	{r4}
 8009f5e:	6093      	str	r3, [r2, #8]
 8009f60:	da08      	bge.n	8009f74 <__sfputc_r+0x1e>
 8009f62:	6994      	ldr	r4, [r2, #24]
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	db01      	blt.n	8009f6c <__sfputc_r+0x16>
 8009f68:	290a      	cmp	r1, #10
 8009f6a:	d103      	bne.n	8009f74 <__sfputc_r+0x1e>
 8009f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f70:	f000 b934 	b.w	800a1dc <__swbuf_r>
 8009f74:	6813      	ldr	r3, [r2, #0]
 8009f76:	1c58      	adds	r0, r3, #1
 8009f78:	6010      	str	r0, [r2, #0]
 8009f7a:	7019      	strb	r1, [r3, #0]
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <__sfputs_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	4614      	mov	r4, r2
 8009f8c:	18d5      	adds	r5, r2, r3
 8009f8e:	42ac      	cmp	r4, r5
 8009f90:	d101      	bne.n	8009f96 <__sfputs_r+0x12>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e007      	b.n	8009fa6 <__sfputs_r+0x22>
 8009f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9a:	463a      	mov	r2, r7
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7ff ffda 	bl	8009f56 <__sfputc_r>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d1f3      	bne.n	8009f8e <__sfputs_r+0xa>
 8009fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fa8 <_vfiprintf_r>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	460d      	mov	r5, r1
 8009fae:	b09d      	sub	sp, #116	; 0x74
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	4698      	mov	r8, r3
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	b118      	cbz	r0, 8009fc0 <_vfiprintf_r+0x18>
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	b90b      	cbnz	r3, 8009fc0 <_vfiprintf_r+0x18>
 8009fbc:	f7fe faa2 	bl	8008504 <__sinit>
 8009fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_vfiprintf_r+0x2a>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_vfiprintf_r+0x2a>
 8009fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fce:	f7fe fb8f 	bl	80086f0 <__retarget_lock_acquire_recursive>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	071b      	lsls	r3, r3, #28
 8009fd6:	d501      	bpl.n	8009fdc <_vfiprintf_r+0x34>
 8009fd8:	692b      	ldr	r3, [r5, #16]
 8009fda:	b99b      	cbnz	r3, 800a004 <_vfiprintf_r+0x5c>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f93a 	bl	800a258 <__swsetup_r>
 8009fe4:	b170      	cbz	r0, 800a004 <_vfiprintf_r+0x5c>
 8009fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe8:	07dc      	lsls	r4, r3, #31
 8009fea:	d504      	bpl.n	8009ff6 <_vfiprintf_r+0x4e>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	b01d      	add	sp, #116	; 0x74
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	0598      	lsls	r0, r3, #22
 8009ffa:	d4f7      	bmi.n	8009fec <_vfiprintf_r+0x44>
 8009ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffe:	f7fe fb78 	bl	80086f2 <__retarget_lock_release_recursive>
 800a002:	e7f3      	b.n	8009fec <_vfiprintf_r+0x44>
 800a004:	2300      	movs	r3, #0
 800a006:	9309      	str	r3, [sp, #36]	; 0x24
 800a008:	2320      	movs	r3, #32
 800a00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a00e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a012:	2330      	movs	r3, #48	; 0x30
 800a014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1c8 <_vfiprintf_r+0x220>
 800a018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01c:	f04f 0901 	mov.w	r9, #1
 800a020:	4623      	mov	r3, r4
 800a022:	469a      	mov	sl, r3
 800a024:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a028:	b10a      	cbz	r2, 800a02e <_vfiprintf_r+0x86>
 800a02a:	2a25      	cmp	r2, #37	; 0x25
 800a02c:	d1f9      	bne.n	800a022 <_vfiprintf_r+0x7a>
 800a02e:	ebba 0b04 	subs.w	fp, sl, r4
 800a032:	d00b      	beq.n	800a04c <_vfiprintf_r+0xa4>
 800a034:	465b      	mov	r3, fp
 800a036:	4622      	mov	r2, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa2 	bl	8009f84 <__sfputs_r>
 800a040:	3001      	adds	r0, #1
 800a042:	f000 80a9 	beq.w	800a198 <_vfiprintf_r+0x1f0>
 800a046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a048:	445a      	add	r2, fp
 800a04a:	9209      	str	r2, [sp, #36]	; 0x24
 800a04c:	f89a 3000 	ldrb.w	r3, [sl]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 80a1 	beq.w	800a198 <_vfiprintf_r+0x1f0>
 800a056:	2300      	movs	r3, #0
 800a058:	f04f 32ff 	mov.w	r2, #4294967295
 800a05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a060:	f10a 0a01 	add.w	sl, sl, #1
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	9307      	str	r3, [sp, #28]
 800a068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a06c:	931a      	str	r3, [sp, #104]	; 0x68
 800a06e:	4654      	mov	r4, sl
 800a070:	2205      	movs	r2, #5
 800a072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a076:	4854      	ldr	r0, [pc, #336]	; (800a1c8 <_vfiprintf_r+0x220>)
 800a078:	f7f6 f8d2 	bl	8000220 <memchr>
 800a07c:	9a04      	ldr	r2, [sp, #16]
 800a07e:	b9d8      	cbnz	r0, 800a0b8 <_vfiprintf_r+0x110>
 800a080:	06d1      	lsls	r1, r2, #27
 800a082:	bf44      	itt	mi
 800a084:	2320      	movmi	r3, #32
 800a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08a:	0713      	lsls	r3, r2, #28
 800a08c:	bf44      	itt	mi
 800a08e:	232b      	movmi	r3, #43	; 0x2b
 800a090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a094:	f89a 3000 	ldrb.w	r3, [sl]
 800a098:	2b2a      	cmp	r3, #42	; 0x2a
 800a09a:	d015      	beq.n	800a0c8 <_vfiprintf_r+0x120>
 800a09c:	9a07      	ldr	r2, [sp, #28]
 800a09e:	4654      	mov	r4, sl
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f04f 0c0a 	mov.w	ip, #10
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ac:	3b30      	subs	r3, #48	; 0x30
 800a0ae:	2b09      	cmp	r3, #9
 800a0b0:	d94d      	bls.n	800a14e <_vfiprintf_r+0x1a6>
 800a0b2:	b1b0      	cbz	r0, 800a0e2 <_vfiprintf_r+0x13a>
 800a0b4:	9207      	str	r2, [sp, #28]
 800a0b6:	e014      	b.n	800a0e2 <_vfiprintf_r+0x13a>
 800a0b8:	eba0 0308 	sub.w	r3, r0, r8
 800a0bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	46a2      	mov	sl, r4
 800a0c6:	e7d2      	b.n	800a06e <_vfiprintf_r+0xc6>
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	1d19      	adds	r1, r3, #4
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	9103      	str	r1, [sp, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bfbb      	ittet	lt
 800a0d4:	425b      	neglt	r3, r3
 800a0d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0da:	9307      	strge	r3, [sp, #28]
 800a0dc:	9307      	strlt	r3, [sp, #28]
 800a0de:	bfb8      	it	lt
 800a0e0:	9204      	strlt	r2, [sp, #16]
 800a0e2:	7823      	ldrb	r3, [r4, #0]
 800a0e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e6:	d10c      	bne.n	800a102 <_vfiprintf_r+0x15a>
 800a0e8:	7863      	ldrb	r3, [r4, #1]
 800a0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ec:	d134      	bne.n	800a158 <_vfiprintf_r+0x1b0>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	9203      	str	r2, [sp, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	bfb8      	it	lt
 800a0fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0fe:	3402      	adds	r4, #2
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a1d8 <_vfiprintf_r+0x230>
 800a106:	7821      	ldrb	r1, [r4, #0]
 800a108:	2203      	movs	r2, #3
 800a10a:	4650      	mov	r0, sl
 800a10c:	f7f6 f888 	bl	8000220 <memchr>
 800a110:	b138      	cbz	r0, 800a122 <_vfiprintf_r+0x17a>
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	eba0 000a 	sub.w	r0, r0, sl
 800a118:	2240      	movs	r2, #64	; 0x40
 800a11a:	4082      	lsls	r2, r0
 800a11c:	4313      	orrs	r3, r2
 800a11e:	3401      	adds	r4, #1
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4829      	ldr	r0, [pc, #164]	; (800a1cc <_vfiprintf_r+0x224>)
 800a128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a12c:	2206      	movs	r2, #6
 800a12e:	f7f6 f877 	bl	8000220 <memchr>
 800a132:	2800      	cmp	r0, #0
 800a134:	d03f      	beq.n	800a1b6 <_vfiprintf_r+0x20e>
 800a136:	4b26      	ldr	r3, [pc, #152]	; (800a1d0 <_vfiprintf_r+0x228>)
 800a138:	bb1b      	cbnz	r3, 800a182 <_vfiprintf_r+0x1da>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	3307      	adds	r3, #7
 800a13e:	f023 0307 	bic.w	r3, r3, #7
 800a142:	3308      	adds	r3, #8
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	443b      	add	r3, r7
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	e768      	b.n	800a020 <_vfiprintf_r+0x78>
 800a14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a152:	460c      	mov	r4, r1
 800a154:	2001      	movs	r0, #1
 800a156:	e7a6      	b.n	800a0a6 <_vfiprintf_r+0xfe>
 800a158:	2300      	movs	r3, #0
 800a15a:	3401      	adds	r4, #1
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	4619      	mov	r1, r3
 800a160:	f04f 0c0a 	mov.w	ip, #10
 800a164:	4620      	mov	r0, r4
 800a166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a16a:	3a30      	subs	r2, #48	; 0x30
 800a16c:	2a09      	cmp	r2, #9
 800a16e:	d903      	bls.n	800a178 <_vfiprintf_r+0x1d0>
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0c6      	beq.n	800a102 <_vfiprintf_r+0x15a>
 800a174:	9105      	str	r1, [sp, #20]
 800a176:	e7c4      	b.n	800a102 <_vfiprintf_r+0x15a>
 800a178:	fb0c 2101 	mla	r1, ip, r1, r2
 800a17c:	4604      	mov	r4, r0
 800a17e:	2301      	movs	r3, #1
 800a180:	e7f0      	b.n	800a164 <_vfiprintf_r+0x1bc>
 800a182:	ab03      	add	r3, sp, #12
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	462a      	mov	r2, r5
 800a188:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <_vfiprintf_r+0x22c>)
 800a18a:	a904      	add	r1, sp, #16
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7fd fd79 	bl	8007c84 <_printf_float>
 800a192:	4607      	mov	r7, r0
 800a194:	1c78      	adds	r0, r7, #1
 800a196:	d1d6      	bne.n	800a146 <_vfiprintf_r+0x19e>
 800a198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a19a:	07d9      	lsls	r1, r3, #31
 800a19c:	d405      	bmi.n	800a1aa <_vfiprintf_r+0x202>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	059a      	lsls	r2, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_vfiprintf_r+0x202>
 800a1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a6:	f7fe faa4 	bl	80086f2 <__retarget_lock_release_recursive>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	065b      	lsls	r3, r3, #25
 800a1ae:	f53f af1d 	bmi.w	8009fec <_vfiprintf_r+0x44>
 800a1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1b4:	e71c      	b.n	8009ff0 <_vfiprintf_r+0x48>
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <_vfiprintf_r+0x22c>)
 800a1be:	a904      	add	r1, sp, #16
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7fe f803 	bl	80081cc <_printf_i>
 800a1c6:	e7e4      	b.n	800a192 <_vfiprintf_r+0x1ea>
 800a1c8:	0800a853 	.word	0x0800a853
 800a1cc:	0800a85d 	.word	0x0800a85d
 800a1d0:	08007c85 	.word	0x08007c85
 800a1d4:	08009f85 	.word	0x08009f85
 800a1d8:	0800a859 	.word	0x0800a859

0800a1dc <__swbuf_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b118      	cbz	r0, 800a1ee <__swbuf_r+0x12>
 800a1e6:	6a03      	ldr	r3, [r0, #32]
 800a1e8:	b90b      	cbnz	r3, 800a1ee <__swbuf_r+0x12>
 800a1ea:	f7fe f98b 	bl	8008504 <__sinit>
 800a1ee:	69a3      	ldr	r3, [r4, #24]
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	071a      	lsls	r2, r3, #28
 800a1f6:	d525      	bpl.n	800a244 <__swbuf_r+0x68>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	b31b      	cbz	r3, 800a244 <__swbuf_r+0x68>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	6922      	ldr	r2, [r4, #16]
 800a200:	1a98      	subs	r0, r3, r2
 800a202:	6963      	ldr	r3, [r4, #20]
 800a204:	b2f6      	uxtb	r6, r6
 800a206:	4283      	cmp	r3, r0
 800a208:	4637      	mov	r7, r6
 800a20a:	dc04      	bgt.n	800a216 <__swbuf_r+0x3a>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f7ff fdee 	bl	8009df0 <_fflush_r>
 800a214:	b9e0      	cbnz	r0, 800a250 <__swbuf_r+0x74>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	3b01      	subs	r3, #1
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	701e      	strb	r6, [r3, #0]
 800a224:	6962      	ldr	r2, [r4, #20]
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	429a      	cmp	r2, r3
 800a22a:	d004      	beq.n	800a236 <__swbuf_r+0x5a>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	07db      	lsls	r3, r3, #31
 800a230:	d506      	bpl.n	800a240 <__swbuf_r+0x64>
 800a232:	2e0a      	cmp	r6, #10
 800a234:	d104      	bne.n	800a240 <__swbuf_r+0x64>
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f7ff fdd9 	bl	8009df0 <_fflush_r>
 800a23e:	b938      	cbnz	r0, 800a250 <__swbuf_r+0x74>
 800a240:	4638      	mov	r0, r7
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f000 f806 	bl	800a258 <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d0d5      	beq.n	800a1fc <__swbuf_r+0x20>
 800a250:	f04f 37ff 	mov.w	r7, #4294967295
 800a254:	e7f4      	b.n	800a240 <__swbuf_r+0x64>
	...

0800a258 <__swsetup_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <__swsetup_r+0xac>)
 800a25c:	4605      	mov	r5, r0
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	460c      	mov	r4, r1
 800a262:	b118      	cbz	r0, 800a26c <__swsetup_r+0x14>
 800a264:	6a03      	ldr	r3, [r0, #32]
 800a266:	b90b      	cbnz	r3, 800a26c <__swsetup_r+0x14>
 800a268:	f7fe f94c 	bl	8008504 <__sinit>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a272:	0718      	lsls	r0, r3, #28
 800a274:	d422      	bmi.n	800a2bc <__swsetup_r+0x64>
 800a276:	06d9      	lsls	r1, r3, #27
 800a278:	d407      	bmi.n	800a28a <__swsetup_r+0x32>
 800a27a:	2309      	movs	r3, #9
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e034      	b.n	800a2f4 <__swsetup_r+0x9c>
 800a28a:	0758      	lsls	r0, r3, #29
 800a28c:	d512      	bpl.n	800a2b4 <__swsetup_r+0x5c>
 800a28e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a290:	b141      	cbz	r1, 800a2a4 <__swsetup_r+0x4c>
 800a292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a296:	4299      	cmp	r1, r3
 800a298:	d002      	beq.n	800a2a0 <__swsetup_r+0x48>
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff f8a6 	bl	80093ec <_free_r>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6063      	str	r3, [r4, #4]
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0308 	orr.w	r3, r3, #8
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b94b      	cbnz	r3, 800a2d4 <__swsetup_r+0x7c>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ca:	d003      	beq.n	800a2d4 <__swsetup_r+0x7c>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f884 	bl	800a3dc <__smakebuf_r>
 800a2d4:	89a0      	ldrh	r0, [r4, #12]
 800a2d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2da:	f010 0301 	ands.w	r3, r0, #1
 800a2de:	d00a      	beq.n	800a2f6 <__swsetup_r+0x9e>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	6963      	ldr	r3, [r4, #20]
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	61a3      	str	r3, [r4, #24]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	b943      	cbnz	r3, 800a300 <__swsetup_r+0xa8>
 800a2ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f2:	d1c4      	bne.n	800a27e <__swsetup_r+0x26>
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	0781      	lsls	r1, r0, #30
 800a2f8:	bf58      	it	pl
 800a2fa:	6963      	ldrpl	r3, [r4, #20]
 800a2fc:	60a3      	str	r3, [r4, #8]
 800a2fe:	e7f4      	b.n	800a2ea <__swsetup_r+0x92>
 800a300:	2000      	movs	r0, #0
 800a302:	e7f7      	b.n	800a2f4 <__swsetup_r+0x9c>
 800a304:	20000068 	.word	0x20000068

0800a308 <_raise_r>:
 800a308:	291f      	cmp	r1, #31
 800a30a:	b538      	push	{r3, r4, r5, lr}
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	d904      	bls.n	800a31c <_raise_r+0x14>
 800a312:	2316      	movs	r3, #22
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	f04f 30ff 	mov.w	r0, #4294967295
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a31e:	b112      	cbz	r2, 800a326 <_raise_r+0x1e>
 800a320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a324:	b94b      	cbnz	r3, 800a33a <_raise_r+0x32>
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f830 	bl	800a38c <_getpid_r>
 800a32c:	462a      	mov	r2, r5
 800a32e:	4601      	mov	r1, r0
 800a330:	4620      	mov	r0, r4
 800a332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a336:	f000 b817 	b.w	800a368 <_kill_r>
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d00a      	beq.n	800a354 <_raise_r+0x4c>
 800a33e:	1c59      	adds	r1, r3, #1
 800a340:	d103      	bne.n	800a34a <_raise_r+0x42>
 800a342:	2316      	movs	r3, #22
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	2001      	movs	r0, #1
 800a348:	e7e7      	b.n	800a31a <_raise_r+0x12>
 800a34a:	2400      	movs	r4, #0
 800a34c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a350:	4628      	mov	r0, r5
 800a352:	4798      	blx	r3
 800a354:	2000      	movs	r0, #0
 800a356:	e7e0      	b.n	800a31a <_raise_r+0x12>

0800a358 <raise>:
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <raise+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f7ff bfd3 	b.w	800a308 <_raise_r>
 800a362:	bf00      	nop
 800a364:	20000068 	.word	0x20000068

0800a368 <_kill_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_kill_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7f7 febb 	bl	80020f0 <_kill>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_kill_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_kill_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	200006e8 	.word	0x200006e8

0800a38c <_getpid_r>:
 800a38c:	f7f7 bea8 	b.w	80020e0 <_getpid>

0800a390 <__swhatbuf_r>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	460c      	mov	r4, r1
 800a394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a398:	2900      	cmp	r1, #0
 800a39a:	b096      	sub	sp, #88	; 0x58
 800a39c:	4615      	mov	r5, r2
 800a39e:	461e      	mov	r6, r3
 800a3a0:	da0d      	bge.n	800a3be <__swhatbuf_r+0x2e>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3a8:	f04f 0100 	mov.w	r1, #0
 800a3ac:	bf0c      	ite	eq
 800a3ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3b2:	2340      	movne	r3, #64	; 0x40
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	6031      	str	r1, [r6, #0]
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	b016      	add	sp, #88	; 0x58
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f000 f848 	bl	800a454 <_fstat_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	dbec      	blt.n	800a3a2 <__swhatbuf_r+0x12>
 800a3c8:	9901      	ldr	r1, [sp, #4]
 800a3ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3d2:	4259      	negs	r1, r3
 800a3d4:	4159      	adcs	r1, r3
 800a3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3da:	e7eb      	b.n	800a3b4 <__swhatbuf_r+0x24>

0800a3dc <__smakebuf_r>:
 800a3dc:	898b      	ldrh	r3, [r1, #12]
 800a3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3e0:	079d      	lsls	r5, r3, #30
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	d507      	bpl.n	800a3f8 <__smakebuf_r+0x1c>
 800a3e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	6163      	str	r3, [r4, #20]
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	ab01      	add	r3, sp, #4
 800a3fa:	466a      	mov	r2, sp
 800a3fc:	f7ff ffc8 	bl	800a390 <__swhatbuf_r>
 800a400:	9900      	ldr	r1, [sp, #0]
 800a402:	4605      	mov	r5, r0
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff f865 	bl	80094d4 <_malloc_r>
 800a40a:	b948      	cbnz	r0, 800a420 <__smakebuf_r+0x44>
 800a40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a410:	059a      	lsls	r2, r3, #22
 800a412:	d4ef      	bmi.n	800a3f4 <__smakebuf_r+0x18>
 800a414:	f023 0303 	bic.w	r3, r3, #3
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	e7e3      	b.n	800a3e8 <__smakebuf_r+0xc>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	6020      	str	r0, [r4, #0]
 800a424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	9b00      	ldr	r3, [sp, #0]
 800a42c:	6163      	str	r3, [r4, #20]
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	6120      	str	r0, [r4, #16]
 800a432:	b15b      	cbz	r3, 800a44c <__smakebuf_r+0x70>
 800a434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a438:	4630      	mov	r0, r6
 800a43a:	f000 f81d 	bl	800a478 <_isatty_r>
 800a43e:	b128      	cbz	r0, 800a44c <__smakebuf_r+0x70>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f023 0303 	bic.w	r3, r3, #3
 800a446:	f043 0301 	orr.w	r3, r3, #1
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	431d      	orrs	r5, r3
 800a450:	81a5      	strh	r5, [r4, #12]
 800a452:	e7cf      	b.n	800a3f4 <__smakebuf_r+0x18>

0800a454 <_fstat_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	; (800a474 <_fstat_r+0x20>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	602b      	str	r3, [r5, #0]
 800a462:	f7f7 fea4 	bl	80021ae <_fstat>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d102      	bne.n	800a470 <_fstat_r+0x1c>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	b103      	cbz	r3, 800a470 <_fstat_r+0x1c>
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	bf00      	nop
 800a474:	200006e8 	.word	0x200006e8

0800a478 <_isatty_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d06      	ldr	r5, [pc, #24]	; (800a494 <_isatty_r+0x1c>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	602b      	str	r3, [r5, #0]
 800a484:	f7f7 fea3 	bl	80021ce <_isatty>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_isatty_r+0x1a>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_isatty_r+0x1a>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	200006e8 	.word	0x200006e8

0800a498 <_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_fini>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr
