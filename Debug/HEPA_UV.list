
HEPA_UV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800bc60  0800bc60  0001bc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c0  0800c0c0  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c8  0800c0c8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800c0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000208  0800c2d8  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800c2d8  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021415  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380c  00000000  00000000  00041690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be0  00000000  00000000  00044ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c9  00000000  00000000  00046a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002723d  00000000  00000000  00048049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024857  00000000  00000000  0006f286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2d10  00000000  00000000  00093add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008bc4  00000000  00000000  001867f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0018f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc44 	.word	0x0800bc44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800bc44 	.word	0x0800bc44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <bytestowrite>:

uint8_t line[] = "\r\n";

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	4613      	mov	r3, r2
 8000f02:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;	//if size of data to be sent can fit on the page, transmit all data at once
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f0c:	dc01      	bgt.n	8000f12 <bytestowrite+0x1e>
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	e003      	b.n	8000f1a <bytestowrite+0x26>
	else return PAGE_SIZE-offset;				//if size of data can't fit on a single page, transmit enough data to fill one page
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f18:	b29b      	uxth	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <EEPROM_Write>:

/* Write EEPROM */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	81fb      	strh	r3, [r7, #14]
 8000f36:	460b      	mov	r3, r1
 8000f38:	81bb      	strh	r3, [r7, #12]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
// Find out the number of bit, where the page addressing starts
// Page size = 64
// log(64)/log(2) = 6 => 6 last bits of the two address bytes are reserved for byte address (0-63 range, 63 = 111111)
// The page addressing starts at bit A6
// We use 8 next bits (A6 to A13) for page bytes (0-249 range, 249 = 1111 1001)
int paddrposition = log(PAGE_SIZE)/log(2);
 8000f3e:	2306      	movs	r3, #6
 8000f40:	61fb      	str	r3, [r7, #28]

// calculate the start page and the end page
uint16_t startPage = page;
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	84fb      	strh	r3, [r7, #38]	; 0x26
uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	da00      	bge.n	8000f52 <EEPROM_Write+0x2a>
 8000f50:	333f      	adds	r3, #63	; 0x3f
 8000f52:	119b      	asrs	r3, r3, #6
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	4413      	add	r3, r2
 8000f5a:	837b      	strh	r3, [r7, #26]

// number of pages to be written
uint16_t numofpages = (endPage-startPage) + 1;
 8000f5c:	8b7a      	ldrh	r2, [r7, #26]
 8000f5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3301      	adds	r3, #1
 8000f66:	833b      	strh	r3, [r7, #24]
uint16_t pos=0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	84bb      	strh	r3, [r7, #36]	; 0x24

// write the data
for (int i=0; i<numofpages; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	e039      	b.n	8000fe6 <EEPROM_Write+0xbe>
		 * MemAddress contains the start page
		 * It needs to be shifted by 6, so that the start page info is correctly starting at bit A6 in the two address bytes that
		 * will be sent to EEPROM
		 * offset relates to the offset inside the start page
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000f72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000f86:	89ba      	ldrh	r2, [r7, #12]
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ffb1 	bl	8000ef4 <bytestowrite>
 8000f92:	4603      	mov	r3, r0
 8000f94:	82bb      	strh	r3, [r7, #20]

		if(HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000) != HAL_OK)
 8000f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	8af9      	ldrh	r1, [r7, #22]
 8000f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa2:	9202      	str	r2, [sp, #8]
 8000fa4:	8aba      	ldrh	r2, [r7, #20]
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2302      	movs	r3, #2
 8000fac:	460a      	mov	r2, r1
 8000fae:	21a0      	movs	r1, #160	; 0xa0
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <EEPROM_Write+0xd0>)
 8000fb2:	f003 fdb9 	bl	8004b28 <HAL_I2C_Mem_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <EEPROM_Write+0x98>
				{
					Error_Handler();
 8000fbc:	f000 fffc 	bl	8001fb8 <Error_Handler>
				}// write the data to the EEPROM

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000fc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   	// since we will be writing to a new page, so offset will be 0
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	8abb      	ldrh	r3, [r7, #20]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fd4:	8abb      	ldrh	r3, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f001 fc9e 	bl	800291c <HAL_Delay>
for (int i=0; i<numofpages; i++)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
 8000fe6:	8b3b      	ldrh	r3, [r7, #24]
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbc1      	blt.n	8000f72 <EEPROM_Write+0x4a>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000364 	.word	0x20000364

08000ffc <EEPROM_Read>:

/* Read EEPROM */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af04      	add	r7, sp, #16
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	461a      	mov	r2, r3
 8001006:	4603      	mov	r3, r0
 8001008:	81fb      	strh	r3, [r7, #14]
 800100a:	460b      	mov	r3, r1
 800100c:	81bb      	strh	r3, [r7, #12]
 800100e:	4613      	mov	r3, r2
 8001010:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8001012:	2306      	movs	r3, #6
 8001014:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	2b00      	cmp	r3, #0
 8001022:	da00      	bge.n	8001026 <EEPROM_Read+0x2a>
 8001024:	333f      	adds	r3, #63	; 0x3f
 8001026:	119b      	asrs	r3, r3, #6
 8001028:	b29a      	uxth	r2, r3
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	4413      	add	r3, r2
 800102e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8001030:	8b7a      	ldrh	r2, [r7, #26]
 8001032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	3301      	adds	r3, #1
 800103a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800103c:	2300      	movs	r3, #0
 800103e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	e031      	b.n	80010aa <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8001046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	b21a      	sxth	r2, r3
 8001050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800105a:	89ba      	ldrh	r2, [r7, #12]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff47 	bl	8000ef4 <bytestowrite>
 8001066:	4603      	mov	r3, r0
 8001068:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800106a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	4413      	add	r3, r2
 8001070:	8af9      	ldrh	r1, [r7, #22]
 8001072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001076:	9202      	str	r2, [sp, #8]
 8001078:	8aba      	ldrh	r2, [r7, #20]
 800107a:	9201      	str	r2, [sp, #4]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	460a      	mov	r2, r1
 8001082:	21a0      	movs	r1, #160	; 0xa0
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <EEPROM_Read+0xe4>)
 8001086:	f003 fe63 	bl	8004d50 <HAL_I2C_Mem_Read>
		startPage += 1;
 800108a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108c:	3301      	adds	r3, #1
 800108e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8001090:	2300      	movs	r3, #0
 8001092:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	8abb      	ldrh	r3, [r7, #20]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800109c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800109e:	8abb      	ldrh	r3, [r7, #20]
 80010a0:	4413      	add	r3, r2
 80010a2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	3301      	adds	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	8b3b      	ldrh	r3, [r7, #24]
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbc9      	blt.n	8001046 <EEPROM_Read+0x4a>

	}
	HAL_UART_Transmit(&hlpuart1, data, strlen((const char*)(data)), HAL_MAX_DELAY);
 80010b2:	68b8      	ldr	r0, [r7, #8]
 80010b4:	f7ff f904 	bl	80002c0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <EEPROM_Read+0xe8>)
 80010c4:	f007 f8c4 	bl	8008250 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, line, sizeof(line), HAL_MAX_DELAY);
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2203      	movs	r2, #3
 80010ce:	4906      	ldr	r1, [pc, #24]	; (80010e8 <EEPROM_Read+0xec>)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <EEPROM_Read+0xe8>)
 80010d2:	f007 f8bd 	bl	8008250 <HAL_UART_Transmit>
	//HAL_Delay(1000);
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000364 	.word	0x20000364
 80010e4:	200003fc 	.word	0x200003fc
 80010e8:	20000000 	.word	0x20000000

080010ec <EEPROM_PageErase>:

/* Erase Page */
void EEPROM_PageErase (uint16_t page)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b098      	sub	sp, #96	; 0x60
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80010f6:	2306      	movs	r3, #6
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	21ff      	movs	r1, #255	; 0xff
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fc9f 	bl	8009a52 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8001114:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2340      	movs	r3, #64	; 0x40
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	21a0      	movs	r1, #160	; 0xa0
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <EEPROM_PageErase+0x54>)
 800112e:	f003 fcfb 	bl	8004b28 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 8001132:	2005      	movs	r0, #5
 8001134:	f001 fbf2 	bl	800291c <HAL_Delay>
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	; 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000364 	.word	0x20000364

08001144 <test_can_bus>:

//char msg[100];

/* Can bus test */
void test_can_bus()
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af06      	add	r7, sp, #24
/* Receive data */
if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4862      	ldr	r0, [pc, #392]	; (80012d8 <test_can_bus+0x194>)
 800114e:	f003 f993 	bl	8004478 <HAL_FDCAN_GetRxFifoFillLevel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80ba 	beq.w	80012ce <test_can_bus+0x18a>
{
	HAL_UART_Transmit(&hlpuart1, "Received:", 9, HAL_MAX_DELAY);
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	2209      	movs	r2, #9
 8001160:	495e      	ldr	r1, [pc, #376]	; (80012dc <test_can_bus+0x198>)
 8001162:	485f      	ldr	r0, [pc, #380]	; (80012e0 <test_can_bus+0x19c>)
 8001164:	f007 f874 	bl	8008250 <HAL_UART_Transmit>
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8001168:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <test_can_bus+0x1a0>)
 800116a:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <test_can_bus+0x1a4>)
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	485a      	ldr	r0, [pc, #360]	; (80012d8 <test_can_bus+0x194>)
 8001170:	f003 f8a8 	bl	80042c4 <HAL_FDCAN_GetRxMessage>
	HAL_Delay(500);
 8001174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001178:	f001 fbd0 	bl	800291c <HAL_Delay>
	sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <test_can_bus+0x1a0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461e      	mov	r6, r3
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <test_can_bus+0x1a0>)
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	469c      	mov	ip, r3
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <test_can_bus+0x1a0>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	461a      	mov	r2, r3
 800118e:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <test_can_bus+0x1a0>)
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	4619      	mov	r1, r3
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <test_can_bus+0x1a0>)
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <test_can_bus+0x1a0>)
 800119c:	795b      	ldrb	r3, [r3, #5]
 800119e:	461c      	mov	r4, r3
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <test_can_bus+0x1a0>)
 80011a2:	799b      	ldrb	r3, [r3, #6]
 80011a4:	461d      	mov	r5, r3
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <test_can_bus+0x1a0>)
 80011a8:	79db      	ldrb	r3, [r3, #7]
 80011aa:	9305      	str	r3, [sp, #20]
 80011ac:	9504      	str	r5, [sp, #16]
 80011ae:	9403      	str	r4, [sp, #12]
 80011b0:	9002      	str	r0, [sp, #8]
 80011b2:	9101      	str	r1, [sp, #4]
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	4663      	mov	r3, ip
 80011b8:	4632      	mov	r2, r6
 80011ba:	494c      	ldr	r1, [pc, #304]	; (80012ec <test_can_bus+0x1a8>)
 80011bc:	484c      	ldr	r0, [pc, #304]	; (80012f0 <test_can_bus+0x1ac>)
 80011be:	f008 fbe5 	bl	800998c <siprintf>

	/* Prepare received data to be sent back */
	counter = 0;
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <test_can_bus+0x1b0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	e019      	b.n	8001202 <test_can_bus+0xbe>
	{
		/* AUX 1 increase by 1 */
		if (RxData[i] == 0)
 80011ce:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <test_can_bus+0x1a0>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <test_can_bus+0xa2>
		{
			counter++;
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <test_can_bus+0x1b0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <test_can_bus+0x1b0>)
 80011e4:	701a      	strb	r2, [r3, #0]
		}
		TxData[i]= RxData[i]+1;
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <test_can_bus+0x1a0>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <test_can_bus+0x1b4>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	460a      	mov	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b07      	cmp	r3, #7
 8001206:	dde2      	ble.n	80011ce <test_can_bus+0x8a>
		/* AUX 2 increase by 2 */
		//TxData[i]= RxData[i] + 2;
	}
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)(debug_str)), HAL_MAX_DELAY);
 8001208:	4839      	ldr	r0, [pc, #228]	; (80012f0 <test_can_bus+0x1ac>)
 800120a:	f7ff f859 	bl	80002c0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	4936      	ldr	r1, [pc, #216]	; (80012f0 <test_can_bus+0x1ac>)
 8001218:	4831      	ldr	r0, [pc, #196]	; (80012e0 <test_can_bus+0x19c>)
 800121a:	f007 f819 	bl	8008250 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, "Sent:    ", 9, HAL_MAX_DELAY);
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	2209      	movs	r2, #9
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <test_can_bus+0x1b8>)
 8001226:	482e      	ldr	r0, [pc, #184]	; (80012e0 <test_can_bus+0x19c>)
 8001228:	f007 f812 	bl	8008250 <HAL_UART_Transmit>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 800122c:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <test_can_bus+0x1b4>)
 800122e:	4934      	ldr	r1, [pc, #208]	; (8001300 <test_can_bus+0x1bc>)
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <test_can_bus+0x194>)
 8001232:	f003 f803 	bl	800423c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <test_can_bus+0xfc>
		{
			// Transmission request Error
			  Error_Handler();
 800123c:	f000 febc 	bl	8001fb8 <Error_Handler>
		}
		HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f001 fb6a 	bl	800291c <HAL_Delay>
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <test_can_bus+0x1b4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461e      	mov	r6, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <test_can_bus+0x1b4>)
 8001250:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001252:	469c      	mov	ip, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <test_can_bus+0x1b4>)
 8001256:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001258:	461a      	mov	r2, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <test_can_bus+0x1b4>)
 800125c:	78db      	ldrb	r3, [r3, #3]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 800125e:	4619      	mov	r1, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <test_can_bus+0x1b4>)
 8001262:	791b      	ldrb	r3, [r3, #4]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001264:	4618      	mov	r0, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <test_can_bus+0x1b4>)
 8001268:	795b      	ldrb	r3, [r3, #5]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 800126a:	461c      	mov	r4, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <test_can_bus+0x1b4>)
 800126e:	799b      	ldrb	r3, [r3, #6]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001270:	461d      	mov	r5, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <test_can_bus+0x1b4>)
 8001274:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001276:	9305      	str	r3, [sp, #20]
 8001278:	9504      	str	r5, [sp, #16]
 800127a:	9403      	str	r4, [sp, #12]
 800127c:	9002      	str	r0, [sp, #8]
 800127e:	9101      	str	r1, [sp, #4]
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	4663      	mov	r3, ip
 8001284:	4632      	mov	r2, r6
 8001286:	4919      	ldr	r1, [pc, #100]	; (80012ec <test_can_bus+0x1a8>)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <test_can_bus+0x1ac>)
 800128a:	f008 fb7f 	bl	800998c <siprintf>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)debug_str), HAL_MAX_DELAY);
 800128e:	4818      	ldr	r0, [pc, #96]	; (80012f0 <test_can_bus+0x1ac>)
 8001290:	f7ff f816 	bl	80002c0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <test_can_bus+0x1ac>)
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <test_can_bus+0x19c>)
 80012a0:	f006 ffd6 	bl	8008250 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, NL, sizeof(NL), HAL_MAX_DELAY);
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	4916      	ldr	r1, [pc, #88]	; (8001304 <test_can_bus+0x1c0>)
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <test_can_bus+0x19c>)
 80012ae:	f006 ffcf 	bl	8008250 <HAL_UART_Transmit>

		if (counter == 8)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <test_can_bus+0x1b0>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d103      	bne.n	80012c2 <test_can_bus+0x17e>
		{
			EEPROM_CAN_Msg = 1;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <test_can_bus+0x1c4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e002      	b.n	80012c8 <test_can_bus+0x184>
		}
		else EEPROM_CAN_Msg = 0;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <test_can_bus+0x1c4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <test_can_bus+0x1b0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	}
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000300 	.word	0x20000300
 80012dc:	0800bc60 	.word	0x0800bc60
 80012e0:	200003fc 	.word	0x200003fc
 80012e4:	200005a8 	.word	0x200005a8
 80012e8:	200005b8 	.word	0x200005b8
 80012ec:	0800bc6c 	.word	0x0800bc6c
 80012f0:	20000588 	.word	0x20000588
 80012f4:	20000224 	.word	0x20000224
 80012f8:	200005b0 	.word	0x200005b0
 80012fc:	0800bc98 	.word	0x0800bc98
 8001300:	200005e0 	.word	0x200005e0
 8001304:	20000004 	.word	0x20000004
 8001308:	20000604 	.word	0x20000604

0800130c <send_msg>:

void send_msg(uint8_t* msg, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<len; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00b      	b.n	8001334 <send_msg+0x28>
		{
			TxData[i] = msg[i];
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	7819      	ldrb	r1, [r3, #0]
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <send_msg+0x54>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<len; i++)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbef      	blt.n	800131c <send_msg+0x10>
		}
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <send_msg+0x54>)
 800133e:	4909      	ldr	r1, [pc, #36]	; (8001364 <send_msg+0x58>)
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <send_msg+0x5c>)
 8001342:	f002 ff7b 	bl	800423c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <send_msg+0x44>
			{
				// Transmission request Error
				  Error_Handler();
 800134c:	f000 fe34 	bl	8001fb8 <Error_Handler>
			}
	HAL_Delay(500);
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f001 fae2 	bl	800291c <HAL_Delay>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200005b0 	.word	0x200005b0
 8001364:	200005e0 	.word	0x200005e0
 8001368:	20000300 	.word	0x20000300

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f001 fa62 	bl	800283a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f913 	bl	80015a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 fd59 	bl	8001e30 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 800137e:	f000 fa67 	bl	8001850 <_ZL14MX_FDCAN1_Initv>
  MX_I2C2_Init();
 8001382:	f000 fafb 	bl	800197c <_ZL12MX_I2C2_Initv>
  MX_LPUART1_UART_Init();
 8001386:	f000 fb95 	bl	8001ab4 <_ZL20MX_LPUART1_UART_Initv>
  MX_TIM2_Init();
 800138a:	f000 fc33 	bl	8001bf4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800138e:	f000 fcbb 	bl	8001d08 <_ZL12MX_TIM3_Initv>
  MX_ADC1_Init();
 8001392:	f000 f959 	bl	8001648 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8001396:	f000 f9e5 	bl	8001764 <_ZL12MX_ADC2_Initv>
  MX_I2C3_Init();
 800139a:	f000 fb3d 	bl	8001a18 <_ZL12MX_I2C3_Initv>
  MX_SPI2_Init();
 800139e:	f000 fbe7 	bl	8001b70 <_ZL12MX_SPI2_Initv>
//  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  //HAL_GPIO_WritePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin, GPIO_PIN_SET);

  //HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);

  EEPROM_CAN_Msg = 0;
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <main+0x210>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_DRIVE_GPIO_Port, LED_DRIVE_Pin);
 80013a8:	2102      	movs	r1, #2
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f003 fb11 	bl	80049d4 <HAL_GPIO_TogglePin>
	  /* LED Blink */
	  if (EEPROM_CAN_Msg == 1)
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <main+0x210>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d153      	bne.n	8001462 <main+0xf6>
	  {
	  	//HAL_GPIO_TogglePin(LED_DRIVE_GPIO_Port, LED_DRIVE_Pin);

		  for (int i = 0; i < 8; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e016      	b.n	80013ee <main+0x82>
		  {
			  dataWrite[i] = (uint8_t)(rand() % 20);
 80013c0:	f007 fd90 	bl	8008ee4 <rand>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <main+0x214>)
 80013c8:	fb83 1302 	smull	r1, r3, r3, r2
 80013cc:	10d9      	asrs	r1, r3, #3
 80013ce:	17d3      	asrs	r3, r2, #31
 80013d0:	1ac9      	subs	r1, r1, r3
 80013d2:	460b      	mov	r3, r1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	1ad1      	subs	r1, r2, r3
 80013dc:	b2c9      	uxtb	r1, r1
 80013de:	4a69      	ldr	r2, [pc, #420]	; (8001584 <main+0x218>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	460a      	mov	r2, r1
 80013e6:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 8; i++)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	dde5      	ble.n	80013c0 <main+0x54>
		  }
		  HAL_UART_Transmit(&hlpuart1, dataWrite, strlen((const char*)(dataWrite)), HAL_MAX_DELAY);
 80013f4:	4863      	ldr	r0, [pc, #396]	; (8001584 <main+0x218>)
 80013f6:	f7fe ff63 	bl	80002c0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	4960      	ldr	r1, [pc, #384]	; (8001584 <main+0x218>)
 8001404:	4860      	ldr	r0, [pc, #384]	; (8001588 <main+0x21c>)
 8001406:	f006 ff23 	bl	8008250 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&hlpuart1, line1, sizeof(line1), HAL_MAX_DELAY);
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2203      	movs	r2, #3
 8001410:	495e      	ldr	r1, [pc, #376]	; (800158c <main+0x220>)
 8001412:	485d      	ldr	r0, [pc, #372]	; (8001588 <main+0x21c>)
 8001414:	f006 ff1c 	bl	8008250 <HAL_UART_Transmit>
		  /* Write EEPROM */
		  //EEPROM_Write(0, 0, dataw1, strlen((char *)dataw1));
		  send_msg(dataWrite, 8);
 8001418:	2108      	movs	r1, #8
 800141a:	485a      	ldr	r0, [pc, #360]	; (8001584 <main+0x218>)
 800141c:	f7ff ff76 	bl	800130c <send_msg>
		  EEPROM_Write(0, 0, dataWrite, sizeof(dataWrite));
 8001420:	2308      	movs	r3, #8
 8001422:	4a58      	ldr	r2, [pc, #352]	; (8001584 <main+0x218>)
 8001424:	2100      	movs	r1, #0
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fd7e 	bl	8000f28 <EEPROM_Write>

		  //EEPROM_Write(1, 0, dataw2, strlen((char *)dataw2));

		  /* Read EEPROM */
		  EEPROM_Read(0, 0, datar1, 8);
 800142c:	2308      	movs	r3, #8
 800142e:	4a58      	ldr	r2, [pc, #352]	; (8001590 <main+0x224>)
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fde2 	bl	8000ffc <EEPROM_Read>
		  send_msg(datar1, 8);
 8001438:	2108      	movs	r1, #8
 800143a:	4855      	ldr	r0, [pc, #340]	; (8001590 <main+0x224>)
 800143c:	f7ff ff66 	bl	800130c <send_msg>
		  //EEPROM_Read(1, 0, datar2, 50);

		  EEPROM_CAN_Msg = 0;
 8001440:	4b4e      	ldr	r3, [pc, #312]	; (800157c <main+0x210>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]

		  /* Erase EEPROM */
		  for (uint8_t i=0; i<251; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	70fb      	strb	r3, [r7, #3]
 800144a:	e007      	b.n	800145c <main+0xf0>
		  {
			  EEPROM_PageErase (i);
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe4b 	bl	80010ec <EEPROM_PageErase>
		  for (uint8_t i=0; i<251; i++)
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	3301      	adds	r3, #1
 800145a:	70fb      	strb	r3, [r7, #3]
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2bfa      	cmp	r3, #250	; 0xfa
 8001460:	d9f4      	bls.n	800144c <main+0xe0>
		  }
		  //HAL_Delay(100);
	  }
	  /* CAN FD Test */
	  test_can_bus();
 8001462:	f7ff fe6f 	bl	8001144 <test_can_bus>
	  //send_msg(msg, 4);
	  //can_listen();



	  if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	484a      	ldr	r0, [pc, #296]	; (8001594 <main+0x228>)
 800146a:	f003 fa83 	bl	8004974 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00e      	beq.n	800149c <main+0x130>
	  {
		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2110      	movs	r1, #16
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f003 fa8d 	bl	80049a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2120      	movs	r1, #32
 800148e:	4841      	ldr	r0, [pc, #260]	; (8001594 <main+0x228>)
 8001490:	f003 fa88 	bl	80049a4 <HAL_GPIO_WritePin>
		  ready = 1;
 8001494:	4b40      	ldr	r3, [pc, #256]	; (8001598 <main+0x22c>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e01e      	b.n	80014da <main+0x16e>
	  }
	  else if (HAL_GPIO_ReadPin(POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	483c      	ldr	r0, [pc, #240]	; (8001594 <main+0x228>)
 80014a2:	f003 fa67 	bl	8004974 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00e      	beq.n	80014d4 <main+0x168>
	  	  {
	  		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2110      	movs	r1, #16
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f003 fa71 	bl	80049a4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2120      	movs	r1, #32
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <main+0x228>)
 80014c8:	f003 fa6c 	bl	80049a4 <HAL_GPIO_WritePin>
	  		  ready = 1;
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <main+0x22c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e002      	b.n	80014da <main+0x16e>
	  	  }
	  else ready = 0;
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x22c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

	   /*Test UV ON/OFF Pin*/
	  if (ready == 0)
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <main+0x22c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d12c      	bne.n	800153c <main+0x1d0>
	  {
		  if (!HAL_GPIO_ReadPin(UV_NO_GPIO_Port, UV_NO_Pin))
 80014e2:	2104      	movs	r1, #4
 80014e4:	482b      	ldr	r0, [pc, #172]	; (8001594 <main+0x228>)
 80014e6:	f003 fa45 	bl	8004974 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d020      	beq.n	800153c <main+0x1d0>
	    {
	  	  HAL_GPIO_TogglePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin);
 80014fa:	2110      	movs	r1, #16
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f003 fa68 	bl	80049d4 <HAL_GPIO_TogglePin>
	  	  if(!HAL_GPIO_ReadPin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin))
 8001504:	2110      	movs	r1, #16
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f003 fa33 	bl	8004974 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <main+0x1be>
	  	  {
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2120      	movs	r1, #32
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <main+0x228>)
 8001524:	f003 fa3e 	bl	80049a4 <HAL_GPIO_WritePin>
 8001528:	e004      	b.n	8001534 <main+0x1c8>
	  	  }
	  	  else HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2120      	movs	r1, #32
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <main+0x228>)
 8001530:	f003 fa38 	bl	80049a4 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001538:	f001 f9f0 	bl	800291c <HAL_Delay>
	    }
	  }

	  /* Test HEPA ON/OFF Pin */
		if (!HAL_GPIO_ReadPin(HEPA_NO_GPIO_Port, HEPA_NO_Pin))
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <main+0x230>)
 8001542:	f003 fa17 	bl	8004974 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00d      	beq.n	8001572 <main+0x206>
		{
		  HAL_GPIO_TogglePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin);
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f003 fa3a 	bl	80049d4 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(HEPA_B_CTRL_GPIO_Port, HEPA_B_CTRL_Pin);
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <main+0x230>)
 8001566:	f003 fa35 	bl	80049d4 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800156a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800156e:	f001 f9d5 	bl	800291c <HAL_Delay>
		}
	   HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f001 f9d2 	bl	800291c <HAL_Delay>
//	    HEPALEDTest();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001578:	e716      	b.n	80013a8 <main+0x3c>
 800157a:	bf00      	nop
 800157c:	20000604 	.word	0x20000604
 8001580:	66666667 	.word	0x66666667
 8001584:	20000608 	.word	0x20000608
 8001588:	200003fc 	.word	0x200003fc
 800158c:	20000030 	.word	0x20000030
 8001590:	20000610 	.word	0x20000610
 8001594:	48000800 	.word	0x48000800
 8001598:	2000002c 	.word	0x2000002c
 800159c:	48000400 	.word	0x48000400

080015a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	2238      	movs	r2, #56	; 0x38
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 fa4f 	bl	8009a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015c6:	f004 f81b 	bl	8005600 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d8:	2303      	movs	r3, #3
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015dc:	2301      	movs	r3, #1
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80015e0:	2308      	movs	r3, #8
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 f8b7 	bl	8005768 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_Z18SystemClock_Configv+0x6e>
  {
    Error_Handler();
 800160a:	f000 fcd5 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001612:	2303      	movs	r3, #3
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f004 fbb6 	bl	8005d98 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 800163c:	f000 fcbc 	bl	8001fb8 <Error_Handler>
  }
}
 8001640:	bf00      	nop
 8001642:	3750      	adds	r7, #80	; 0x50
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2220      	movs	r2, #32
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f008 f9f6 	bl	8009a52 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800166c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167c:	4b37      	ldr	r3, [pc, #220]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001690:	2204      	movs	r2, #4
 8001692:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001696:	2200      	movs	r2, #0
 8001698:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 800169c:	2200      	movs	r2, #0
 800169e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d0:	4822      	ldr	r0, [pc, #136]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016d2:	f001 fb45 	bl	8002d60 <HAL_ADC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80016e6:	f000 fc67 	bl	8001fb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4819      	ldr	r0, [pc, #100]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 80016f6:	f002 fa27 	bl	8003b48 <HAL_ADCEx_MultiModeConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800170a:	f000 fc55 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <_ZL12MX_ADC1_Initv+0x118>)
 8001710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001712:	2306      	movs	r3, #6
 8001714:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001716:	2302      	movs	r3, #2
 8001718:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800171a:	237f      	movs	r3, #127	; 0x7f
 800171c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800171e:	2304      	movs	r3, #4
 8001720:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 800172c:	f001 fccc 	bl	80030c8 <HAL_ADC_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8001740:	f000 fc3a 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001744:	217f      	movs	r1, #127	; 0x7f
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <_ZL12MX_ADC1_Initv+0x114>)
 8001748:	f002 f99c 	bl	8003a84 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 800174c:	200a      	movs	r0, #10
 800174e:	f001 f8e5 	bl	800291c <HAL_Delay>

  /* USER CODE END ADC1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000228 	.word	0x20000228
 8001760:	19200040 	.word	0x19200040

08001764 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f008 f96e 	bl	8009a52 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001776:	4b33      	ldr	r3, [pc, #204]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <_ZL12MX_ADC2_Initv+0xe4>)
 800177a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 800177e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001782:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 800179e:	2204      	movs	r2, #4
 80017a0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017de:	4819      	ldr	r0, [pc, #100]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 80017e0:	f001 fabe 	bl	8002d60 <HAL_ADC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 80017f4:	f000 fbe0 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <_ZL12MX_ADC2_Initv+0xe8>)
 80017fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fc:	2306      	movs	r3, #6
 80017fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001804:	237f      	movs	r3, #127	; 0x7f
 8001806:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001808:	2304      	movs	r3, #4
 800180a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001816:	f001 fc57 	bl	80030c8 <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800182a:	f000 fbc5 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800182e:	217f      	movs	r1, #127	; 0x7f
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <_ZL12MX_ADC2_Initv+0xe0>)
 8001832:	f002 f927 	bl	8003a84 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f001 f870 	bl	800291c <HAL_Delay>

  /* USER CODE END ADC2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000294 	.word	0x20000294
 8001848:	50000100 	.word	0x50000100
 800184c:	1d500080 	.word	0x1d500080

08001850 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	//Change TxHeader.Identifier, RxHeader.Identifier
	/* AUX1 ID */
	TxHeader.Identifier = 0x23; //0x555;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001858:	2223      	movs	r2, #35	; 0x23
 800185a:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//TxHeader.Identifier = 0xFAAA;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001864:	4b41      	ldr	r3, [pc, #260]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 800186c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001870:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001880:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001884:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <_ZL14MX_FDCAN1_Initv+0x11c>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]

	/* AUX1 ID */
	RxHeader.Identifier = 0x23; //0x555;
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001894:	2223      	movs	r2, #35	; 0x23
 8001896:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//RxHeader.Identifier = 0xFAAA; //0x555;
	RxHeader.IdType = FDCAN_EXTENDED_ID;
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 800189a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189e:	605a      	str	r2, [r3, #4]
	RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
	RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 80018a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018ac:	60da      	str	r2, [r3, #12]
	RxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	RxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
	RxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <_ZL14MX_FDCAN1_Initv+0x120>)
 80018bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018c0:	619a      	str	r2, [r3, #24]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018c4:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <_ZL14MX_FDCAN1_Initv+0x128>)
 80018c6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018dc:	2200      	movs	r2, #0
 80018de:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 110;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 80018fa:	226e      	movs	r2, #110	; 0x6e
 80018fc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 17;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001900:	2211      	movs	r2, #17
 8001902:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001906:	2201      	movs	r2, #1
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 800190c:	2201      	movs	r2, #1
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001912:	2220      	movs	r2, #32
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001918:	2201      	movs	r2, #1
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001924:	2200      	movs	r2, #0
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 800192a:	2200      	movs	r2, #0
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800192e:	4811      	ldr	r0, [pc, #68]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001930:	f002 fb02 	bl	8003f38 <HAL_FDCAN_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZL14MX_FDCAN1_Initv+0xf8>
  {
    Error_Handler();
 8001944:	f000 fb38 	bl	8001fb8 <Error_Handler>
*/
/* Configure global filter to reject all non-matching frames */
    //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

/* Start CAN */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <_ZL14MX_FDCAN1_Initv+0x124>)
 800194a:	f002 fc4f 	bl	80041ec <HAL_FDCAN_Start>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <_ZL14MX_FDCAN1_Initv+0x112>
	{
		// Couldn't start FDCAN
		Error_Handler();
 800195e:	f000 fb2b 	bl	8001fb8 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005e0 	.word	0x200005e0
 8001970:	200005b8 	.word	0x200005b8
 8001974:	20000300 	.word	0x20000300
 8001978:	40006400 	.word	0x40006400

0800197c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <_ZL12MX_I2C2_Initv+0x94>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <_ZL12MX_I2C2_Initv+0x98>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 8001994:	2201      	movs	r2, #1
 8001996:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019b8:	f003 f826 	bl	8004a08 <HAL_I2C_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80019cc:	f000 faf4 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019d4:	f003 fd7c 	bl	80054d0 <HAL_I2CEx_ConfigAnalogFilter>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80019e8:	f000 fae6 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019ec:	2100      	movs	r1, #0
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <_ZL12MX_I2C2_Initv+0x90>)
 80019f0:	f003 fdb9 	bl	8005566 <HAL_I2CEx_ConfigDigitalFilter>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8001a04:	f000 fad8 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000364 	.word	0x20000364
 8001a10:	40005800 	.word	0x40005800
 8001a14:	00602173 	.word	0x00602173

08001a18 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a1e:	4a23      	ldr	r2, [pc, #140]	; (8001aac <_ZL12MX_I2C3_Initv+0x94>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <_ZL12MX_I2C3_Initv+0x98>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a52:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a54:	f002 ffd8 	bl	8004a08 <HAL_I2C_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001a68:	f000 faa6 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a70:	f003 fd2e 	bl	80054d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001a84:	f000 fa98 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <_ZL12MX_I2C3_Initv+0x90>)
 8001a8c:	f003 fd6b 	bl	8005566 <HAL_I2CEx_ConfigDigitalFilter>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001aa0:	f000 fa8a 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200003b0 	.word	0x200003b0
 8001aac:	40007800 	.word	0x40007800
 8001ab0:	00602173 	.word	0x00602173

08001ab4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001abc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001af6:	481c      	ldr	r0, [pc, #112]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001af8:	f006 fb5a 	bl	80081b0 <HAL_UART_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001b0c:	f000 fa54 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001b14:	f007 f91c 	bl	8008d50 <HAL_UARTEx_SetTxFifoThreshold>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8001b28:	f000 fa46 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001b30:	f007 f94c 	bl	8008dcc <HAL_UARTEx_SetRxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8001b44:	f000 fa38 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001b4a:	f007 f8c8 	bl	8008cde <HAL_UARTEx_DisableFifoMode>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8001b5e:	f000 fa2b 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003fc 	.word	0x200003fc
 8001b6c:	40008000 	.word	0x40008000

08001b70 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <_ZL12MX_SPI2_Initv+0x80>)
 8001b78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001b9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ba2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bca:	2208      	movs	r2, #8
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <_ZL12MX_SPI2_Initv+0x7c>)
 8001bd0:	f004 fd36 	bl	8006640 <HAL_SPI_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001be4:	f000 f9e8 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000048c 	.word	0x2000048c
 8001bf0:	40003800 	.word	0x40003800

08001bf4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001c34:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c48:	482e      	ldr	r0, [pc, #184]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c4a:	f004 fda4 	bl	8006796 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 8001c5e:	f000 f9ab 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c66:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4825      	ldr	r0, [pc, #148]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c70:	f005 fae6 	bl	8007240 <HAL_TIM_ConfigClockSource>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 8001c84:	f000 f998 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c88:	481e      	ldr	r0, [pc, #120]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001c8a:	f004 ff49 	bl	8006b20 <HAL_TIM_IC_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001c9e:	f000 f98b 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4814      	ldr	r0, [pc, #80]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001cb2:	f006 f9a9 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 8001cc6:	f000 f977 	bl	8001fb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001cca:	230a      	movs	r3, #10
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4808      	ldr	r0, [pc, #32]	; (8001d04 <_ZL12MX_TIM2_Initv+0x110>)
 8001ce2:	f005 f8fd 	bl	8006ee0 <HAL_TIM_IC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 8001cf6:	f000 f95f 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	; 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200004f0 	.word	0x200004f0

08001d08 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <_ZL12MX_TIM3_Initv+0x124>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d42:	223f      	movs	r2, #63	; 0x3f
 8001d44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d4e:	2227      	movs	r2, #39	; 0x27
 8001d50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d5e:	4832      	ldr	r0, [pc, #200]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d60:	f004 fd19 	bl	8006796 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001d74:	f000 f920 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4828      	ldr	r0, [pc, #160]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001d86:	f005 fa5b 	bl	8007240 <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001d9a:	f000 f90d 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001da0:	f004 fd50 	bl	8006844 <HAL_TIM_PWM_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001db4:	f000 f900 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4818      	ldr	r0, [pc, #96]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001dc8:	f006 f91e 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001ddc:	f000 f8ec 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de0:	2360      	movs	r3, #96	; 0x60
 8001de2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001de4:	231e      	movs	r3, #30
 8001de6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001df8:	f005 f90e 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001e0c:	f000 f8d4 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start pwm generation
 8001e10:	2100      	movs	r1, #0
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001e14:	f004 fd78 	bl	8006908 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <_ZL12MX_TIM3_Initv+0x120>)
 8001e1a:	f000 fba3 	bl	8002564 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	; 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000053c 	.word	0x2000053c
 8001e2c:	40000400 	.word	0x40000400

08001e30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a52      	ldr	r2, [pc, #328]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a46      	ldr	r2, [pc, #280]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <_ZL12MX_GPIO_Initv+0x17c>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DRIVE_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f240 6182 	movw	r1, #1666	; 0x682
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f002 fd78 	bl	80049a4 <HAL_GPIO_WritePin>
                          |HEPA_W_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_B_CTRL_Pin|HEPA_G_CTRL_Pin|nEEPROM_WP_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001eba:	483d      	ldr	r0, [pc, #244]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x180>)
 8001ebc:	f002 fd72 	bl	80049a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f640 0107 	movw	r1, #2055	; 0x807
 8001ec6:	483b      	ldr	r0, [pc, #236]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x184>)
 8001ec8:	f002 fd6c 	bl	80049a4 <HAL_GPIO_WritePin>

  /*UV_ON_OFF is set by default to keep UV bulb off */
  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2110      	movs	r1, #16
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f002 fd66 	bl	80049a4 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : UV_NO_Pin DOOR_OPEN_MCU_Pin POS_SW__MCU_Pin */
  GPIO_InitStruct.Pin = UV_NO_Pin|DOOR_OPEN_MCU_Pin|POS_SW_MCU_Pin;
 8001ed8:	f640 0384 	movw	r3, #2180	; 0x884
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4830      	ldr	r0, [pc, #192]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x180>)
 8001eee:	f002 fbbf 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DRIVE_Pin */
  GPIO_InitStruct.Pin = LED_DRIVE_Pin;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ef6:	2311      	movs	r3, #17
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f002 fbb0 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_ON_OFF_MCU_Pin HEPA_ON_OFF_Pin HEPA_R_CTRL_Pin HEPA_W_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin|HEPA_W_CTRL_Pin;
 8001f10:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f002 fba0 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_B_CTRL_Pin HEPA_G_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_B_CTRL_Pin|HEPA_G_CTRL_Pin;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x180>)
 8001f48:	f002 fb92 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_G_CTRL_Pin UV_R_CTRL_Pin UV_W_CTRL_Pin HEPA_B_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin;
 8001f4c:	f640 0307 	movw	r3, #2055	; 0x807
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x184>)
 8001f66:	f002 fb83 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_NO_Pin */
  GPIO_InitStruct.Pin = HEPA_NO_Pin;
 8001f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEPA_NO_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <_ZL12MX_GPIO_Initv+0x184>)
 8001f80:	f002 fb76 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : nEEPROM_WP_Pin */
  GPIO_InitStruct.Pin = nEEPROM_WP_Pin;
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f8a:	2311      	movs	r3, #17
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nEEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x180>)
 8001f9e:	f002 fb67 	bl	8004670 <HAL_GPIO_Init>

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	48000400 	.word	0x48000400

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <Error_Handler+0x8>
	...

08001fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_MspInit+0x44>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_MspInit+0x44>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_MspInit+0x44>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_MspInit+0x44>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_MspInit+0x44>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_MspInit+0x44>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ffa:	f003 fba5 	bl	8005748 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0a0      	sub	sp, #128	; 0x80
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	2250      	movs	r2, #80	; 0x50
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f007 fd10 	bl	8009a52 <memset>
  if(hadc->Instance==ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203a:	d13d      	bne.n	80020b8 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800203c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002040:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002042:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002046:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4618      	mov	r0, r3
 800204e:	f004 f8bb 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002058:	f7ff ffae 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_ADC_MspInit+0x138>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_ADC_MspInit+0x138>)
 8002064:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_ADC_MspInit+0x138>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10b      	bne.n	8002086 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = _24V_SCLD_Pin|_3V3_SCLD_Pin;
 800209e:	2303      	movs	r3, #3
 80020a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_ADC_MspInit+0x140>)
 80020b2:	f002 fadd 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020b6:	e041      	b.n	800213c <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_ADC_MspInit+0x144>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d13c      	bne.n	800213c <HAL_ADC_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f878 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 80020de:	f7ff ff6b 	bl	8001fb8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_ADC_MspInit+0x138>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_ADC_MspInit+0x138>)
 80020ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_ADC_MspInit+0x138>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10b      	bne.n	800210c <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 80020fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_ADC_MspInit+0x13c>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = _3V3_SCLD_Pin;
 8002124:	2302      	movs	r3, #2
 8002126:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002128:	2303      	movs	r3, #3
 800212a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(_3V3_SCLD_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002134:	4619      	mov	r1, r3
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_ADC_MspInit+0x140>)
 8002138:	f002 fa9a 	bl	8004670 <HAL_GPIO_Init>
}
 800213c:	bf00      	nop
 800213e:	3780      	adds	r7, #128	; 0x80
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000674 	.word	0x20000674
 8002148:	40021000 	.word	0x40021000
 800214c:	48000800 	.word	0x48000800
 8002150:	50000100 	.word	0x50000100

08002154 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b09e      	sub	sp, #120	; 0x78
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2250      	movs	r2, #80	; 0x50
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f007 fc6c 	bl	8009a52 <memset>
  if(hfdcan->Instance==FDCAN1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_FDCAN_MspInit+0xac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d139      	bne.n	80021f8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800218a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f817 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80021a0:	f7ff ff0a 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_FDCAN_MspInit+0xb0>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80021e6:	2309      	movs	r3, #9
 80021e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f002 fa3c 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3778      	adds	r7, #120	; 0x78
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40006400 	.word	0x40006400
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0a0      	sub	sp, #128	; 0x80
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2250      	movs	r2, #80	; 0x50
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f007 fc12 	bl	8009a52 <memset>
  if(hi2c->Instance==I2C2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <HAL_I2C_MspInit+0x15c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d154      	bne.n	80022e2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4618      	mov	r0, r3
 8002246:	f003 ffbf 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002250:	f7ff feb2 	bl	8001fb8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_I2C_MspInit+0x160>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_I2C_MspInit+0x160>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	4a3d      	ldr	r2, [pc, #244]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_I2C_MspInit+0x160>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 8002284:	2310      	movs	r3, #16
 8002286:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002288:	2312      	movs	r3, #18
 800228a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002294:	2304      	movs	r3, #4
 8002296:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800229c:	4619      	mov	r1, r3
 800229e:	4833      	ldr	r0, [pc, #204]	; (800236c <HAL_I2C_MspInit+0x164>)
 80022a0:	f002 f9e6 	bl	8004670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EEPROM_SDA_Pin;
 80022a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022aa:	2312      	movs	r3, #18
 80022ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b6:	2304      	movs	r3, #4
 80022b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022be:	4619      	mov	r1, r3
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c4:	f002 f9d4 	bl	8004670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_I2C_MspInit+0x160>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_I2C_MspInit+0x160>)
 80022ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_I2C_MspInit+0x160>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022e0:	e03c      	b.n	800235c <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_I2C_MspInit+0x168>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d137      	bne.n	800235c <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 ff64 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8002306:	f7ff fe57 	bl	8001fb8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_I2C_MspInit+0x160>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002328:	2312      	movs	r3, #18
 800232a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002334:	2308      	movs	r3, #8
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233c:	4619      	mov	r1, r3
 800233e:	480b      	ldr	r0, [pc, #44]	; (800236c <HAL_I2C_MspInit+0x164>)
 8002340:	f002 f996 	bl	8004670 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_I2C_MspInit+0x160>)
 800234a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_I2C_MspInit+0x160>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
}
 800235c:	bf00      	nop
 800235e:	3780      	adds	r7, #128	; 0x80
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40005800 	.word	0x40005800
 8002368:	40021000 	.word	0x40021000
 800236c:	48000800 	.word	0x48000800
 8002370:	40007800 	.word	0x40007800

08002374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b09e      	sub	sp, #120	; 0x78
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2250      	movs	r2, #80	; 0x50
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f007 fb5c 	bl	8009a52 <memset>
  if(huart->Instance==LPUART1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_UART_MspInit+0xa8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d136      	bne.n	8002412 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023a4:	2320      	movs	r3, #32
 80023a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 ff09 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023bc:	f7ff fdfc 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	65d3      	str	r3, [r2, #92]	; 0x5c
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_UART_MspInit+0xac>)
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f0:	230c      	movs	r3, #12
 80023f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002400:	230c      	movs	r3, #12
 8002402:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240e:	f002 f92f 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3778      	adds	r7, #120	; 0x78
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40008000 	.word	0x40008000
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0x7c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d128      	bne.n	8002498 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_SPI_MspInit+0x80>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002476:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002488:	2305      	movs	r3, #5
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_SPI_MspInit+0x84>)
 8002494:	f002 f8ec 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40003800 	.word	0x40003800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	48000400 	.word	0x48000400

080024ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d131      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6593      	str	r3, [r2, #88]	; 0x58
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HEPA_FG_Pin;
 80024fe:	2320      	movs	r3, #32
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800250e:	2301      	movs	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEPA_FG_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f002 f8a8 	bl	8004670 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002520:	2200      	movs	r2, #0
 8002522:	2100      	movs	r1, #0
 8002524:	201c      	movs	r0, #28
 8002526:	f001 fcd2 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800252a:	201c      	movs	r0, #28
 800252c:	f001 fce9 	bl	8003f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002530:	e010      	b.n	8002554 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_TIM_Base_MspInit+0xb4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10b      	bne.n	8002554 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a06      	ldr	r2, [pc, #24]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_TIM_Base_MspInit+0xb0>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	40000400 	.word	0x40000400

08002564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_TIM_MspPostInit+0x64>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11c      	bne.n	80025c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_TIM_MspPostInit+0x68>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_TIM_MspPostInit+0x68>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_TIM_MspPostInit+0x68>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HEPA_PWM_Pin;
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEPA_PWM_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f002 f858 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40021000 	.word	0x40021000

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <NMI_Handler+0x4>

080025d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler+0x4>

080025e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <UsageFault_Handler+0x4>

080025ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 f960 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <TIM2_IRQHandler+0x10>)
 800262a:	f004 fada 	bl	8006be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200004f0 	.word	0x200004f0

08002638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002652:	f007 fa51 	bl	8009af8 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
	return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe7 	bl	8002648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800267a:	e7fe      	b.n	800267a <_exit+0x12>

0800267c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e00a      	b.n	80026a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800268e:	f3af 8000 	nop.w
 8002692:	4601      	mov	r1, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	b2ca      	uxtb	r2, r1
 800269c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	dbf0      	blt.n	800268e <_read+0x12>
	}

return len;
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e009      	b.n	80026dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbf1      	blt.n	80026c8 <_write+0x12>
	}
	return len;
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <_close>:

int _close(int file)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
	return -1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002716:	605a      	str	r2, [r3, #4]
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_isatty>:

int _isatty(int file)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
	return 1;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
	return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f007 f9b6 	bl	8009af8 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	2001c000 	.word	0x2001c000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	20000678 	.word	0x20000678
 80027c0:	200007d0 	.word	0x200007d0

080027c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <SystemInit+0x20>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <SystemInit+0x20>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ee:	490e      	ldr	r1, [pc, #56]	; (8002828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <LoopForever+0xe>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002804:	4c0b      	ldr	r4, [pc, #44]	; (8002834 <LoopForever+0x16>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff ffd7 	bl	80027c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f007 f975 	bl	8009b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281a:	f7fe fda7 	bl	800136c <main>

0800281e <LoopForever>:

LoopForever:
    b LoopForever
 800281e:	e7fe      	b.n	800281e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8002820:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002828:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800282c:	0800c0d0 	.word	0x0800c0d0
  ldr r2, =_sbss
 8002830:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002834:	200007cc 	.word	0x200007cc

08002838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC1_2_IRQHandler>

0800283a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002844:	2003      	movs	r0, #3
 8002846:	f001 fb37 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800284a:	200f      	movs	r0, #15
 800284c:	f000 f80e 	bl	800286c <HAL_InitTick>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	71fb      	strb	r3, [r7, #7]
 800285a:	e001      	b.n	8002860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800285c:	f7ff fbb2 	bl	8001fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002860:	79fb      	ldrb	r3, [r7, #7]

}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_InitTick+0x68>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d022      	beq.n	80028c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_InitTick+0x6c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_InitTick+0x68>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800288c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fb42 	bl	8003f1e <HAL_SYSTICK_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b0f      	cmp	r3, #15
 80028a4:	d809      	bhi.n	80028ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a6:	2200      	movs	r2, #0
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	f04f 30ff 	mov.w	r0, #4294967295
 80028ae:	f001 fb0e 	bl	8003ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_InitTick+0x70>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e007      	b.n	80028ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e004      	b.n	80028ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e001      	b.n	80028ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000003c 	.word	0x2000003c
 80028d8:	20000034 	.word	0x20000034
 80028dc:	20000038 	.word	0x20000038

080028e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_IncTick+0x1c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_IncTick+0x20>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_IncTick+0x1c>)
 80028f0:	6013      	str	r3, [r2, #0]
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	2000067c 	.word	0x2000067c
 8002900:	2000003c 	.word	0x2000003c

08002904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return uwTick;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000067c 	.word	0x2000067c

0800291c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff ffee 	bl	8002904 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d004      	beq.n	8002940 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_Delay+0x40>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002940:	bf00      	nop
 8002942:	f7ff ffdf 	bl	8002904 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d8f7      	bhi.n	8002942 <HAL_Delay+0x26>
  {
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	2000003c 	.word	0x2000003c

08002960 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3360      	adds	r3, #96	; 0x60
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <LL_ADC_SetOffset+0x44>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	03fff000 	.word	0x03fff000

08002a10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	461a      	mov	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3360      	adds	r3, #96	; 0x60
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	615a      	str	r2, [r3, #20]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3330      	adds	r3, #48	; 0x30
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	211f      	movs	r1, #31
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 011f 	and.w	r1, r3, #31
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0e5b      	lsrs	r3, r3, #25
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	0d1b      	lsrs	r3, r3, #20
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2107      	movs	r1, #7
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0d1b      	lsrs	r3, r3, #20
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10a      	bne.n	8002bde <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	43db      	mvns	r3, r3
 8002bec:	401a      	ands	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	407f0000 	.word	0x407f0000

08002c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6093      	str	r3, [r2, #8]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb4:	f043 0202 	orr.w	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <LL_ADC_IsEnabled+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_ADC_IsEnabled+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d101      	bne.n	8002d06 <LL_ADC_IsDisableOngoing+0x18>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_ADC_IsDisableOngoing+0x1a>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d101      	bne.n	8002d52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1a1      	b.n	80030be <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff f93f 	bl	800200c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff41 	bl	8002c28 <LL_ADC_IsDeepPowerDownEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff27 	bl	8002c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff5c 	bl	8002c78 <LL_ADC_IsInternalRegulatorEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d115      	bne.n	8002df2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff40 	bl	8002c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd0:	4b9a      	ldr	r3, [pc, #616]	; (800303c <HAL_ADC_Init+0x2dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	4a9a      	ldr	r2, [pc, #616]	; (8003040 <HAL_ADC_Init+0x2e0>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff3e 	bl	8002c78 <LL_ADC_IsInternalRegulatorEnabled>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff76 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002e28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 813a 	bne.w	80030ac <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 8136 	bne.w	80030ac <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e48:	f043 0202 	orr.w	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff37 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d137      	bne.n	8002ed0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e68:	d004      	beq.n	8002e74 <HAL_ADC_Init+0x114>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_ADC_Init+0x2e4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10f      	bne.n	8002e94 <HAL_ADC_Init+0x134>
 8002e74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e78:	f7ff ff26 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4871      	ldr	r0, [pc, #452]	; (8003044 <HAL_ADC_Init+0x2e4>)
 8002e80:	f7ff ff22 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4323      	orrs	r3, r4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e008      	b.n	8002ea6 <HAL_ADC_Init+0x146>
 8002e94:	486c      	ldr	r0, [pc, #432]	; (8003048 <HAL_ADC_Init+0x2e8>)
 8002e96:	f7ff ff17 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Init+0x15e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_ADC_Init+0x2e4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x162>
 8002ebe:	4a63      	ldr	r2, [pc, #396]	; (800304c <HAL_ADC_Init+0x2ec>)
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_Init+0x164>
 8002ec2:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_ADC_Init+0x2f0>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff fd48 	bl	8002960 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7f5b      	ldrb	r3, [r3, #29]
 8002ed4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ee0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ee6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	045b      	lsls	r3, r3, #17
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_ADC_Init+0x2f4>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fedc 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fee9 	bl	8002d3a <LL_ADC_INJ_IsConversionOngoing>
 8002f68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d17b      	bne.n	8003068 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d178      	bne.n	8003068 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f92:	f023 0302 	bic.w	r3, r3, #2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6911      	ldr	r1, [r2, #16]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002fd6:	e013      	b.n	8003000 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ffc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003006:	2b01      	cmp	r3, #1
 8003008:	d126      	bne.n	8003058 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800302c:	430a      	orrs	r2, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e015      	b.n	8003068 <HAL_ADC_Init+0x308>
 800303c:	20000034 	.word	0x20000034
 8003040:	053e2d63 	.word	0x053e2d63
 8003044:	50000100 	.word	0x50000100
 8003048:	50000400 	.word	0x50000400
 800304c:	50000300 	.word	0x50000300
 8003050:	50000700 	.word	0x50000700
 8003054:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f023 010f 	bic.w	r1, r3, #15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	e007      	b.n	800309a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020f 	bic.w	r2, r2, #15
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030aa:	e007      	b.n	80030bc <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop

080030c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0b6      	sub	sp, #216	; 0xd8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d102      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x24>
 80030e6:	2302      	movs	r3, #2
 80030e8:	f000 bc04 	b.w	80038f4 <HAL_ADC_ConfigChannel+0x82c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fe0b 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 83e8 	bne.w	80038d6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f7ff fcf6 	bl	8002b04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fdf9 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003122:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fe05 	bl	8002d3a <LL_ADC_INJ_IsConversionOngoing>
 8003130:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 81d9 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800313e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 81d4 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003150:	d10f      	bne.n	8003172 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	4619      	mov	r1, r3
 800315e:	f7ff fcfd 	bl	8002b5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fcb7 	bl	8002ade <LL_ADC_SetSamplingTimeCommonConfig>
 8003170:	e00e      	b.n	8003190 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	461a      	mov	r2, r3
 8003180:	f7ff fcec 	bl	8002b5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fca7 	bl	8002ade <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d022      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031c2:	f7ff fc01 	bl	80029c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6919      	ldr	r1, [r3, #16]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fc4d 	bl	8002a72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6919      	ldr	r1, [r3, #16]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7f1b      	ldrb	r3, [r3, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d102      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x126>
 80031e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ec:	e000      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x128>
 80031ee:	2300      	movs	r3, #0
 80031f0:	461a      	mov	r2, r3
 80031f2:	f7ff fc59 	bl	8002aa8 <LL_ADC_SetOffsetSaturation>
 80031f6:	e17b      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fc06 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 8003204:	4603      	mov	r3, r0
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x15c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fbfb 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	e01e      	b.n	8003262 <HAL_ADC_ConfigChannel+0x19a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fbf0 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800324a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_ADC_ConfigChannel+0x1b2>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	e018      	b.n	80032ac <HAL_ADC_ConfigChannel+0x1e4>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800328e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e004      	b.n	80032ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d106      	bne.n	80032be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fbbf 	bl	8002a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fba3 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x222>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fb98 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	e01e      	b.n	8003328 <HAL_ADC_ConfigChannel+0x260>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fb8d 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800330c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e004      	b.n	8003326 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800331c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x278>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	e018      	b.n	8003372 <HAL_ADC_ConfigChannel+0x2aa>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800335c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e004      	b.n	8003372 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003372:	429a      	cmp	r2, r3
 8003374:	d106      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fb5c 	bl	8002a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fb40 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x2e8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fb35 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	e01e      	b.n	80033ee <HAL_ADC_ConfigChannel+0x326>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fb2a 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033de:	2320      	movs	r3, #32
 80033e0:	e004      	b.n	80033ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x33e>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	e016      	b.n	8003434 <HAL_ADC_ConfigChannel+0x36c>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800341a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800341e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e004      	b.n	8003434 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800342a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003434:	429a      	cmp	r2, r3
 8003436:	d106      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fafb 	bl	8002a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2103      	movs	r1, #3
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fadf 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x3aa>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2103      	movs	r1, #3
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fad4 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	0e9b      	lsrs	r3, r3, #26
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	e017      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x3da>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2103      	movs	r1, #3
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fac9 	bl	8002a10 <LL_ADC_GetOffsetChannel>
 800347e:	4603      	mov	r3, r0
 8003480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800348a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800348c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800348e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x3f2>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	e011      	b.n	80034de <HAL_ADC_ConfigChannel+0x416>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e003      	b.n	80034de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034de:	429a      	cmp	r2, r3
 80034e0:	d106      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	2103      	movs	r1, #3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff faa6 	bl	8002a3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fbe7 	bl	8002cc8 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 813d 	bne.w	800377c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	461a      	mov	r2, r3
 8003510:	f7ff fb50 	bl	8002bb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4aa2      	ldr	r2, [pc, #648]	; (80037a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 812e 	bne.w	800377c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x480>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	3301      	adds	r3, #1
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2b09      	cmp	r3, #9
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e019      	b.n	800357c <HAL_ADC_ConfigChannel+0x4b4>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003558:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800355a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2b09      	cmp	r3, #9
 8003574:	bf94      	ite	ls
 8003576:	2301      	movls	r3, #1
 8003578:	2300      	movhi	r3, #0
 800357a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357c:	2b00      	cmp	r3, #0
 800357e:	d079      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_ADC_ConfigChannel+0x4d4>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	3301      	adds	r3, #1
 8003594:	069b      	lsls	r3, r3, #26
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359a:	e015      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x500>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	069b      	lsls	r3, r3, #26
 80035c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x520>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2101      	movs	r1, #1
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	e017      	b.n	8003618 <HAL_ADC_ConfigChannel+0x550>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	ea42 0103 	orr.w	r1, r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_ADC_ConfigChannel+0x576>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	051b      	lsls	r3, r3, #20
 800363c:	e018      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5a8>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e003      	b.n	8003662 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003670:	430b      	orrs	r3, r1
 8003672:	e07e      	b.n	8003772 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x5c8>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	3301      	adds	r3, #1
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368e:	e015      	b.n	80036bc <HAL_ADC_ConfigChannel+0x5f4>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x614>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	3301      	adds	r3, #1
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	e017      	b.n	800370c <HAL_ADC_ConfigChannel+0x644>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	61fb      	str	r3, [r7, #28]
  return result;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e003      	b.n	8003700 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	ea42 0103 	orr.w	r1, r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x670>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	3b1e      	subs	r3, #30
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003736:	e01b      	b.n	8003770 <HAL_ADC_ConfigChannel+0x6a8>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	613b      	str	r3, [r7, #16]
  return result;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	3b1e      	subs	r3, #30
 800376a:	051b      	lsls	r3, r3, #20
 800376c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003770:	430b      	orrs	r3, r1
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	4619      	mov	r1, r3
 8003778:	f7ff f9f0 	bl	8002b5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80af 	beq.w	80038e8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003792:	d004      	beq.n	800379e <HAL_ADC_ConfigChannel+0x6d6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_ADC_ConfigChannel+0x6e4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10a      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x6ec>
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80037a0:	e009      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x6ee>
 80037a2:	bf00      	nop
 80037a4:	407f0000 	.word	0x407f0000
 80037a8:	80080000 	.word	0x80080000
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000300 	.word	0x50000300
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <HAL_ADC_ConfigChannel+0x834>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f8f8 	bl	80029ac <LL_ADC_GetCommonPathInternalCh>
 80037bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_ADC_ConfigChannel+0x838>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_ADC_ConfigChannel+0x70c>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4d      	ldr	r2, [pc, #308]	; (8003904 <HAL_ADC_ConfigChannel+0x83c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d134      	bne.n	800383e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d12e      	bne.n	800383e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e8:	d17e      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f2:	d004      	beq.n	80037fe <HAL_ADC_ConfigChannel+0x736>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_ADC_ConfigChannel+0x840>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x73a>
 80037fe:	4a43      	ldr	r2, [pc, #268]	; (800390c <HAL_ADC_ConfigChannel+0x844>)
 8003800:	e000      	b.n	8003804 <HAL_ADC_ConfigChannel+0x73c>
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <HAL_ADC_ConfigChannel+0x834>)
 8003804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7ff f8b9 	bl	8002986 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003814:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_ADC_ConfigChannel+0x848>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <HAL_ADC_ConfigChannel+0x84c>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800382e:	e002      	b.n	8003836 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f9      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383c:	e054      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a35      	ldr	r2, [pc, #212]	; (8003918 <HAL_ADC_ConfigChannel+0x850>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d120      	bne.n	800388a <HAL_ADC_ConfigChannel+0x7c2>
 8003848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11a      	bne.n	800388a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800385c:	d144      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003866:	d004      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x7aa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <HAL_ADC_ConfigChannel+0x840>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x7ae>
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <HAL_ADC_ConfigChannel+0x844>)
 8003874:	e000      	b.n	8003878 <HAL_ADC_ConfigChannel+0x7b0>
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <HAL_ADC_ConfigChannel+0x834>)
 8003878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7ff f87f 	bl	8002986 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003888:	e02e      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_ADC_ConfigChannel+0x854>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d129      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d123      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_ADC_ConfigChannel+0x840>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01e      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b2:	d004      	beq.n	80038be <HAL_ADC_ConfigChannel+0x7f6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <HAL_ADC_ConfigChannel+0x840>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x7fa>
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_ADC_ConfigChannel+0x844>)
 80038c0:	e000      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x7fc>
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_ADC_ConfigChannel+0x834>)
 80038c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7ff f859 	bl	8002986 <LL_ADC_SetCommonPathInternalCh>
 80038d4:	e008      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	37d8      	adds	r7, #216	; 0xd8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	50000700 	.word	0x50000700
 8003900:	c3210000 	.word	0xc3210000
 8003904:	90c00010 	.word	0x90c00010
 8003908:	50000100 	.word	0x50000100
 800390c:	50000300 	.word	0x50000300
 8003910:	20000034 	.word	0x20000034
 8003914:	053e2d63 	.word	0x053e2d63
 8003918:	c7520000 	.word	0xc7520000
 800391c:	cb840000 	.word	0xcb840000

08003920 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff f9de 	bl	8002cee <LL_ADC_IsDisableOngoing>
 8003932:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f9c5 	bl	8002cc8 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d047      	beq.n	80039d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d144      	bne.n	80039d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030d 	and.w	r3, r3, #13
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10c      	bne.n	8003972 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f99f 	bl	8002ca0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2203      	movs	r2, #3
 8003968:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800396a:	f7fe ffcb 	bl	8002904 <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003970:	e029      	b.n	80039c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f043 0210 	orr.w	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e023      	b.n	80039d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800398e:	f7fe ffb9 	bl	8002904 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d914      	bls.n	80039c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e007      	b.n	80039d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1dc      	bne.n	800398e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <LL_ADC_IsEnabled>:
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <LL_ADC_IsEnabled+0x18>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <LL_ADC_IsEnabled+0x1a>
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_StartCalibration>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d101      	bne.n	8003a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e04d      	b.n	8003b3c <HAL_ADCEx_Calibration_Start+0xb8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff39 	bl	8003920 <ADC_Disable>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d136      	bne.n	8003b26 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ac0:	f023 0302 	bic.w	r3, r3, #2
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff96 	bl	8003a04 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ad8:	e014      	b.n	8003b04 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d90d      	bls.n	8003b04 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f023 0312 	bic.w	r3, r3, #18
 8003af0:	f043 0210 	orr.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e01b      	b.n	8003b3c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff94 	bl	8003a36 <LL_ADC_IsCalibrationOnGoing>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e2      	bne.n	8003ada <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	f023 0303 	bic.w	r3, r3, #3
 8003b1c:	f043 0201 	orr.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b24:	e005      	b.n	8003b32 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	0004de01 	.word	0x0004de01

08003b48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b0a1      	sub	sp, #132	; 0x84
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0cb      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b72:	2300      	movs	r3, #0
 8003b74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b7e:	d102      	bne.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b80:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	e001      	b.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0aa      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff57 	bl	8003a5e <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff51 	bl	8003a5e <LL_ADC_REG_IsConversionOngoing>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 808c 	bne.w	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 8088 	bne.w	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003be0:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003be2:	e000      	b.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003be6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d041      	beq.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c02:	035b      	lsls	r3, r3, #13
 8003c04:	430b      	orrs	r3, r1
 8003c06:	431a      	orrs	r2, r3
 8003c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c14:	d004      	beq.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10f      	bne.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003c20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c24:	f7ff fedb 	bl	80039de <LL_ADC_IsEnabled>
 8003c28:	4604      	mov	r4, r0
 8003c2a:	4837      	ldr	r0, [pc, #220]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c2c:	f7ff fed7 	bl	80039de <LL_ADC_IsEnabled>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4323      	orrs	r3, r4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e008      	b.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003c40:	4834      	ldr	r0, [pc, #208]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003c42:	f7ff fecc 	bl	80039de <LL_ADC_IsEnabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04c      	beq.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c5e:	f023 030f 	bic.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c70:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c72:	e03d      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c88:	d004      	beq.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10f      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003c94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c98:	f7ff fea1 	bl	80039de <LL_ADC_IsEnabled>
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	481a      	ldr	r0, [pc, #104]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ca0:	f7ff fe9d 	bl	80039de <LL_ADC_IsEnabled>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4323      	orrs	r3, r4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e008      	b.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003cb4:	4817      	ldr	r0, [pc, #92]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003cb6:	f7ff fe92 	bl	80039de <LL_ADC_IsEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cda:	e009      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cee:	e000      	b.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3784      	adds	r7, #132	; 0x84
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	50000100 	.word	0x50000100
 8003d0c:	50000300 	.word	0x50000300
 8003d10:	50000700 	.word	0x50000700
 8003d14:	50000400 	.word	0x50000400

08003d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60d3      	str	r3, [r2, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db0a      	blt.n	8003de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	490c      	ldr	r1, [pc, #48]	; (8003e04 <__NVIC_SetPriority+0x4c>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de0:	e00a      	b.n	8003df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <__NVIC_SetPriority+0x50>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3b04      	subs	r3, #4
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	761a      	strb	r2, [r3, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf28      	it	cs
 8003e2a:	2304      	movcs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d902      	bls.n	8003e3c <NVIC_EncodePriority+0x30>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3b03      	subs	r3, #3
 8003e3a:	e000      	b.n	8003e3e <NVIC_EncodePriority+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	401a      	ands	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43d9      	mvns	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	4313      	orrs	r3, r2
         );
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	; 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e84:	d301      	bcc.n	8003e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00f      	b.n	8003eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <SysTick_Config+0x40>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e92:	210f      	movs	r1, #15
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f7ff ff8e 	bl	8003db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <SysTick_Config+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <SysTick_Config+0x40>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff29 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003edc:	f7ff ff40 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	f7ff ff90 	bl	8003e0c <NVIC_EncodePriority>
 8003eec:	4602      	mov	r2, r0
 8003eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff5f 	bl	8003db8 <__NVIC_SetPriority>
}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	4603      	mov	r3, r0
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff33 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ffa4 	bl	8003e74 <SysTick_Config>
 8003f2c:	4603      	mov	r3, r0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e147      	b.n	80041da <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe f8f8 	bl	8002154 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0210 	bic.w	r2, r2, #16
 8003f72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f74:	f7fe fcc6 	bl	8002904 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f7a:	e012      	b.n	8003fa2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f7c:	f7fe fcc2 	bl	8002904 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b0a      	cmp	r3, #10
 8003f88:	d90b      	bls.n	8003fa2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e11b      	b.n	80041da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d0e5      	beq.n	8003f7c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc0:	f7fe fca0 	bl	8002904 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003fc6:	e012      	b.n	8003fee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003fc8:	f7fe fc9c 	bl	8002904 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b0a      	cmp	r3, #10
 8003fd4:	d90b      	bls.n	8003fee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0f5      	b.n	80041da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0e5      	beq.n	8003fc8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0202 	orr.w	r2, r2, #2
 800400a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a74      	ldr	r2, [pc, #464]	; (80041e4 <HAL_FDCAN_Init+0x2ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d103      	bne.n	800401e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004016:	4a74      	ldr	r2, [pc, #464]	; (80041e8 <HAL_FDCAN_Init+0x2b0>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7c1b      	ldrb	r3, [r3, #16]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e007      	b.n	8004048 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7c5b      	ldrb	r3, [r3, #17]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	619a      	str	r2, [r3, #24]
 8004060:	e007      	b.n	8004072 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004070:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7c9b      	ldrb	r3, [r3, #18]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e007      	b.n	800409c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800409a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80040c0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d108      	bne.n	80040ec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0204 	orr.w	r2, r2, #4
 80040e8:	619a      	str	r2, [r3, #24]
 80040ea:	e02c      	b.n	8004146 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d028      	beq.n	8004146 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d01c      	beq.n	8004136 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800410a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0210 	orr.w	r2, r2, #16
 800411a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d110      	bne.n	8004146 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0220 	orr.w	r2, r2, #32
 8004132:	619a      	str	r2, [r3, #24]
 8004134:	e007      	b.n	8004146 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0220 	orr.w	r2, r2, #32
 8004144:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	3b01      	subs	r3, #1
 800414c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	3b01      	subs	r3, #1
 8004154:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004156:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800415e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	3b01      	subs	r3, #1
 8004168:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800416e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004170:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417a:	d115      	bne.n	80041a8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	3b01      	subs	r3, #1
 8004188:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800418a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	3b01      	subs	r3, #1
 8004192:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004194:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	3b01      	subs	r3, #1
 800419e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80041a4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041a6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f978 	bl	80044b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40006400 	.word	0x40006400
 80041e8:	40006500 	.word	0x40006500

080041ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d110      	bne.n	8004222 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e006      	b.n	8004230 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d12c      	bne.n	80042ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e023      	b.n	80042bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f974 	bl	8004578 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	fa01 f202 	lsl.w	r2, r1, r2
 800429c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80042a0:	2201      	movs	r2, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e006      	b.n	80042bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b08b      	sub	sp, #44	; 0x2c
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042d8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80042da:	7efb      	ldrb	r3, [r7, #27]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f040 80bc 	bne.w	800445a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d121      	bne.n	800432c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0af      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	e020      	b.n	800436e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e08d      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	0c9b      	lsrs	r3, r3, #18
 8004388:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e005      	b.n	800439e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3304      	adds	r3, #4
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	0e1b      	lsrs	r3, r3, #24
 80043f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0fda      	lsrs	r2, r3, #31
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	3304      	adds	r3, #4
 8004406:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800440c:	2300      	movs	r3, #0
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	e00a      	b.n	8004428 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	441a      	add	r2, r3
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	440b      	add	r3, r1
 800441e:	7812      	ldrb	r2, [r2, #0]
 8004420:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	3301      	adds	r3, #1
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	4a11      	ldr	r2, [pc, #68]	; (8004474 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	461a      	mov	r2, r3
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	4293      	cmp	r3, r2
 8004438:	d3eb      	bcc.n	8004412 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d105      	bne.n	800444c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800444a:	e004      	b.n	8004456 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e006      	b.n	8004468 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	372c      	adds	r7, #44	; 0x2c
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	0800bcbc 	.word	0x0800bcbc

08004478 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d107      	bne.n	8004498 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e006      	b.n	80044a6 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80044bc:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80044be:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d103      	bne.n	80044d2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80044d0:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e0:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e8:	041a      	lsls	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004506:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	061a      	lsls	r2, r3, #24
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e005      	b.n	8004554 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3f3      	bcc.n	8004548 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	4000a400 	.word	0x4000a400
 8004574:	40006800 	.word	0x40006800

08004578 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004596:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800459e:	4313      	orrs	r3, r2
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e00a      	b.n	80045ba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80045ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80045b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80045b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045b8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80045c4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80045ca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80045d0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	3304      	adds	r3, #4
 80045f6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3304      	adds	r3, #4
 8004602:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e020      	b.n	800464c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	3303      	adds	r3, #3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3302      	adds	r3, #2
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	440b      	add	r3, r1
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004622:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	440b      	add	r3, r1
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004630:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	440a      	add	r2, r1
 8004638:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800463a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	3304      	adds	r3, #4
 8004644:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3304      	adds	r3, #4
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	4a06      	ldr	r2, [pc, #24]	; (800466c <FDCAN_CopyMessageToRAM+0xf4>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	461a      	mov	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4293      	cmp	r3, r2
 800465c:	d3d5      	bcc.n	800460a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	3724      	adds	r7, #36	; 0x24
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	0800bcbc 	.word	0x0800bcbc

08004670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800467e:	e15a      	b.n	8004936 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 814c 	beq.w	8004930 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d005      	beq.n	80046b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d130      	bne.n	8004712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	2203      	movs	r2, #3
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046e6:	2201      	movs	r2, #1
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 0201 	and.w	r2, r3, #1
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b03      	cmp	r3, #3
 800471c:	d017      	beq.n	800474e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d123      	bne.n	80047a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	6939      	ldr	r1, [r7, #16]
 800479e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	2203      	movs	r2, #3
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0203 	and.w	r2, r3, #3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80a6 	beq.w	8004930 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <HAL_GPIO_Init+0x2e4>)
 80047e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e8:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <HAL_GPIO_Init+0x2e4>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6613      	str	r3, [r2, #96]	; 0x60
 80047f0:	4b58      	ldr	r3, [pc, #352]	; (8004954 <HAL_GPIO_Init+0x2e4>)
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047fc:	4a56      	ldr	r2, [pc, #344]	; (8004958 <HAL_GPIO_Init+0x2e8>)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	3302      	adds	r3, #2
 8004804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	220f      	movs	r2, #15
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004826:	d01f      	beq.n	8004868 <HAL_GPIO_Init+0x1f8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a4c      	ldr	r2, [pc, #304]	; (800495c <HAL_GPIO_Init+0x2ec>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d019      	beq.n	8004864 <HAL_GPIO_Init+0x1f4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a4b      	ldr	r2, [pc, #300]	; (8004960 <HAL_GPIO_Init+0x2f0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_GPIO_Init+0x1f0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_GPIO_Init+0x2f4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00d      	beq.n	800485c <HAL_GPIO_Init+0x1ec>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a49      	ldr	r2, [pc, #292]	; (8004968 <HAL_GPIO_Init+0x2f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <HAL_GPIO_Init+0x1e8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a48      	ldr	r2, [pc, #288]	; (800496c <HAL_GPIO_Init+0x2fc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <HAL_GPIO_Init+0x1e4>
 8004850:	2305      	movs	r3, #5
 8004852:	e00a      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 8004854:	2306      	movs	r3, #6
 8004856:	e008      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 8004858:	2304      	movs	r3, #4
 800485a:	e006      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 800485c:	2303      	movs	r3, #3
 800485e:	e004      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 8004860:	2302      	movs	r3, #2
 8004862:	e002      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_GPIO_Init+0x1fa>
 8004868:	2300      	movs	r3, #0
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	f002 0203 	and.w	r2, r2, #3
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	4093      	lsls	r3, r2
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487a:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_GPIO_Init+0x2e8>)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <HAL_GPIO_Init+0x300>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ac:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_GPIO_Init+0x300>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048b2:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <HAL_GPIO_Init+0x300>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <HAL_GPIO_Init+0x300>)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048dc:	4b24      	ldr	r3, [pc, #144]	; (8004970 <HAL_GPIO_Init+0x300>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_GPIO_Init+0x300>)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <HAL_GPIO_Init+0x300>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800492a:	4a11      	ldr	r2, [pc, #68]	; (8004970 <HAL_GPIO_Init+0x300>)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3301      	adds	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f ae9d 	bne.w	8004680 <HAL_GPIO_Init+0x10>
  }
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40021000 	.word	0x40021000
 8004958:	40010000 	.word	0x40010000
 800495c:	48000400 	.word	0x48000400
 8004960:	48000800 	.word	0x48000800
 8004964:	48000c00 	.word	0x48000c00
 8004968:	48001000 	.word	0x48001000
 800496c:	48001400 	.word	0x48001400
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
 8004990:	e001      	b.n	8004996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
 80049b0:	4613      	mov	r3, r2
 80049b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b4:	787b      	ldrb	r3, [r7, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049c0:	e002      	b.n	80049c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	041a      	lsls	r2, r3, #16
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43d9      	mvns	r1, r3
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	400b      	ands	r3, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e081      	b.n	8004b1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd fbea 	bl	8002208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	e006      	b.n	8004a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d104      	bne.n	8004aa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	817b      	strh	r3, [r7, #10]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	813b      	strh	r3, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	f040 80f9 	bne.w	8004d42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x34>
 8004b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0ed      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Mem_Write+0x4e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0e6      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7e:	f7fd fec1 	bl	8002904 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2319      	movs	r3, #25
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fac3 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0d1      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2221      	movs	r2, #33	; 0x21
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2240      	movs	r2, #64	; 0x40
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc8:	88f8      	ldrh	r0, [r7, #6]
 8004bca:	893a      	ldrh	r2, [r7, #8]
 8004bcc:	8979      	ldrh	r1, [r7, #10]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f9d3 	bl	8004f84 <I2C_RequestMemoryWrite>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0a9      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2bff      	cmp	r3, #255	; 0xff
 8004bf8:	d90e      	bls.n	8004c18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fc2b 	bl	800546c <I2C_TransferConfig>
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fc1a 	bl	800546c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 faad 	bl	800519c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e07b      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d034      	beq.n	8004cf0 <HAL_I2C_Mem_Write+0x1c8>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d130      	bne.n	8004cf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	2200      	movs	r2, #0
 8004c96:	2180      	movs	r1, #128	; 0x80
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fa3f 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e04d      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2bff      	cmp	r3, #255	; 0xff
 8004cb0:	d90e      	bls.n	8004cd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	8979      	ldrh	r1, [r7, #10]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fbcf 	bl	800546c <I2C_TransferConfig>
 8004cce:	e00f      	b.n	8004cf0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fbbe 	bl	800546c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d19e      	bne.n	8004c38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fa8c 	bl	800521c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e01a      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2220      	movs	r2, #32
 8004d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_I2C_Mem_Write+0x224>)
 8004d22:	400b      	ands	r3, r1
 8004d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e000      	b.n	8004d44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d42:	2302      	movs	r3, #2
  }
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	fe00e800 	.word	0xfe00e800

08004d50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	817b      	strh	r3, [r7, #10]
 8004d62:	460b      	mov	r3, r1
 8004d64:	813b      	strh	r3, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	f040 80fd 	bne.w	8004f72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x34>
 8004d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0f1      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_I2C_Mem_Read+0x4e>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0ea      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004da6:	f7fd fdad 	bl	8002904 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2319      	movs	r3, #25
 8004db2:	2201      	movs	r2, #1
 8004db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f9af 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0d5      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2222      	movs	r2, #34	; 0x22
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df0:	88f8      	ldrh	r0, [r7, #6]
 8004df2:	893a      	ldrh	r2, [r7, #8]
 8004df4:	8979      	ldrh	r1, [r7, #10]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4603      	mov	r3, r0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f913 	bl	800502c <I2C_RequestMemoryRead>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0ad      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2bff      	cmp	r3, #255	; 0xff
 8004e20:	d90e      	bls.n	8004e40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	; 0xff
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	8979      	ldrh	r1, [r7, #10]
 8004e30:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_I2C_Mem_Read+0x22c>)
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fb17 	bl	800546c <I2C_TransferConfig>
 8004e3e:	e00f      	b.n	8004e60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	8979      	ldrh	r1, [r7, #10]
 8004e52:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <HAL_I2C_Mem_Read+0x22c>)
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fb06 	bl	800546c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	2200      	movs	r2, #0
 8004e68:	2104      	movs	r1, #4
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f956 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07c      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d034      	beq.n	8004f20 <HAL_I2C_Mem_Read+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d130      	bne.n	8004f20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f927 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e04d      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2bff      	cmp	r3, #255	; 0xff
 8004ee0:	d90e      	bls.n	8004f00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	8979      	ldrh	r1, [r7, #10]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fab7 	bl	800546c <I2C_TransferConfig>
 8004efe:	e00f      	b.n	8004f20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	8979      	ldrh	r1, [r7, #10]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 faa6 	bl	800546c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d19a      	bne.n	8004e60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f974 	bl	800521c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01a      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2220      	movs	r2, #32
 8004f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_I2C_Mem_Read+0x230>)
 8004f52:	400b      	ands	r3, r1
 8004f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e000      	b.n	8004f74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	80002400 	.word	0x80002400
 8004f80:	fe00e800 	.word	0xfe00e800

08004f84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	817b      	strh	r3, [r7, #10]
 8004f96:	460b      	mov	r3, r1
 8004f98:	813b      	strh	r3, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	8979      	ldrh	r1, [r7, #10]
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <I2C_RequestMemoryWrite+0xa4>)
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fa5d 	bl	800546c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8f0 	bl	800519c <I2C_WaitOnTXISFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e02c      	b.n	8005020 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fcc:	893b      	ldrh	r3, [r7, #8]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd6:	e015      	b.n	8005004 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd8:	893b      	ldrh	r3, [r7, #8]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f8d6 	bl	800519c <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e012      	b.n	8005020 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffa:	893b      	ldrh	r3, [r7, #8]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f884 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	80002000 	.word	0x80002000

0800502c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4603      	mov	r3, r0
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	460b      	mov	r3, r1
 8005040:	813b      	strh	r3, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	8979      	ldrh	r1, [r7, #10]
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <I2C_RequestMemoryRead+0xa4>)
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2300      	movs	r3, #0
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fa0a 	bl	800546c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	69b9      	ldr	r1, [r7, #24]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f89d 	bl	800519c <I2C_WaitOnTXISFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e02c      	b.n	80050c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005072:	893b      	ldrh	r3, [r7, #8]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
 800507c:	e015      	b.n	80050aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	b29b      	uxth	r3, r3
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	69b9      	ldr	r1, [r7, #24]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f883 	bl	800519c <I2C_WaitOnTXISFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e012      	b.n	80050c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a0:	893b      	ldrh	r3, [r7, #8]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f831 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	80002000 	.word	0x80002000

080050d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d007      	beq.n	8005110 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	619a      	str	r2, [r3, #24]
  }
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512c:	e022      	b.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d01e      	beq.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fd fbe5 	bl	8002904 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d113      	bne.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e00f      	b.n	8005194 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d0cd      	beq.n	800512e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051a8:	e02c      	b.n	8005204 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f870 	bl	8005294 <I2C_IsErrorOccurred>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02a      	b.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d01e      	beq.n	8005204 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fd fb9d 	bl	8002904 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d113      	bne.n	8005204 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e007      	b.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d1cb      	bne.n	80051aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005228:	e028      	b.n	800527c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f830 	bl	8005294 <I2C_IsErrorOccurred>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e026      	b.n	800528c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fd fb61 	bl	8002904 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d113      	bne.n	800527c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	f043 0220 	orr.w	r2, r3, #32
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e007      	b.n	800528c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d1cf      	bne.n	800522a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d075      	beq.n	80053ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2210      	movs	r2, #16
 80052c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052c8:	e056      	b.n	8005378 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d052      	beq.n	8005378 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fd fb17 	bl	8002904 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <I2C_IsErrorOccurred+0x54>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d147      	bne.n	8005378 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530a:	d12e      	bne.n	800536a <I2C_IsErrorOccurred+0xd6>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005312:	d02a      	beq.n	800536a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	2b20      	cmp	r3, #32
 8005318:	d027      	beq.n	800536a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005328:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800532a:	f7fd faeb 	bl	8002904 <HAL_GetTick>
 800532e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005330:	e01b      	b.n	800536a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005332:	f7fd fae7 	bl	8002904 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b19      	cmp	r3, #25
 800533e:	d914      	bls.n	800536a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d1dc      	bne.n	8005332 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b20      	cmp	r3, #32
 8005384:	d003      	beq.n	800538e <I2C_IsErrorOccurred+0xfa>
 8005386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800538a:	2b00      	cmp	r3, #0
 800538c:	d09d      	beq.n	80052ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800538e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2220      	movs	r2, #32
 800539c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f043 0304 	orr.w	r3, r3, #4
 80053a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	f043 0308 	orr.w	r3, r3, #8
 80053e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005412:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800541a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01c      	beq.n	800545c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff fe56 	bl	80050d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <I2C_IsErrorOccurred+0x1d4>)
 8005434:	400b      	ands	r3, r1
 8005436:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	431a      	orrs	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800545c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005460:	4618      	mov	r0, r3
 8005462:	3728      	adds	r7, #40	; 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	fe00e800 	.word	0xfe00e800

0800546c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	4613      	mov	r3, r2
 800547c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005484:	7a7b      	ldrb	r3, [r7, #9]
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800548c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	4313      	orrs	r3, r2
 8005496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800549a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	0d5b      	lsrs	r3, r3, #21
 80054a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <I2C_TransferConfig+0x60>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	43db      	mvns	r3, r3
 80054b0:	ea02 0103 	and.w	r1, r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	03ff63ff 	.word	0x03ff63ff

080054d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d138      	bne.n	8005558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e032      	b.n	800555a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	; 0x24
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6819      	ldr	r1, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d139      	bne.n	80055f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005586:	2302      	movs	r3, #2
 8005588:	e033      	b.n	80055f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2224      	movs	r2, #36	; 0x24
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d141      	bne.n	8005692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800560e:	4b4b      	ldr	r3, [pc, #300]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	d131      	bne.n	8005680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800561c:	4b47      	ldr	r3, [pc, #284]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005622:	4a46      	ldr	r2, [pc, #280]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800562c:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005634:	4a41      	ldr	r2, [pc, #260]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800563c:	4b40      	ldr	r3, [pc, #256]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2232      	movs	r2, #50	; 0x32
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	4a3f      	ldr	r2, [pc, #252]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0c9b      	lsrs	r3, r3, #18
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005652:	e002      	b.n	800565a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800565a:	4b38      	ldr	r3, [pc, #224]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d102      	bne.n	800566e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f2      	bne.n	8005654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800566e:	4b33      	ldr	r3, [pc, #204]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d158      	bne.n	800572e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e057      	b.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005680:	4b2e      	ldr	r3, [pc, #184]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005686:	4a2d      	ldr	r2, [pc, #180]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005690:	e04d      	b.n	800572e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005698:	d141      	bne.n	800571e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800569a:	4b28      	ldr	r3, [pc, #160]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a6:	d131      	bne.n	800570c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a8:	4b24      	ldr	r3, [pc, #144]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ae:	4a23      	ldr	r2, [pc, #140]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c0:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2232      	movs	r2, #50	; 0x32
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0c9b      	lsrs	r3, r3, #18
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056de:	e002      	b.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d102      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f2      	bne.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d112      	bne.n	800572e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e011      	b.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800571c:	e007      	b.n	800572e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005726:	4a05      	ldr	r2, [pc, #20]	; (800573c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800572c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40007000 	.word	0x40007000
 8005740:	20000034 	.word	0x20000034
 8005744:	431bde83 	.word	0x431bde83

08005748 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005756:	6093      	str	r3, [r2, #8]
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40007000 	.word	0x40007000

08005768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e306      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d075      	beq.n	8005872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005786:	4b97      	ldr	r3, [pc, #604]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005790:	4b94      	ldr	r3, [pc, #592]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d102      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3e>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d002      	beq.n	80057ac <HAL_RCC_OscConfig+0x44>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10b      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05b      	beq.n	8005870 <HAL_RCC_OscConfig+0x108>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d157      	bne.n	8005870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e2e1      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d106      	bne.n	80057dc <HAL_RCC_OscConfig+0x74>
 80057ce:	4b85      	ldr	r3, [pc, #532]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a84      	ldr	r2, [pc, #528]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e01d      	b.n	8005818 <HAL_RCC_OscConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x98>
 80057e6:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7e      	ldr	r2, [pc, #504]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b7c      	ldr	r3, [pc, #496]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7b      	ldr	r2, [pc, #492]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0xb0>
 8005800:	4b78      	ldr	r3, [pc, #480]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a77      	ldr	r2, [pc, #476]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a74      	ldr	r2, [pc, #464]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fd f870 	bl	8002904 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fd f86c 	bl	8002904 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e2a6      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0xc0>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fd f85c 	bl	8002904 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fd f858 	bl	8002904 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e292      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005862:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0xe8>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d075      	beq.n	800596a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800587e:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d102      	bne.n	800589e <HAL_RCC_OscConfig+0x136>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_OscConfig+0x13c>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d11f      	bne.n	80058e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a4:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_OscConfig+0x154>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e265      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b49      	ldr	r3, [pc, #292]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	4946      	ldr	r1, [pc, #280]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fc ffc9 	bl	800286c <HAL_InitTick>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d043      	beq.n	8005968 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e251      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d023      	beq.n	8005934 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ec:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3c      	ldr	r2, [pc, #240]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fd f804 	bl	8002904 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005900:	f7fd f800 	bl	8002904 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e23a      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005912:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	492d      	ldr	r1, [pc, #180]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
 8005932:	e01a      	b.n	800596a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800593a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fc ffe0 	bl	8002904 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005948:	f7fc ffdc 	bl	8002904 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e216      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x1e0>
 8005966:	e000      	b.n	800596a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005968:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d041      	beq.n	80059fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01c      	beq.n	80059b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fc ffb9 	bl	8002904 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005996:	f7fc ffb5 	bl	8002904 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e1ef      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ef      	beq.n	8005996 <HAL_RCC_OscConfig+0x22e>
 80059b6:	e020      	b.n	80059fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <HAL_RCC_OscConfig+0x27c>)
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fc ff9c 	bl	8002904 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059ce:	e00d      	b.n	80059ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d0:	f7fc ff98 	bl	8002904 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d906      	bls.n	80059ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1d2      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059ec:	4b8c      	ldr	r3, [pc, #560]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ea      	bne.n	80059d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80a6 	beq.w	8005b54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a0c:	4b84      	ldr	r3, [pc, #528]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x2b4>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x2b6>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	4a7e      	ldr	r2, [pc, #504]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2e:	4b7c      	ldr	r3, [pc, #496]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a3e:	4b79      	ldr	r3, [pc, #484]	; (8005c24 <HAL_RCC_OscConfig+0x4bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d118      	bne.n	8005a7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4a:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x4bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a75      	ldr	r2, [pc, #468]	; (8005c24 <HAL_RCC_OscConfig+0x4bc>)
 8005a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a56:	f7fc ff55 	bl	8002904 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5e:	f7fc ff51 	bl	8002904 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e18b      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a70:	4b6c      	ldr	r3, [pc, #432]	; (8005c24 <HAL_RCC_OscConfig+0x4bc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d108      	bne.n	8005a96 <HAL_RCC_OscConfig+0x32e>
 8005a84:	4b66      	ldr	r3, [pc, #408]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8a:	4a65      	ldr	r2, [pc, #404]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a94:	e024      	b.n	8005ae0 <HAL_RCC_OscConfig+0x378>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d110      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x358>
 8005a9e:	4b60      	ldr	r3, [pc, #384]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	4a5e      	ldr	r2, [pc, #376]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005aa6:	f043 0304 	orr.w	r3, r3, #4
 8005aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aae:	4b5c      	ldr	r3, [pc, #368]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab4:	4a5a      	ldr	r2, [pc, #360]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005abe:	e00f      	b.n	8005ae0 <HAL_RCC_OscConfig+0x378>
 8005ac0:	4b57      	ldr	r3, [pc, #348]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	4a56      	ldr	r2, [pc, #344]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad0:	4b53      	ldr	r3, [pc, #332]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	4a52      	ldr	r2, [pc, #328]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d016      	beq.n	8005b16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fc ff0c 	bl	8002904 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af0:	f7fc ff08 	bl	8002904 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e140      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b06:	4b46      	ldr	r3, [pc, #280]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ed      	beq.n	8005af0 <HAL_RCC_OscConfig+0x388>
 8005b14:	e015      	b.n	8005b42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b16:	f7fc fef5 	bl	8002904 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1e:	f7fc fef1 	bl	8002904 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e129      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b34:	4b3a      	ldr	r3, [pc, #232]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ed      	bne.n	8005b1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b48:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	4a34      	ldr	r2, [pc, #208]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03c      	beq.n	8005bda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01c      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fc fec4 	bl	8002904 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b80:	f7fc fec0 	bl	8002904 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0fa      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b92:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ef      	beq.n	8005b80 <HAL_RCC_OscConfig+0x418>
 8005ba0:	e01b      	b.n	8005bda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fc fea7 	bl	8002904 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bba:	f7fc fea3 	bl	8002904 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0dd      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ef      	bne.n	8005bba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80d1 	beq.w	8005d86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 030c 	and.w	r3, r3, #12
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	f000 808b 	beq.w	8005d08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d15e      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fc fe7d 	bl	8002904 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	e00c      	b.n	8005c28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7fc fe79 	bl	8002904 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d905      	bls.n	8005c28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0b3      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c28:	4b59      	ldr	r3, [pc, #356]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ec      	bne.n	8005c0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c34:	4b56      	ldr	r3, [pc, #344]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	4b56      	ldr	r3, [pc, #344]	; (8005d94 <HAL_RCC_OscConfig+0x62c>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6a11      	ldr	r1, [r2, #32]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0112      	lsls	r2, r2, #4
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c4e:	0212      	lsls	r2, r2, #8
 8005c50:	4311      	orrs	r1, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c56:	0852      	lsrs	r2, r2, #1
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0552      	lsls	r2, r2, #21
 8005c5c:	4311      	orrs	r1, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c62:	0852      	lsrs	r2, r2, #1
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0652      	lsls	r2, r2, #25
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c6e:	06d2      	lsls	r2, r2, #27
 8005c70:	430a      	orrs	r2, r1
 8005c72:	4947      	ldr	r1, [pc, #284]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c78:	4b45      	ldr	r3, [pc, #276]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a44      	ldr	r2, [pc, #272]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c84:	4b42      	ldr	r3, [pc, #264]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a41      	ldr	r2, [pc, #260]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fc fe38 	bl	8002904 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c98:	f7fc fe34 	bl	8002904 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e06e      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005caa:	4b39      	ldr	r3, [pc, #228]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x530>
 8005cb6:	e066      	b.n	8005d86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb8:	4b35      	ldr	r3, [pc, #212]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a34      	ldr	r2, [pc, #208]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cc4:	4b32      	ldr	r3, [pc, #200]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4a31      	ldr	r2, [pc, #196]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fe10 	bl	8002904 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fc fe0c 	bl	8002904 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e046      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cfa:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x580>
 8005d06:	e03e      	b.n	8005d86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e039      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d14:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <HAL_RCC_OscConfig+0x628>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f003 0203 	and.w	r2, r3, #3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d12c      	bne.n	8005d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	3b01      	subs	r3, #1
 8005d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d123      	bne.n	8005d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d11b      	bne.n	8005d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d113      	bne.n	8005d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	3b01      	subs	r3, #1
 8005d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d109      	bne.n	8005d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d001      	beq.n	8005d86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	019f800c 	.word	0x019f800c

08005d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e11e      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005db0:	4b91      	ldr	r3, [pc, #580]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d910      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b8e      	ldr	r3, [pc, #568]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 020f 	bic.w	r2, r3, #15
 8005dc6:	498c      	ldr	r1, [pc, #560]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b8a      	ldr	r3, [pc, #552]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e106      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d073      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d129      	bne.n	8005e48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df4:	4b81      	ldr	r3, [pc, #516]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0f4      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e04:	f000 f99c 	bl	8006140 <RCC_GetSysClockFreqFromPLLSource>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4a7c      	ldr	r2, [pc, #496]	; (8006000 <HAL_RCC_ClockConfig+0x268>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d93f      	bls.n	8005e92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e12:	4b7a      	ldr	r3, [pc, #488]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d033      	beq.n	8005e92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d12f      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e32:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e3a:	4a70      	ldr	r2, [pc, #448]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e024      	b.n	8005e92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0c6      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e60:	4b66      	ldr	r3, [pc, #408]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0be      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e70:	f000 f8ce 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4a61      	ldr	r2, [pc, #388]	; (8006000 <HAL_RCC_ClockConfig+0x268>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d909      	bls.n	8005e92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e7e:	4b5f      	ldr	r3, [pc, #380]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e86:	4a5d      	ldr	r2, [pc, #372]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e92:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4957      	ldr	r1, [pc, #348]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fc fd2e 	bl	8002904 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eac:	f7fc fd2a 	bl	8002904 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e095      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	4b4e      	ldr	r3, [pc, #312]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 020c 	and.w	r2, r3, #12
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d1eb      	bne.n	8005eac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d023      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eec:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	4a42      	ldr	r2, [pc, #264]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ef6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f04:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f0c:	4a3b      	ldr	r2, [pc, #236]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f14:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4936      	ldr	r1, [pc, #216]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f2e:	4b33      	ldr	r3, [pc, #204]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4a32      	ldr	r2, [pc, #200]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d21d      	bcs.n	8005f84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 020f 	bic.w	r2, r3, #15
 8005f50:	4929      	ldr	r1, [pc, #164]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f58:	f7fc fcd4 	bl	8002904 <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7fc fcd0 	bl	8002904 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e03b      	b.n	8005fee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1ed      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4917      	ldr	r1, [pc, #92]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	490f      	ldr	r1, [pc, #60]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fc2:	f000 f825 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <HAL_RCC_ClockConfig+0x264>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	490c      	ldr	r1, [pc, #48]	; (8006004 <HAL_RCC_ClockConfig+0x26c>)
 8005fd4:	5ccb      	ldrb	r3, [r1, r3]
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	fa22 f303 	lsr.w	r3, r2, r3
 8005fde:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <HAL_RCC_ClockConfig+0x270>)
 8005fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_RCC_ClockConfig+0x274>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fc fc40 	bl	800286c <HAL_InitTick>
 8005fec:	4603      	mov	r3, r0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40022000 	.word	0x40022000
 8005ffc:	40021000 	.word	0x40021000
 8006000:	04c4b400 	.word	0x04c4b400
 8006004:	0800bca4 	.word	0x0800bca4
 8006008:	20000034 	.word	0x20000034
 800600c:	20000038 	.word	0x20000038

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006016:	4b2c      	ldr	r3, [pc, #176]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d102      	bne.n	8006028 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	e047      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006028:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b08      	cmp	r3, #8
 8006032:	d102      	bne.n	800603a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	e03e      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800603a:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d136      	bne.n	80060b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006050:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	3301      	adds	r3, #1
 800605c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d10c      	bne.n	800607e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800606e:	68d2      	ldr	r2, [r2, #12]
 8006070:	0a12      	lsrs	r2, r2, #8
 8006072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	617b      	str	r3, [r7, #20]
      break;
 800607c:	e00c      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006088:	68d2      	ldr	r2, [r2, #12]
 800608a:	0a12      	lsrs	r2, r2, #8
 800608c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006090:	fb02 f303 	mul.w	r3, r2, r3
 8006094:	617b      	str	r3, [r7, #20]
      break;
 8006096:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	0e5b      	lsrs	r3, r3, #25
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	3301      	adds	r3, #1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e001      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060b8:	693b      	ldr	r3, [r7, #16]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000
 80060cc:	00f42400 	.word	0x00f42400

080060d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000034 	.word	0x20000034

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060ec:	f7ff fff0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4904      	ldr	r1, [pc, #16]	; (8006110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40021000 	.word	0x40021000
 8006110:	0800bcb4 	.word	0x0800bcb4

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006118:	f7ff ffda 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	0adb      	lsrs	r3, r3, #11
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	; (800613c <HAL_RCC_GetPCLK2Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000
 800613c:	0800bcb4 	.word	0x0800bcb4

08006140 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006146:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006150:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b03      	cmp	r3, #3
 8006162:	d10c      	bne.n	800617e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006164:	4a17      	ldr	r2, [pc, #92]	; (80061c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800616e:	68d2      	ldr	r2, [r2, #12]
 8006170:	0a12      	lsrs	r2, r2, #8
 8006172:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	617b      	str	r3, [r7, #20]
    break;
 800617c:	e00c      	b.n	8006198 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006188:	68d2      	ldr	r2, [r2, #12]
 800618a:	0a12      	lsrs	r2, r2, #8
 800618c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]
    break;
 8006196:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	0e5b      	lsrs	r3, r3, #25
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	3301      	adds	r3, #1
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061b2:	687b      	ldr	r3, [r7, #4]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40021000 	.word	0x40021000
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d0:	2300      	movs	r3, #0
 80061d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d4:	2300      	movs	r3, #0
 80061d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8098 	beq.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006200:	6593      	str	r3, [r2, #88]	; 0x58
 8006202:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a39      	ldr	r2, [pc, #228]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fc fb71 	bl	8002904 <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006224:	e009      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fc fb6d 	bl	8002904 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d902      	bls.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	74fb      	strb	r3, [r7, #19]
        break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800623a:	4b30      	ldr	r3, [pc, #192]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ef      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d159      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624c:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d019      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006268:	4b23      	ldr	r3, [pc, #140]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fc fb2d 	bl	8002904 <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ac:	e00b      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fc fb29 	bl	8002904 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d902      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	74fb      	strb	r3, [r7, #19]
            break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ec      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e8:	4903      	ldr	r1, [pc, #12]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062f0:	e008      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	74bb      	strb	r3, [r7, #18]
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006304:	7c7b      	ldrb	r3, [r7, #17]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4ba7      	ldr	r3, [pc, #668]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	4aa6      	ldr	r2, [pc, #664]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006322:	4ba1      	ldr	r3, [pc, #644]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	f023 0203 	bic.w	r2, r3, #3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	499d      	ldr	r1, [pc, #628]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006344:	4b98      	ldr	r3, [pc, #608]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f023 020c 	bic.w	r2, r3, #12
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4995      	ldr	r1, [pc, #596]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006366:	4b90      	ldr	r3, [pc, #576]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	498c      	ldr	r1, [pc, #560]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006388:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4984      	ldr	r1, [pc, #528]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063aa:	4b7f      	ldr	r3, [pc, #508]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	497b      	ldr	r1, [pc, #492]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063cc:	4b76      	ldr	r3, [pc, #472]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	4973      	ldr	r1, [pc, #460]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ee:	4b6e      	ldr	r3, [pc, #440]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	496a      	ldr	r1, [pc, #424]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006410:	4b65      	ldr	r3, [pc, #404]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4962      	ldr	r1, [pc, #392]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006432:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	4959      	ldr	r1, [pc, #356]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006454:	4b54      	ldr	r3, [pc, #336]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	4951      	ldr	r1, [pc, #324]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006472:	2b00      	cmp	r3, #0
 8006474:	d015      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006476:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4948      	ldr	r1, [pc, #288]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006494:	d105      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006496:	4b44      	ldr	r3, [pc, #272]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4a43      	ldr	r2, [pc, #268]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064ae:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	493a      	ldr	r1, [pc, #232]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064cc:	d105      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4a35      	ldr	r2, [pc, #212]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d015      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	492c      	ldr	r1, [pc, #176]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006504:	d105      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006506:	4b28      	ldr	r3, [pc, #160]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006510:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d015      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800651e:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	491e      	ldr	r1, [pc, #120]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800653c:	d105      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653e:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006548:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d015      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	4910      	ldr	r1, [pc, #64]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006574:	d105      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4a0b      	ldr	r2, [pc, #44]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006580:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006594:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	4902      	ldr	r1, [pc, #8]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065a8:	40021000 	.word	0x40021000
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065b2:	d105      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065b4:	4b21      	ldr	r3, [pc, #132]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80065cc:	4b1b      	ldr	r3, [pc, #108]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	4918      	ldr	r1, [pc, #96]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a12      	ldr	r2, [pc, #72]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006604:	4b0d      	ldr	r3, [pc, #52]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800660a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	490a      	ldr	r1, [pc, #40]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a04      	ldr	r2, [pc, #16]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800662a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800662e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006630:	7cbb      	ldrb	r3, [r7, #18]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000

08006640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e09d      	b.n	800678e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d009      	beq.n	8006678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	61da      	str	r2, [r3, #28]
 800666a:	e005      	b.n	8006678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fb fec6 	bl	8002424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066b8:	d902      	bls.n	80066c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e002      	b.n	80066c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066ce:	d007      	beq.n	80066e0 <HAL_SPI_Init+0xa0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d8:	d002      	beq.n	80066e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	ea42 0103 	orr.w	r1, r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	f003 0204 	and.w	r2, r3, #4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800675c:	ea42 0103 	orr.w	r1, r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e049      	b.n	800683c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fb fe75 	bl	80024ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f000 fe69 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e049      	b.n	80068ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f841 	bl	80068f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fe12 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_TIM_PWM_Start+0x24>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e03c      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d109      	bne.n	8006946 <HAL_TIM_PWM_Start+0x3e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	e02f      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d109      	bne.n	8006960 <HAL_TIM_PWM_Start+0x58>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	e022      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	d109      	bne.n	800697a <HAL_TIM_PWM_Start+0x72>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b01      	cmp	r3, #1
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	e015      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b10      	cmp	r3, #16
 800697e:	d109      	bne.n	8006994 <HAL_TIM_PWM_Start+0x8c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e008      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0a1      	b.n	8006af2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_TIM_PWM_Start+0xb6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069bc:	e023      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_PWM_Start+0xc6>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069cc:	e01b      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d104      	bne.n	80069de <HAL_TIM_PWM_Start+0xd6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069dc:	e013      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_PWM_Start+0xe6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069ec:	e00b      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_PWM_Start+0xf6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fc:	e003      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fad4 	bl	8007fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a38      	ldr	r2, [pc, #224]	; (8006afc <HAL_TIM_PWM_Start+0x1f4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x148>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a37      	ldr	r2, [pc, #220]	; (8006b00 <HAL_TIM_PWM_Start+0x1f8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x148>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <HAL_TIM_PWM_Start+0x1fc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x148>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a34      	ldr	r2, [pc, #208]	; (8006b08 <HAL_TIM_PWM_Start+0x200>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x148>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_TIM_PWM_Start+0x204>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x148>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a31      	ldr	r2, [pc, #196]	; (8006b10 <HAL_TIM_PWM_Start+0x208>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_PWM_Start+0x14c>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_TIM_PWM_Start+0x14e>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a23      	ldr	r2, [pc, #140]	; (8006afc <HAL_TIM_PWM_Start+0x1f4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d01d      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d018      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a24      	ldr	r2, [pc, #144]	; (8006b14 <HAL_TIM_PWM_Start+0x20c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d013      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <HAL_TIM_PWM_Start+0x210>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00e      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_TIM_PWM_Start+0x1f8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <HAL_TIM_PWM_Start+0x1fc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_TIM_PWM_Start+0x1a8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <HAL_TIM_PWM_Start+0x208>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d115      	bne.n	8006adc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <HAL_TIM_PWM_Start+0x214>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d015      	beq.n	8006aee <HAL_TIM_PWM_Start+0x1e6>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac8:	d011      	beq.n	8006aee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0201 	orr.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	e008      	b.n	8006aee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e000      	b.n	8006af0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800
 8006b10:	40015000 	.word	0x40015000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	00010007 	.word	0x00010007

08006b20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e049      	b.n	8006bc6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f841 	bl	8006bce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 fca4 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d122      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d11b      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f06f 0202 	mvn.w	r2, #2
 8006c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc23 	bl	8007470 <HAL_TIM_IC_CaptureCallback>
 8006c2a:	e005      	b.n	8006c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc15 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc26 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d122      	bne.n	8006c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d11b      	bne.n	8006c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f06f 0204 	mvn.w	r2, #4
 8006c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fbf9 	bl	8007470 <HAL_TIM_IC_CaptureCallback>
 8006c7e:	e005      	b.n	8006c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fbeb 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fbfc 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d122      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d11b      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f06f 0208 	mvn.w	r2, #8
 8006cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fbcf 	bl	8007470 <HAL_TIM_IC_CaptureCallback>
 8006cd2:	e005      	b.n	8006ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fbc1 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fbd2 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d122      	bne.n	8006d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d11b      	bne.n	8006d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0210 	mvn.w	r2, #16
 8006d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fba5 	bl	8007470 <HAL_TIM_IC_CaptureCallback>
 8006d26:	e005      	b.n	8006d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb97 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fba8 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d10e      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d107      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f06f 0201 	mvn.w	r2, #1
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb71 	bl	8007448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d10e      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d107      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f9d3 	bl	8008138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da0:	d10e      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 f9c6 	bl	800814c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d10e      	bne.n	8006dec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d107      	bne.n	8006dec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb56 	bl	8007498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d10e      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0220 	mvn.w	r2, #32
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f986 	bl	8008124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e26:	d10f      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e36:	d107      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f98c 	bl	8008160 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e56:	d10f      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f97e 	bl	8008174 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e86:	d10f      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f970 	bl	8008188 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f962 	bl	800819c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_TIM_IC_ConfigChannel+0x1e>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e088      	b.n	8007010 <HAL_TIM_IC_ConfigChannel+0x130>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11b      	bne.n	8006f44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f000 fe8e 	bl	8007c3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 020c 	bic.w	r2, r2, #12
 8006f2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6999      	ldr	r1, [r3, #24]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	619a      	str	r2, [r3, #24]
 8006f42:	e060      	b.n	8007006 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d11c      	bne.n	8006f84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f000 ff0c 	bl	8007d76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6999      	ldr	r1, [r3, #24]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	021a      	lsls	r2, r3, #8
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	619a      	str	r2, [r3, #24]
 8006f82:	e040      	b.n	8007006 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d11b      	bne.n	8006fc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f000 ff59 	bl	8007e50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 020c 	bic.w	r2, r2, #12
 8006fac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69d9      	ldr	r1, [r3, #28]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	61da      	str	r2, [r3, #28]
 8006fc0:	e021      	b.n	8007006 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b0c      	cmp	r3, #12
 8006fc6:	d11c      	bne.n	8007002 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f000 ff76 	bl	8007ec8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69d9      	ldr	r1, [r3, #28]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	021a      	lsls	r2, r3, #8
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	61da      	str	r2, [r3, #28]
 8007000:	e001      	b.n	8007006 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007032:	2302      	movs	r3, #2
 8007034:	e0ff      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b14      	cmp	r3, #20
 8007042:	f200 80f0 	bhi.w	8007226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070a1 	.word	0x080070a1
 8007050:	08007227 	.word	0x08007227
 8007054:	08007227 	.word	0x08007227
 8007058:	08007227 	.word	0x08007227
 800705c:	080070e1 	.word	0x080070e1
 8007060:	08007227 	.word	0x08007227
 8007064:	08007227 	.word	0x08007227
 8007068:	08007227 	.word	0x08007227
 800706c:	08007123 	.word	0x08007123
 8007070:	08007227 	.word	0x08007227
 8007074:	08007227 	.word	0x08007227
 8007078:	08007227 	.word	0x08007227
 800707c:	08007163 	.word	0x08007163
 8007080:	08007227 	.word	0x08007227
 8007084:	08007227 	.word	0x08007227
 8007088:	08007227 	.word	0x08007227
 800708c:	080071a5 	.word	0x080071a5
 8007090:	08007227 	.word	0x08007227
 8007094:	08007227 	.word	0x08007227
 8007098:	08007227 	.word	0x08007227
 800709c:	080071e5 	.word	0x080071e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fa9e 	bl	80075e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0208 	orr.w	r2, r2, #8
 80070ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0204 	bic.w	r2, r2, #4
 80070ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6999      	ldr	r1, [r3, #24]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	619a      	str	r2, [r3, #24]
      break;
 80070de:	e0a5      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fb18 	bl	800771c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6999      	ldr	r1, [r3, #24]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	619a      	str	r2, [r3, #24]
      break;
 8007120:	e084      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fb8b 	bl	8007844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0208 	orr.w	r2, r2, #8
 800713c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0204 	bic.w	r2, r2, #4
 800714c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69d9      	ldr	r1, [r3, #28]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	61da      	str	r2, [r3, #28]
      break;
 8007160:	e064      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fbfd 	bl	8007968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800717c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69d9      	ldr	r1, [r3, #28]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	021a      	lsls	r2, r3, #8
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	61da      	str	r2, [r3, #28]
      break;
 80071a2:	e043      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fc70 	bl	8007a90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0208 	orr.w	r2, r2, #8
 80071be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0204 	bic.w	r2, r2, #4
 80071ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80071e2:	e023      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fcba 	bl	8007b64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	021a      	lsls	r2, r3, #8
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007224:	e002      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
      break;
 800722a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIM_ConfigClockSource+0x1c>
 8007258:	2302      	movs	r3, #2
 800725a:	e0e6      	b.n	800742a <HAL_TIM_ConfigClockSource+0x1ea>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800727a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800727e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a67      	ldr	r2, [pc, #412]	; (8007434 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f000 80b1 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 800729c:	4a65      	ldr	r2, [pc, #404]	; (8007434 <HAL_TIM_ConfigClockSource+0x1f4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f200 80b6 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072a4:	4a64      	ldr	r2, [pc, #400]	; (8007438 <HAL_TIM_ConfigClockSource+0x1f8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	f000 80a9 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 80072ac:	4a62      	ldr	r2, [pc, #392]	; (8007438 <HAL_TIM_ConfigClockSource+0x1f8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	f200 80ae 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072b4:	4a61      	ldr	r2, [pc, #388]	; (800743c <HAL_TIM_ConfigClockSource+0x1fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	f000 80a1 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 80072bc:	4a5f      	ldr	r2, [pc, #380]	; (800743c <HAL_TIM_ConfigClockSource+0x1fc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	f200 80a6 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072c4:	4a5e      	ldr	r2, [pc, #376]	; (8007440 <HAL_TIM_ConfigClockSource+0x200>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f000 8099 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 80072cc:	4a5c      	ldr	r2, [pc, #368]	; (8007440 <HAL_TIM_ConfigClockSource+0x200>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	f200 809e 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072d4:	4a5b      	ldr	r2, [pc, #364]	; (8007444 <HAL_TIM_ConfigClockSource+0x204>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	f000 8091 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 80072dc:	4a59      	ldr	r2, [pc, #356]	; (8007444 <HAL_TIM_ConfigClockSource+0x204>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	f200 8096 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072e8:	f000 8089 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 80072ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072f0:	f200 808e 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 80072f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f8:	d03e      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x138>
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	f200 8087 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	f000 8086 	beq.w	8007416 <HAL_TIM_ConfigClockSource+0x1d6>
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730e:	d87f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007310:	2b70      	cmp	r3, #112	; 0x70
 8007312:	d01a      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x10a>
 8007314:	2b70      	cmp	r3, #112	; 0x70
 8007316:	d87b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d050      	beq.n	80073be <HAL_TIM_ConfigClockSource+0x17e>
 800731c:	2b60      	cmp	r3, #96	; 0x60
 800731e:	d877      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007320:	2b50      	cmp	r3, #80	; 0x50
 8007322:	d03c      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x15e>
 8007324:	2b50      	cmp	r3, #80	; 0x50
 8007326:	d873      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d058      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x19e>
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d86f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d064      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d86b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d060      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 800733c:	2b20      	cmp	r3, #32
 800733e:	d867      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d05c      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 8007344:	2b10      	cmp	r3, #16
 8007346:	d05a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x1be>
 8007348:	e062      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6899      	ldr	r1, [r3, #8]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f000 fe0f 	bl	8007f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800736c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
      break;
 8007376:	e04f      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6899      	ldr	r1, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f000 fdf8 	bl	8007f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800739a:	609a      	str	r2, [r3, #8]
      break;
 800739c:	e03c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6859      	ldr	r1, [r3, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f000 fcb4 	bl	8007d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2150      	movs	r1, #80	; 0x50
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fdc3 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 80073bc:	e02c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fd10 	bl	8007df0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2160      	movs	r1, #96	; 0x60
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fdb3 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 80073dc:	e01c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f000 fc94 	bl	8007d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fda3 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 80073fc:	e00c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f000 fd9a 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 800740e:	e003      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	e000      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	00100070 	.word	0x00100070
 8007438:	00100050 	.word	0x00100050
 800743c:	00100040 	.word	0x00100040
 8007440:	00100030 	.word	0x00100030
 8007444:	00100020 	.word	0x00100020

08007448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a42      	ldr	r2, [pc, #264]	; (80075c8 <TIM_Base_SetConfig+0x11c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d00f      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3f      	ldr	r2, [pc, #252]	; (80075cc <TIM_Base_SetConfig+0x120>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a3e      	ldr	r2, [pc, #248]	; (80075d0 <TIM_Base_SetConfig+0x124>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a3d      	ldr	r2, [pc, #244]	; (80075d4 <TIM_Base_SetConfig+0x128>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3c      	ldr	r2, [pc, #240]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d108      	bne.n	80074fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a31      	ldr	r2, [pc, #196]	; (80075c8 <TIM_Base_SetConfig+0x11c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01f      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2e      	ldr	r2, [pc, #184]	; (80075cc <TIM_Base_SetConfig+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2d      	ldr	r2, [pc, #180]	; (80075d0 <TIM_Base_SetConfig+0x124>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <TIM_Base_SetConfig+0x128>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <TIM_Base_SetConfig+0x130>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2b      	ldr	r2, [pc, #172]	; (80075e0 <TIM_Base_SetConfig+0x134>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <TIM_Base_SetConfig+0x138>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a25      	ldr	r2, [pc, #148]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <TIM_Base_SetConfig+0x11c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <TIM_Base_SetConfig+0x100>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a13      	ldr	r2, [pc, #76]	; (80075d4 <TIM_Base_SetConfig+0x128>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00f      	beq.n	80075ac <TIM_Base_SetConfig+0x100>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a13      	ldr	r2, [pc, #76]	; (80075dc <TIM_Base_SetConfig+0x130>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00b      	beq.n	80075ac <TIM_Base_SetConfig+0x100>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <TIM_Base_SetConfig+0x134>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_Base_SetConfig+0x100>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <TIM_Base_SetConfig+0x138>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_Base_SetConfig+0x100>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d103      	bne.n	80075b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	615a      	str	r2, [r3, #20]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40000400 	.word	0x40000400
 80075d0:	40000800 	.word	0x40000800
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40015000 	.word	0x40015000
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0302 	bic.w	r3, r3, #2
 8007634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a30      	ldr	r2, [pc, #192]	; (8007704 <TIM_OC1_SetConfig+0x11c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2f      	ldr	r2, [pc, #188]	; (8007708 <TIM_OC1_SetConfig+0x120>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a2e      	ldr	r2, [pc, #184]	; (800770c <TIM_OC1_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <TIM_OC1_SetConfig+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <TIM_OC1_SetConfig+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2b      	ldr	r2, [pc, #172]	; (8007718 <TIM_OC1_SetConfig+0x130>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10c      	bne.n	800768a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0308 	bic.w	r3, r3, #8
 8007676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <TIM_OC1_SetConfig+0x11c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <TIM_OC1_SetConfig+0x120>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <TIM_OC1_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00b      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1a      	ldr	r2, [pc, #104]	; (8007710 <TIM_OC1_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a19      	ldr	r2, [pc, #100]	; (8007714 <TIM_OC1_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a18      	ldr	r2, [pc, #96]	; (8007718 <TIM_OC1_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800
 8007718:	40015000 	.word	0x40015000

0800771c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f023 0210 	bic.w	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a2c      	ldr	r2, [pc, #176]	; (800782c <TIM_OC2_SetConfig+0x110>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a2b      	ldr	r2, [pc, #172]	; (8007830 <TIM_OC2_SetConfig+0x114>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <TIM_OC2_SetConfig+0x118>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10d      	bne.n	80077ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1f      	ldr	r2, [pc, #124]	; (800782c <TIM_OC2_SetConfig+0x110>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <TIM_OC2_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <TIM_OC2_SetConfig+0x11c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	; (800783c <TIM_OC2_SetConfig+0x120>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <TIM_OC2_SetConfig+0x124>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a17      	ldr	r2, [pc, #92]	; (8007834 <TIM_OC2_SetConfig+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d113      	bne.n	8007804 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40012c00 	.word	0x40012c00
 8007830:	40013400 	.word	0x40013400
 8007834:	40015000 	.word	0x40015000
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800

08007844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2b      	ldr	r2, [pc, #172]	; (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <TIM_OC3_SetConfig+0x110>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a29      	ldr	r2, [pc, #164]	; (8007958 <TIM_OC3_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10d      	bne.n	80078d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <TIM_OC3_SetConfig+0x110>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	; (800795c <TIM_OC3_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <TIM_OC3_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <TIM_OC3_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a16      	ldr	r2, [pc, #88]	; (8007958 <TIM_OC3_SetConfig+0x114>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d113      	bne.n	800792a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40012c00 	.word	0x40012c00
 8007954:	40013400 	.word	0x40013400
 8007958:	40015000 	.word	0x40015000
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2c      	ldr	r2, [pc, #176]	; (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2b      	ldr	r2, [pc, #172]	; (8007a7c <TIM_OC4_SetConfig+0x114>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2a      	ldr	r2, [pc, #168]	; (8007a80 <TIM_OC4_SetConfig+0x118>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10d      	bne.n	80079f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	031b      	lsls	r3, r3, #12
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1e      	ldr	r2, [pc, #120]	; (8007a7c <TIM_OC4_SetConfig+0x114>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00f      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	; (8007a84 <TIM_OC4_SetConfig+0x11c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <TIM_OC4_SetConfig+0x120>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <TIM_OC4_SetConfig+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <TIM_OC4_SetConfig+0x118>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d113      	bne.n	8007a50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40015000 	.word	0x40015000
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800

08007a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	041b      	lsls	r3, r3, #16
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <TIM_OC5_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <TIM_OC5_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00f      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <TIM_OC5_SetConfig+0xc4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <TIM_OC5_SetConfig+0xc8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <TIM_OC5_SetConfig+0xcc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a14      	ldr	r2, [pc, #80]	; (8007b60 <TIM_OC5_SetConfig+0xd0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d109      	bne.n	8007b26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	051b      	lsls	r3, r3, #20
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <TIM_OC6_SetConfig+0xc0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a19      	ldr	r2, [pc, #100]	; (8007c28 <TIM_OC6_SetConfig+0xc4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00f      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <TIM_OC6_SetConfig+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <TIM_OC6_SetConfig+0xcc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <TIM_OC6_SetConfig+0xd0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <TIM_OC6_SetConfig+0xd4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d109      	bne.n	8007bfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800
 8007c38:	40015000 	.word	0x40015000

08007c3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0201 	bic.w	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a26      	ldr	r2, [pc, #152]	; (8007d00 <TIM_TI1_SetConfig+0xc4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d017      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c70:	d013      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <TIM_TI1_SetConfig+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00f      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a22      	ldr	r2, [pc, #136]	; (8007d08 <TIM_TI1_SetConfig+0xcc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00b      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4a21      	ldr	r2, [pc, #132]	; (8007d0c <TIM_TI1_SetConfig+0xd0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4a20      	ldr	r2, [pc, #128]	; (8007d10 <TIM_TI1_SetConfig+0xd4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_TI1_SetConfig+0x5e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a1f      	ldr	r2, [pc, #124]	; (8007d14 <TIM_TI1_SetConfig+0xd8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d101      	bne.n	8007c9e <TIM_TI1_SetConfig+0x62>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <TIM_TI1_SetConfig+0x64>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	e003      	b.n	8007cbe <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f023 030a 	bic.w	r3, r3, #10
 8007cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f003 030a 	and.w	r3, r3, #10
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40012c00 	.word	0x40012c00
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40000800 	.word	0x40000800
 8007d0c:	40013400 	.word	0x40013400
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40015000 	.word	0x40015000

08007d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f023 0201 	bic.w	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f023 030a 	bic.w	r3, r3, #10
 8007d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b087      	sub	sp, #28
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f023 0210 	bic.w	r2, r3, #16
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	031b      	lsls	r3, r3, #12
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	621a      	str	r2, [r3, #32]
}
 8007de4:	bf00      	nop
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	f023 0210 	bic.w	r2, r3, #16
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	031b      	lsls	r3, r3, #12
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	621a      	str	r2, [r3, #32]
}
 8007ebc:	bf00      	nop
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	031b      	lsls	r3, r3, #12
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	031b      	lsls	r3, r3, #12
 8007f20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f043 0307 	orr.w	r3, r3, #7
 8007f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	609a      	str	r2, [r3, #8]
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	021a      	lsls	r2, r3, #8
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	609a      	str	r2, [r3, #8]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2201      	movs	r2, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a1a      	ldr	r2, [r3, #32]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	401a      	ands	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800801c:	2302      	movs	r3, #2
 800801e:	e06f      	b.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a31      	ldr	r2, [pc, #196]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d009      	beq.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a30      	ldr	r2, [pc, #192]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d004      	beq.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a2e      	ldr	r2, [pc, #184]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d108      	bne.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d01d      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d018      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1c      	ldr	r2, [pc, #112]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d013      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1a      	ldr	r2, [pc, #104]	; (800811c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00e      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a15      	ldr	r2, [pc, #84]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d009      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a16      	ldr	r2, [pc, #88]	; (8008120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a11      	ldr	r2, [pc, #68]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d10c      	bne.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40015000 	.word	0x40015000
 8008118:	40000400 	.word	0x40000400
 800811c:	40000800 	.word	0x40000800
 8008120:	40014000 	.word	0x40014000

08008124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e042      	b.n	8008248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fa f8cd 	bl	8002374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2224      	movs	r2, #36	; 0x24
 80081de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8c2 	bl	800837c <UART_SetConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e022      	b.n	8008248 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fbb2 	bl	8008974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800821e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800822e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc39 	bl	8008ab8 <UART_CheckIdleState>
 8008246:	4603      	mov	r3, r0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	; 0x28
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008266:	2b20      	cmp	r3, #32
 8008268:	f040 8083 	bne.w	8008372 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_UART_Transmit+0x28>
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e07b      	b.n	8008374 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_UART_Transmit+0x3a>
 8008286:	2302      	movs	r3, #2
 8008288:	e074      	b.n	8008374 <HAL_UART_Transmit+0x124>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2221      	movs	r2, #33	; 0x21
 800829e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a2:	f7fa fb2f 	bl	8002904 <HAL_GetTick>
 80082a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c0:	d108      	bne.n	80082d4 <HAL_UART_Transmit+0x84>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e003      	b.n	80082dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80082e4:	e02c      	b.n	8008340 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2200      	movs	r2, #0
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fc2c 	bl	8008b4e <UART_WaitOnFlagUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e039      	b.n	8008374 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008314:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	3302      	adds	r3, #2
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e007      	b.n	800832e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1cc      	bne.n	80082e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2200      	movs	r2, #0
 8008354:	2140      	movs	r1, #64	; 0x40
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fbf9 	bl	8008b4e <UART_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e006      	b.n	8008374 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800837c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008380:	b08c      	sub	sp, #48	; 0x30
 8008382:	af00      	add	r7, sp, #0
 8008384:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	431a      	orrs	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	431a      	orrs	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4baa      	ldr	r3, [pc, #680]	; (8008654 <UART_SetConfig+0x2d8>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a9f      	ldr	r2, [pc, #636]	; (8008658 <UART_SetConfig+0x2dc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e4:	4313      	orrs	r3, r2
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80083f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083fc:	430b      	orrs	r3, r1
 80083fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	f023 010f 	bic.w	r1, r3, #15
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a90      	ldr	r2, [pc, #576]	; (800865c <UART_SetConfig+0x2e0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d125      	bne.n	800846c <UART_SetConfig+0xf0>
 8008420:	4b8f      	ldr	r3, [pc, #572]	; (8008660 <UART_SetConfig+0x2e4>)
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b03      	cmp	r3, #3
 800842c:	d81a      	bhi.n	8008464 <UART_SetConfig+0xe8>
 800842e:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <UART_SetConfig+0xb8>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008445 	.word	0x08008445
 8008438:	08008455 	.word	0x08008455
 800843c:	0800844d 	.word	0x0800844d
 8008440:	0800845d 	.word	0x0800845d
 8008444:	2301      	movs	r3, #1
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844a:	e116      	b.n	800867a <UART_SetConfig+0x2fe>
 800844c:	2302      	movs	r3, #2
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e112      	b.n	800867a <UART_SetConfig+0x2fe>
 8008454:	2304      	movs	r3, #4
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845a:	e10e      	b.n	800867a <UART_SetConfig+0x2fe>
 800845c:	2308      	movs	r3, #8
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e10a      	b.n	800867a <UART_SetConfig+0x2fe>
 8008464:	2310      	movs	r3, #16
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e106      	b.n	800867a <UART_SetConfig+0x2fe>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a7c      	ldr	r2, [pc, #496]	; (8008664 <UART_SetConfig+0x2e8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d138      	bne.n	80084e8 <UART_SetConfig+0x16c>
 8008476:	4b7a      	ldr	r3, [pc, #488]	; (8008660 <UART_SetConfig+0x2e4>)
 8008478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847c:	f003 030c 	and.w	r3, r3, #12
 8008480:	2b0c      	cmp	r3, #12
 8008482:	d82d      	bhi.n	80084e0 <UART_SetConfig+0x164>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x110>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084c1 	.word	0x080084c1
 8008490:	080084e1 	.word	0x080084e1
 8008494:	080084e1 	.word	0x080084e1
 8008498:	080084e1 	.word	0x080084e1
 800849c:	080084d1 	.word	0x080084d1
 80084a0:	080084e1 	.word	0x080084e1
 80084a4:	080084e1 	.word	0x080084e1
 80084a8:	080084e1 	.word	0x080084e1
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084e1 	.word	0x080084e1
 80084b4:	080084e1 	.word	0x080084e1
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	e0d8      	b.n	800867a <UART_SetConfig+0x2fe>
 80084c8:	2302      	movs	r3, #2
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ce:	e0d4      	b.n	800867a <UART_SetConfig+0x2fe>
 80084d0:	2304      	movs	r3, #4
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d6:	e0d0      	b.n	800867a <UART_SetConfig+0x2fe>
 80084d8:	2308      	movs	r3, #8
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084de:	e0cc      	b.n	800867a <UART_SetConfig+0x2fe>
 80084e0:	2310      	movs	r3, #16
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e6:	e0c8      	b.n	800867a <UART_SetConfig+0x2fe>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a5e      	ldr	r2, [pc, #376]	; (8008668 <UART_SetConfig+0x2ec>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d125      	bne.n	800853e <UART_SetConfig+0x1c2>
 80084f2:	4b5b      	ldr	r3, [pc, #364]	; (8008660 <UART_SetConfig+0x2e4>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fc:	2b30      	cmp	r3, #48	; 0x30
 80084fe:	d016      	beq.n	800852e <UART_SetConfig+0x1b2>
 8008500:	2b30      	cmp	r3, #48	; 0x30
 8008502:	d818      	bhi.n	8008536 <UART_SetConfig+0x1ba>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d00a      	beq.n	800851e <UART_SetConfig+0x1a2>
 8008508:	2b20      	cmp	r3, #32
 800850a:	d814      	bhi.n	8008536 <UART_SetConfig+0x1ba>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <UART_SetConfig+0x19a>
 8008510:	2b10      	cmp	r3, #16
 8008512:	d008      	beq.n	8008526 <UART_SetConfig+0x1aa>
 8008514:	e00f      	b.n	8008536 <UART_SetConfig+0x1ba>
 8008516:	2300      	movs	r3, #0
 8008518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851c:	e0ad      	b.n	800867a <UART_SetConfig+0x2fe>
 800851e:	2302      	movs	r3, #2
 8008520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008524:	e0a9      	b.n	800867a <UART_SetConfig+0x2fe>
 8008526:	2304      	movs	r3, #4
 8008528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852c:	e0a5      	b.n	800867a <UART_SetConfig+0x2fe>
 800852e:	2308      	movs	r3, #8
 8008530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008534:	e0a1      	b.n	800867a <UART_SetConfig+0x2fe>
 8008536:	2310      	movs	r3, #16
 8008538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853c:	e09d      	b.n	800867a <UART_SetConfig+0x2fe>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a4a      	ldr	r2, [pc, #296]	; (800866c <UART_SetConfig+0x2f0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d125      	bne.n	8008594 <UART_SetConfig+0x218>
 8008548:	4b45      	ldr	r3, [pc, #276]	; (8008660 <UART_SetConfig+0x2e4>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008552:	2bc0      	cmp	r3, #192	; 0xc0
 8008554:	d016      	beq.n	8008584 <UART_SetConfig+0x208>
 8008556:	2bc0      	cmp	r3, #192	; 0xc0
 8008558:	d818      	bhi.n	800858c <UART_SetConfig+0x210>
 800855a:	2b80      	cmp	r3, #128	; 0x80
 800855c:	d00a      	beq.n	8008574 <UART_SetConfig+0x1f8>
 800855e:	2b80      	cmp	r3, #128	; 0x80
 8008560:	d814      	bhi.n	800858c <UART_SetConfig+0x210>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <UART_SetConfig+0x1f0>
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d008      	beq.n	800857c <UART_SetConfig+0x200>
 800856a:	e00f      	b.n	800858c <UART_SetConfig+0x210>
 800856c:	2300      	movs	r3, #0
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008572:	e082      	b.n	800867a <UART_SetConfig+0x2fe>
 8008574:	2302      	movs	r3, #2
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857a:	e07e      	b.n	800867a <UART_SetConfig+0x2fe>
 800857c:	2304      	movs	r3, #4
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e07a      	b.n	800867a <UART_SetConfig+0x2fe>
 8008584:	2308      	movs	r3, #8
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858a:	e076      	b.n	800867a <UART_SetConfig+0x2fe>
 800858c:	2310      	movs	r3, #16
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008592:	e072      	b.n	800867a <UART_SetConfig+0x2fe>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a35      	ldr	r2, [pc, #212]	; (8008670 <UART_SetConfig+0x2f4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d12a      	bne.n	80085f4 <UART_SetConfig+0x278>
 800859e:	4b30      	ldr	r3, [pc, #192]	; (8008660 <UART_SetConfig+0x2e4>)
 80085a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ac:	d01a      	beq.n	80085e4 <UART_SetConfig+0x268>
 80085ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b2:	d81b      	bhi.n	80085ec <UART_SetConfig+0x270>
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b8:	d00c      	beq.n	80085d4 <UART_SetConfig+0x258>
 80085ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085be:	d815      	bhi.n	80085ec <UART_SetConfig+0x270>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <UART_SetConfig+0x250>
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c8:	d008      	beq.n	80085dc <UART_SetConfig+0x260>
 80085ca:	e00f      	b.n	80085ec <UART_SetConfig+0x270>
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e052      	b.n	800867a <UART_SetConfig+0x2fe>
 80085d4:	2302      	movs	r3, #2
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e04e      	b.n	800867a <UART_SetConfig+0x2fe>
 80085dc:	2304      	movs	r3, #4
 80085de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e2:	e04a      	b.n	800867a <UART_SetConfig+0x2fe>
 80085e4:	2308      	movs	r3, #8
 80085e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ea:	e046      	b.n	800867a <UART_SetConfig+0x2fe>
 80085ec:	2310      	movs	r3, #16
 80085ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f2:	e042      	b.n	800867a <UART_SetConfig+0x2fe>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a17      	ldr	r2, [pc, #92]	; (8008658 <UART_SetConfig+0x2dc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d13a      	bne.n	8008674 <UART_SetConfig+0x2f8>
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <UART_SetConfig+0x2e4>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860c:	d01a      	beq.n	8008644 <UART_SetConfig+0x2c8>
 800860e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008612:	d81b      	bhi.n	800864c <UART_SetConfig+0x2d0>
 8008614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008618:	d00c      	beq.n	8008634 <UART_SetConfig+0x2b8>
 800861a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861e:	d815      	bhi.n	800864c <UART_SetConfig+0x2d0>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <UART_SetConfig+0x2b0>
 8008624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008628:	d008      	beq.n	800863c <UART_SetConfig+0x2c0>
 800862a:	e00f      	b.n	800864c <UART_SetConfig+0x2d0>
 800862c:	2300      	movs	r3, #0
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e022      	b.n	800867a <UART_SetConfig+0x2fe>
 8008634:	2302      	movs	r3, #2
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863a:	e01e      	b.n	800867a <UART_SetConfig+0x2fe>
 800863c:	2304      	movs	r3, #4
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008642:	e01a      	b.n	800867a <UART_SetConfig+0x2fe>
 8008644:	2308      	movs	r3, #8
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e016      	b.n	800867a <UART_SetConfig+0x2fe>
 800864c:	2310      	movs	r3, #16
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008652:	e012      	b.n	800867a <UART_SetConfig+0x2fe>
 8008654:	cfff69f3 	.word	0xcfff69f3
 8008658:	40008000 	.word	0x40008000
 800865c:	40013800 	.word	0x40013800
 8008660:	40021000 	.word	0x40021000
 8008664:	40004400 	.word	0x40004400
 8008668:	40004800 	.word	0x40004800
 800866c:	40004c00 	.word	0x40004c00
 8008670:	40005000 	.word	0x40005000
 8008674:	2310      	movs	r3, #16
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4aae      	ldr	r2, [pc, #696]	; (8008938 <UART_SetConfig+0x5bc>)
 8008680:	4293      	cmp	r3, r2
 8008682:	f040 8097 	bne.w	80087b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800868a:	2b08      	cmp	r3, #8
 800868c:	d823      	bhi.n	80086d6 <UART_SetConfig+0x35a>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <UART_SetConfig+0x318>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086d7 	.word	0x080086d7
 800869c:	080086c1 	.word	0x080086c1
 80086a0:	080086d7 	.word	0x080086d7
 80086a4:	080086c7 	.word	0x080086c7
 80086a8:	080086d7 	.word	0x080086d7
 80086ac:	080086d7 	.word	0x080086d7
 80086b0:	080086d7 	.word	0x080086d7
 80086b4:	080086cf 	.word	0x080086cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b8:	f7fd fd16 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80086bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086be:	e010      	b.n	80086e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c0:	4b9e      	ldr	r3, [pc, #632]	; (800893c <UART_SetConfig+0x5c0>)
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086c4:	e00d      	b.n	80086e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c6:	f7fd fca3 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086cc:	e009      	b.n	80086e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086d4:	e005      	b.n	80086e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8130 	beq.w	800894a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	4a94      	ldr	r2, [pc, #592]	; (8008940 <UART_SetConfig+0x5c4>)
 80086f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	429a      	cmp	r2, r3
 800870c:	d305      	bcc.n	800871a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	429a      	cmp	r2, r3
 8008718:	d903      	bls.n	8008722 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008720:	e113      	b.n	800894a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	2200      	movs	r2, #0
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	60fa      	str	r2, [r7, #12]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	4a84      	ldr	r2, [pc, #528]	; (8008940 <UART_SetConfig+0x5c4>)
 8008730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008734:	b29b      	uxth	r3, r3
 8008736:	2200      	movs	r2, #0
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008744:	f7f8 fa58 	bl	8000bf8 <__aeabi_uldivmod>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4610      	mov	r0, r2
 800874e:	4619      	mov	r1, r3
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	020b      	lsls	r3, r1, #8
 800875a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800875e:	0202      	lsls	r2, r0, #8
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	6849      	ldr	r1, [r1, #4]
 8008764:	0849      	lsrs	r1, r1, #1
 8008766:	2000      	movs	r0, #0
 8008768:	460c      	mov	r4, r1
 800876a:	4605      	mov	r5, r0
 800876c:	eb12 0804 	adds.w	r8, r2, r4
 8008770:	eb43 0905 	adc.w	r9, r3, r5
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	469a      	mov	sl, r3
 800877c:	4693      	mov	fp, r2
 800877e:	4652      	mov	r2, sl
 8008780:	465b      	mov	r3, fp
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	f7f8 fa37 	bl	8000bf8 <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4613      	mov	r3, r2
 8008790:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008798:	d308      	bcc.n	80087ac <UART_SetConfig+0x430>
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a0:	d204      	bcs.n	80087ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6a3a      	ldr	r2, [r7, #32]
 80087a8:	60da      	str	r2, [r3, #12]
 80087aa:	e0ce      	b.n	800894a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087b2:	e0ca      	b.n	800894a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087bc:	d166      	bne.n	800888c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80087be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d827      	bhi.n	8008816 <UART_SetConfig+0x49a>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x450>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008817 	.word	0x08008817
 80087dc:	08008807 	.word	0x08008807
 80087e0:	08008817 	.word	0x08008817
 80087e4:	08008817 	.word	0x08008817
 80087e8:	08008817 	.word	0x08008817
 80087ec:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f0:	f7fd fc7a 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fd fc8c 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b4e      	ldr	r3, [pc, #312]	; (800893c <UART_SetConfig+0x5c0>)
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fd fc03 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8090 	beq.w	800894a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	4a44      	ldr	r2, [pc, #272]	; (8008940 <UART_SetConfig+0x5c4>)
 8008830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008834:	461a      	mov	r2, r3
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	fbb3 f3f2 	udiv	r3, r3, r2
 800883c:	005a      	lsls	r2, r3, #1
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	441a      	add	r2, r3
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	2b0f      	cmp	r3, #15
 8008854:	d916      	bls.n	8008884 <UART_SetConfig+0x508>
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885c:	d212      	bcs.n	8008884 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f023 030f 	bic.w	r3, r3, #15
 8008866:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	b29b      	uxth	r3, r3
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	b29a      	uxth	r2, r3
 8008874:	8bfb      	ldrh	r3, [r7, #30]
 8008876:	4313      	orrs	r3, r2
 8008878:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	8bfa      	ldrh	r2, [r7, #30]
 8008880:	60da      	str	r2, [r3, #12]
 8008882:	e062      	b.n	800894a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800888a:	e05e      	b.n	800894a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800888c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008890:	2b08      	cmp	r3, #8
 8008892:	d828      	bhi.n	80088e6 <UART_SetConfig+0x56a>
 8008894:	a201      	add	r2, pc, #4	; (adr r2, 800889c <UART_SetConfig+0x520>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088e7 	.word	0x080088e7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088e7 	.word	0x080088e7
 80088b4:	080088e7 	.word	0x080088e7
 80088b8:	080088e7 	.word	0x080088e7
 80088bc:	080088df 	.word	0x080088df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c0:	f7fd fc12 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80088c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088c6:	e014      	b.n	80088f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088c8:	f7fd fc24 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ce:	e010      	b.n	80088f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d0:	4b1a      	ldr	r3, [pc, #104]	; (800893c <UART_SetConfig+0x5c0>)
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e00d      	b.n	80088f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d6:	f7fd fb9b 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088dc:	e009      	b.n	80088f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e4:	e005      	b.n	80088f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f0:	bf00      	nop
    }

    if (pclk != 0U)
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d028      	beq.n	800894a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	4a10      	ldr	r2, [pc, #64]	; (8008940 <UART_SetConfig+0x5c4>)
 80088fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008902:	461a      	mov	r2, r3
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	fbb3 f2f2 	udiv	r2, r3, r2
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	085b      	lsrs	r3, r3, #1
 8008910:	441a      	add	r2, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	fbb2 f3f3 	udiv	r3, r2, r3
 800891a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d910      	bls.n	8008944 <UART_SetConfig+0x5c8>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d20c      	bcs.n	8008944 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	b29a      	uxth	r2, r3
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	e009      	b.n	800894a <UART_SetConfig+0x5ce>
 8008936:	bf00      	nop
 8008938:	40008000 	.word	0x40008000
 800893c:	00f42400 	.word	0x00f42400
 8008940:	0800bccc 	.word	0x0800bccc
      }
      else
      {
        ret = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2201      	movs	r2, #1
 800894e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2201      	movs	r2, #1
 8008956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2200      	movs	r2, #0
 8008964:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008966:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800896a:	4618      	mov	r0, r3
 800896c:	3730      	adds	r7, #48	; 0x30
 800896e:	46bd      	mov	sp, r7
 8008970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a72:	d10a      	bne.n	8008a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ac8:	f7f9 ff1c 	bl	8002904 <HAL_GetTick>
 8008acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d10e      	bne.n	8008afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f82f 	bl	8008b4e <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e025      	b.n	8008b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d10e      	bne.n	8008b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f819 	bl	8008b4e <UART_WaitOnFlagUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e00f      	b.n	8008b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b09c      	sub	sp, #112	; 0x70
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	603b      	str	r3, [r7, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5e:	e0a9      	b.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	f000 80a5 	beq.w	8008cb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6a:	f7f9 fecb 	bl	8002904 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d302      	bcc.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d140      	bne.n	8008c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b94:	667b      	str	r3, [r7, #100]	; 0x64
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e6      	bne.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e5      	bne.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e069      	b.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d051      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1e:	d149      	bne.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c7c:	623a      	str	r2, [r7, #32]
 8008c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	6a3a      	ldr	r2, [r7, #32]
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e010      	b.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69da      	ldr	r2, [r3, #28]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	f43f af46 	beq.w	8008b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3770      	adds	r7, #112	; 0x70
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d101      	bne.n	8008cf4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	e027      	b.n	8008d44 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2224      	movs	r2, #36	; 0x24
 8008d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0201 	bic.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e02d      	b.n	8008dc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2224      	movs	r2, #36	; 0x24
 8008d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0201 	bic.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f84f 	bl	8008e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e02d      	b.n	8008e40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2224      	movs	r2, #36	; 0x24
 8008df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0201 	bic.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f811 	bl	8008e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d108      	bne.n	8008e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e68:	e031      	b.n	8008ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e6e:	2308      	movs	r3, #8
 8008e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	0e5b      	lsrs	r3, r3, #25
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	0f5b      	lsrs	r3, r3, #29
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	7b3a      	ldrb	r2, [r7, #12]
 8008e96:	4911      	ldr	r1, [pc, #68]	; (8008edc <UARTEx_SetNbDataToProcess+0x94>)
 8008e98:	5c8a      	ldrb	r2, [r1, r2]
 8008e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e9e:	7b3a      	ldrb	r2, [r7, #12]
 8008ea0:	490f      	ldr	r1, [pc, #60]	; (8008ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	7b7a      	ldrb	r2, [r7, #13]
 8008eb4:	4909      	ldr	r1, [pc, #36]	; (8008edc <UARTEx_SetNbDataToProcess+0x94>)
 8008eb6:	5c8a      	ldrb	r2, [r1, r2]
 8008eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ebc:	7b7a      	ldrb	r2, [r7, #13]
 8008ebe:	4908      	ldr	r1, [pc, #32]	; (8008ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	0800bce4 	.word	0x0800bce4
 8008ee0:	0800bcec 	.word	0x0800bcec

08008ee4 <rand>:
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <rand+0x5c>)
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	681c      	ldr	r4, [r3, #0]
 8008eea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008eec:	b9b3      	cbnz	r3, 8008f1c <rand+0x38>
 8008eee:	2018      	movs	r0, #24
 8008ef0:	f001 fd14 	bl	800a91c <malloc>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6320      	str	r0, [r4, #48]	; 0x30
 8008ef8:	b920      	cbnz	r0, 8008f04 <rand+0x20>
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <rand+0x60>)
 8008efc:	4812      	ldr	r0, [pc, #72]	; (8008f48 <rand+0x64>)
 8008efe:	2152      	movs	r1, #82	; 0x52
 8008f00:	f000 fe26 	bl	8009b50 <__assert_func>
 8008f04:	4911      	ldr	r1, [pc, #68]	; (8008f4c <rand+0x68>)
 8008f06:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <rand+0x6c>)
 8008f08:	e9c0 1300 	strd	r1, r3, [r0]
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <rand+0x70>)
 8008f0e:	6083      	str	r3, [r0, #8]
 8008f10:	230b      	movs	r3, #11
 8008f12:	8183      	strh	r3, [r0, #12]
 8008f14:	2100      	movs	r1, #0
 8008f16:	2001      	movs	r0, #1
 8008f18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008f1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008f1e:	480e      	ldr	r0, [pc, #56]	; (8008f58 <rand+0x74>)
 8008f20:	690b      	ldr	r3, [r1, #16]
 8008f22:	694c      	ldr	r4, [r1, #20]
 8008f24:	4a0d      	ldr	r2, [pc, #52]	; (8008f5c <rand+0x78>)
 8008f26:	4358      	muls	r0, r3
 8008f28:	fb02 0004 	mla	r0, r2, r4, r0
 8008f2c:	fba3 3202 	umull	r3, r2, r3, r2
 8008f30:	3301      	adds	r3, #1
 8008f32:	eb40 0002 	adc.w	r0, r0, r2
 8008f36:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008f3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f3e:	bd10      	pop	{r4, pc}
 8008f40:	20000098 	.word	0x20000098
 8008f44:	0800bcf4 	.word	0x0800bcf4
 8008f48:	0800bd0b 	.word	0x0800bd0b
 8008f4c:	abcd330e 	.word	0xabcd330e
 8008f50:	e66d1234 	.word	0xe66d1234
 8008f54:	0005deec 	.word	0x0005deec
 8008f58:	5851f42d 	.word	0x5851f42d
 8008f5c:	4c957f2d 	.word	0x4c957f2d

08008f60 <__cvt>:
 8008f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f64:	ec55 4b10 	vmov	r4, r5, d0
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	460e      	mov	r6, r1
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	462b      	mov	r3, r5
 8008f70:	bfbb      	ittet	lt
 8008f72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f76:	461d      	movlt	r5, r3
 8008f78:	2300      	movge	r3, #0
 8008f7a:	232d      	movlt	r3, #45	; 0x2d
 8008f7c:	700b      	strb	r3, [r1, #0]
 8008f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f84:	4691      	mov	r9, r2
 8008f86:	f023 0820 	bic.w	r8, r3, #32
 8008f8a:	bfbc      	itt	lt
 8008f8c:	4622      	movlt	r2, r4
 8008f8e:	4614      	movlt	r4, r2
 8008f90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f94:	d005      	beq.n	8008fa2 <__cvt+0x42>
 8008f96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f9a:	d100      	bne.n	8008f9e <__cvt+0x3e>
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	e000      	b.n	8008fa4 <__cvt+0x44>
 8008fa2:	2103      	movs	r1, #3
 8008fa4:	ab03      	add	r3, sp, #12
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	ab02      	add	r3, sp, #8
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	ec45 4b10 	vmov	d0, r4, r5
 8008fb0:	4653      	mov	r3, sl
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	f000 fe74 	bl	8009ca0 <_dtoa_r>
 8008fb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	d102      	bne.n	8008fc6 <__cvt+0x66>
 8008fc0:	f019 0f01 	tst.w	r9, #1
 8008fc4:	d022      	beq.n	800900c <__cvt+0xac>
 8008fc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fca:	eb07 0906 	add.w	r9, r7, r6
 8008fce:	d110      	bne.n	8008ff2 <__cvt+0x92>
 8008fd0:	783b      	ldrb	r3, [r7, #0]
 8008fd2:	2b30      	cmp	r3, #48	; 0x30
 8008fd4:	d10a      	bne.n	8008fec <__cvt+0x8c>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7f7 fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8008fe2:	b918      	cbnz	r0, 8008fec <__cvt+0x8c>
 8008fe4:	f1c6 0601 	rsb	r6, r6, #1
 8008fe8:	f8ca 6000 	str.w	r6, [sl]
 8008fec:	f8da 3000 	ldr.w	r3, [sl]
 8008ff0:	4499      	add	r9, r3
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 8008ffe:	b108      	cbz	r0, 8009004 <__cvt+0xa4>
 8009000:	f8cd 900c 	str.w	r9, [sp, #12]
 8009004:	2230      	movs	r2, #48	; 0x30
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	454b      	cmp	r3, r9
 800900a:	d307      	bcc.n	800901c <__cvt+0xbc>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009010:	1bdb      	subs	r3, r3, r7
 8009012:	4638      	mov	r0, r7
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	b004      	add	sp, #16
 8009018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901c:	1c59      	adds	r1, r3, #1
 800901e:	9103      	str	r1, [sp, #12]
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e7f0      	b.n	8009006 <__cvt+0xa6>

08009024 <__exponent>:
 8009024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009026:	4603      	mov	r3, r0
 8009028:	2900      	cmp	r1, #0
 800902a:	bfb8      	it	lt
 800902c:	4249      	neglt	r1, r1
 800902e:	f803 2b02 	strb.w	r2, [r3], #2
 8009032:	bfb4      	ite	lt
 8009034:	222d      	movlt	r2, #45	; 0x2d
 8009036:	222b      	movge	r2, #43	; 0x2b
 8009038:	2909      	cmp	r1, #9
 800903a:	7042      	strb	r2, [r0, #1]
 800903c:	dd2a      	ble.n	8009094 <__exponent+0x70>
 800903e:	f10d 0207 	add.w	r2, sp, #7
 8009042:	4617      	mov	r7, r2
 8009044:	260a      	movs	r6, #10
 8009046:	4694      	mov	ip, r2
 8009048:	fb91 f5f6 	sdiv	r5, r1, r6
 800904c:	fb06 1415 	mls	r4, r6, r5, r1
 8009050:	3430      	adds	r4, #48	; 0x30
 8009052:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009056:	460c      	mov	r4, r1
 8009058:	2c63      	cmp	r4, #99	; 0x63
 800905a:	f102 32ff 	add.w	r2, r2, #4294967295
 800905e:	4629      	mov	r1, r5
 8009060:	dcf1      	bgt.n	8009046 <__exponent+0x22>
 8009062:	3130      	adds	r1, #48	; 0x30
 8009064:	f1ac 0402 	sub.w	r4, ip, #2
 8009068:	f802 1c01 	strb.w	r1, [r2, #-1]
 800906c:	1c41      	adds	r1, r0, #1
 800906e:	4622      	mov	r2, r4
 8009070:	42ba      	cmp	r2, r7
 8009072:	d30a      	bcc.n	800908a <__exponent+0x66>
 8009074:	f10d 0209 	add.w	r2, sp, #9
 8009078:	eba2 020c 	sub.w	r2, r2, ip
 800907c:	42bc      	cmp	r4, r7
 800907e:	bf88      	it	hi
 8009080:	2200      	movhi	r2, #0
 8009082:	4413      	add	r3, r2
 8009084:	1a18      	subs	r0, r3, r0
 8009086:	b003      	add	sp, #12
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800908e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009092:	e7ed      	b.n	8009070 <__exponent+0x4c>
 8009094:	2330      	movs	r3, #48	; 0x30
 8009096:	3130      	adds	r1, #48	; 0x30
 8009098:	7083      	strb	r3, [r0, #2]
 800909a:	70c1      	strb	r1, [r0, #3]
 800909c:	1d03      	adds	r3, r0, #4
 800909e:	e7f1      	b.n	8009084 <__exponent+0x60>

080090a0 <_printf_float>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ed2d 8b02 	vpush	{d8}
 80090a8:	b08d      	sub	sp, #52	; 0x34
 80090aa:	460c      	mov	r4, r1
 80090ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090b0:	4616      	mov	r6, r2
 80090b2:	461f      	mov	r7, r3
 80090b4:	4605      	mov	r5, r0
 80090b6:	f000 fcd5 	bl	8009a64 <_localeconv_r>
 80090ba:	f8d0 a000 	ldr.w	sl, [r0]
 80090be:	4650      	mov	r0, sl
 80090c0:	f7f7 f8fe 	bl	80002c0 <strlen>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	; 0x28
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090d4:	3307      	adds	r3, #7
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	f103 0208 	add.w	r2, r3, #8
 80090de:	f8c8 2000 	str.w	r2, [r8]
 80090e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f0:	ee08 0a10 	vmov	s16, r0
 80090f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fc:	4b9e      	ldr	r3, [pc, #632]	; (8009378 <_printf_float+0x2d8>)
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	f7f7 fd3b 	bl	8000b7c <__aeabi_dcmpun>
 8009106:	bb88      	cbnz	r0, 800916c <_printf_float+0xcc>
 8009108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910c:	4b9a      	ldr	r3, [pc, #616]	; (8009378 <_printf_float+0x2d8>)
 800910e:	f04f 32ff 	mov.w	r2, #4294967295
 8009112:	f7f7 fd15 	bl	8000b40 <__aeabi_dcmple>
 8009116:	bb48      	cbnz	r0, 800916c <_printf_float+0xcc>
 8009118:	2200      	movs	r2, #0
 800911a:	2300      	movs	r3, #0
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 fd04 	bl	8000b2c <__aeabi_dcmplt>
 8009124:	b110      	cbz	r0, 800912c <_printf_float+0x8c>
 8009126:	232d      	movs	r3, #45	; 0x2d
 8009128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912c:	4a93      	ldr	r2, [pc, #588]	; (800937c <_printf_float+0x2dc>)
 800912e:	4b94      	ldr	r3, [pc, #592]	; (8009380 <_printf_float+0x2e0>)
 8009130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009134:	bf94      	ite	ls
 8009136:	4690      	movls	r8, r2
 8009138:	4698      	movhi	r8, r3
 800913a:	2303      	movs	r3, #3
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	f023 0304 	bic.w	r3, r3, #4
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	9700      	str	r7, [sp, #0]
 800914c:	4633      	mov	r3, r6
 800914e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f9da 	bl	800950c <_printf_common>
 8009158:	3001      	adds	r0, #1
 800915a:	f040 8090 	bne.w	800927e <_printf_float+0x1de>
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	b00d      	add	sp, #52	; 0x34
 8009164:	ecbd 8b02 	vpop	{d8}
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fd02 	bl	8000b7c <__aeabi_dcmpun>
 8009178:	b140      	cbz	r0, 800918c <_printf_float+0xec>
 800917a:	464b      	mov	r3, r9
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbc      	itt	lt
 8009180:	232d      	movlt	r3, #45	; 0x2d
 8009182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009186:	4a7f      	ldr	r2, [pc, #508]	; (8009384 <_printf_float+0x2e4>)
 8009188:	4b7f      	ldr	r3, [pc, #508]	; (8009388 <_printf_float+0x2e8>)
 800918a:	e7d1      	b.n	8009130 <_printf_float+0x90>
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009192:	9206      	str	r2, [sp, #24]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	d13f      	bne.n	8009218 <_printf_float+0x178>
 8009198:	2306      	movs	r3, #6
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	6861      	ldr	r1, [r4, #4]
 80091a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091a4:	2300      	movs	r3, #0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	ab0a      	add	r3, sp, #40	; 0x28
 80091aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ae:	ab09      	add	r3, sp, #36	; 0x24
 80091b0:	ec49 8b10 	vmov	d0, r8, r9
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fecf 	bl	8008f60 <__cvt>
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	2b47      	cmp	r3, #71	; 0x47
 80091c8:	4680      	mov	r8, r0
 80091ca:	d108      	bne.n	80091de <_printf_float+0x13e>
 80091cc:	1cc8      	adds	r0, r1, #3
 80091ce:	db02      	blt.n	80091d6 <_printf_float+0x136>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	4299      	cmp	r1, r3
 80091d4:	dd41      	ble.n	800925a <_printf_float+0x1ba>
 80091d6:	f1ab 0302 	sub.w	r3, fp, #2
 80091da:	fa5f fb83 	uxtb.w	fp, r3
 80091de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091e2:	d820      	bhi.n	8009226 <_printf_float+0x186>
 80091e4:	3901      	subs	r1, #1
 80091e6:	465a      	mov	r2, fp
 80091e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091ec:	9109      	str	r1, [sp, #36]	; 0x24
 80091ee:	f7ff ff19 	bl	8009024 <__exponent>
 80091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f4:	1813      	adds	r3, r2, r0
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	4681      	mov	r9, r0
 80091fa:	6123      	str	r3, [r4, #16]
 80091fc:	dc02      	bgt.n	8009204 <_printf_float+0x164>
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	07d2      	lsls	r2, r2, #31
 8009202:	d501      	bpl.n	8009208 <_printf_float+0x168>
 8009204:	3301      	adds	r3, #1
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800920c:	2b00      	cmp	r3, #0
 800920e:	d09c      	beq.n	800914a <_printf_float+0xaa>
 8009210:	232d      	movs	r3, #45	; 0x2d
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009216:	e798      	b.n	800914a <_printf_float+0xaa>
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	2a47      	cmp	r2, #71	; 0x47
 800921c:	d1be      	bne.n	800919c <_printf_float+0xfc>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bc      	bne.n	800919c <_printf_float+0xfc>
 8009222:	2301      	movs	r3, #1
 8009224:	e7b9      	b.n	800919a <_printf_float+0xfa>
 8009226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800922a:	d118      	bne.n	800925e <_printf_float+0x1be>
 800922c:	2900      	cmp	r1, #0
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	dd0b      	ble.n	800924a <_printf_float+0x1aa>
 8009232:	6121      	str	r1, [r4, #16]
 8009234:	b913      	cbnz	r3, 800923c <_printf_float+0x19c>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	07d0      	lsls	r0, r2, #31
 800923a:	d502      	bpl.n	8009242 <_printf_float+0x1a2>
 800923c:	3301      	adds	r3, #1
 800923e:	440b      	add	r3, r1
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	65a1      	str	r1, [r4, #88]	; 0x58
 8009244:	f04f 0900 	mov.w	r9, #0
 8009248:	e7de      	b.n	8009208 <_printf_float+0x168>
 800924a:	b913      	cbnz	r3, 8009252 <_printf_float+0x1b2>
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	07d2      	lsls	r2, r2, #31
 8009250:	d501      	bpl.n	8009256 <_printf_float+0x1b6>
 8009252:	3302      	adds	r3, #2
 8009254:	e7f4      	b.n	8009240 <_printf_float+0x1a0>
 8009256:	2301      	movs	r3, #1
 8009258:	e7f2      	b.n	8009240 <_printf_float+0x1a0>
 800925a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	4299      	cmp	r1, r3
 8009262:	db05      	blt.n	8009270 <_printf_float+0x1d0>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	6121      	str	r1, [r4, #16]
 8009268:	07d8      	lsls	r0, r3, #31
 800926a:	d5ea      	bpl.n	8009242 <_printf_float+0x1a2>
 800926c:	1c4b      	adds	r3, r1, #1
 800926e:	e7e7      	b.n	8009240 <_printf_float+0x1a0>
 8009270:	2900      	cmp	r1, #0
 8009272:	bfd4      	ite	le
 8009274:	f1c1 0202 	rsble	r2, r1, #2
 8009278:	2201      	movgt	r2, #1
 800927a:	4413      	add	r3, r2
 800927c:	e7e0      	b.n	8009240 <_printf_float+0x1a0>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	055a      	lsls	r2, r3, #21
 8009282:	d407      	bmi.n	8009294 <_printf_float+0x1f4>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	4642      	mov	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d12c      	bne.n	80092ec <_printf_float+0x24c>
 8009292:	e764      	b.n	800915e <_printf_float+0xbe>
 8009294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009298:	f240 80e0 	bls.w	800945c <_printf_float+0x3bc>
 800929c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	f7f7 fc38 	bl	8000b18 <__aeabi_dcmpeq>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d034      	beq.n	8009316 <_printf_float+0x276>
 80092ac:	4a37      	ldr	r2, [pc, #220]	; (800938c <_printf_float+0x2ec>)
 80092ae:	2301      	movs	r3, #1
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f af51 	beq.w	800915e <_printf_float+0xbe>
 80092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c0:	429a      	cmp	r2, r3
 80092c2:	db02      	blt.n	80092ca <_printf_float+0x22a>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07d8      	lsls	r0, r3, #31
 80092c8:	d510      	bpl.n	80092ec <_printf_float+0x24c>
 80092ca:	ee18 3a10 	vmov	r3, s16
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f af41 	beq.w	800915e <_printf_float+0xbe>
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f104 091a 	add.w	r9, r4, #26
 80092e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e6:	3b01      	subs	r3, #1
 80092e8:	4543      	cmp	r3, r8
 80092ea:	dc09      	bgt.n	8009300 <_printf_float+0x260>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	079b      	lsls	r3, r3, #30
 80092f0:	f100 8107 	bmi.w	8009502 <_printf_float+0x462>
 80092f4:	68e0      	ldr	r0, [r4, #12]
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	4298      	cmp	r0, r3
 80092fa:	bfb8      	it	lt
 80092fc:	4618      	movlt	r0, r3
 80092fe:	e730      	b.n	8009162 <_printf_float+0xc2>
 8009300:	2301      	movs	r3, #1
 8009302:	464a      	mov	r2, r9
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	f43f af27 	beq.w	800915e <_printf_float+0xbe>
 8009310:	f108 0801 	add.w	r8, r8, #1
 8009314:	e7e6      	b.n	80092e4 <_printf_float+0x244>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc39      	bgt.n	8009390 <_printf_float+0x2f0>
 800931c:	4a1b      	ldr	r2, [pc, #108]	; (800938c <_printf_float+0x2ec>)
 800931e:	2301      	movs	r3, #1
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f af19 	beq.w	800915e <_printf_float+0xbe>
 800932c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009330:	4313      	orrs	r3, r2
 8009332:	d102      	bne.n	800933a <_printf_float+0x29a>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d5d8      	bpl.n	80092ec <_printf_float+0x24c>
 800933a:	ee18 3a10 	vmov	r3, s16
 800933e:	4652      	mov	r2, sl
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af09 	beq.w	800915e <_printf_float+0xbe>
 800934c:	f04f 0900 	mov.w	r9, #0
 8009350:	f104 0a1a 	add.w	sl, r4, #26
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	425b      	negs	r3, r3
 8009358:	454b      	cmp	r3, r9
 800935a:	dc01      	bgt.n	8009360 <_printf_float+0x2c0>
 800935c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935e:	e792      	b.n	8009286 <_printf_float+0x1e6>
 8009360:	2301      	movs	r3, #1
 8009362:	4652      	mov	r2, sl
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f aef7 	beq.w	800915e <_printf_float+0xbe>
 8009370:	f109 0901 	add.w	r9, r9, #1
 8009374:	e7ee      	b.n	8009354 <_printf_float+0x2b4>
 8009376:	bf00      	nop
 8009378:	7fefffff 	.word	0x7fefffff
 800937c:	0800bd63 	.word	0x0800bd63
 8009380:	0800bd67 	.word	0x0800bd67
 8009384:	0800bd6b 	.word	0x0800bd6b
 8009388:	0800bd6f 	.word	0x0800bd6f
 800938c:	0800bd73 	.word	0x0800bd73
 8009390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009394:	429a      	cmp	r2, r3
 8009396:	bfa8      	it	ge
 8009398:	461a      	movge	r2, r3
 800939a:	2a00      	cmp	r2, #0
 800939c:	4691      	mov	r9, r2
 800939e:	dc37      	bgt.n	8009410 <_printf_float+0x370>
 80093a0:	f04f 0b00 	mov.w	fp, #0
 80093a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a8:	f104 021a 	add.w	r2, r4, #26
 80093ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	eba3 0309 	sub.w	r3, r3, r9
 80093b4:	455b      	cmp	r3, fp
 80093b6:	dc33      	bgt.n	8009420 <_printf_float+0x380>
 80093b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093bc:	429a      	cmp	r2, r3
 80093be:	db3b      	blt.n	8009438 <_printf_float+0x398>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d438      	bmi.n	8009438 <_printf_float+0x398>
 80093c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093ca:	eba2 0903 	sub.w	r9, r2, r3
 80093ce:	9b05      	ldr	r3, [sp, #20]
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	4591      	cmp	r9, r2
 80093d4:	bfa8      	it	ge
 80093d6:	4691      	movge	r9, r2
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	dc35      	bgt.n	800944a <_printf_float+0x3aa>
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e6:	f104 0a1a 	add.w	sl, r4, #26
 80093ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	eba3 0309 	sub.w	r3, r3, r9
 80093f4:	4543      	cmp	r3, r8
 80093f6:	f77f af79 	ble.w	80092ec <_printf_float+0x24c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4652      	mov	r2, sl
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f aeaa 	beq.w	800915e <_printf_float+0xbe>
 800940a:	f108 0801 	add.w	r8, r8, #1
 800940e:	e7ec      	b.n	80093ea <_printf_float+0x34a>
 8009410:	4613      	mov	r3, r2
 8009412:	4631      	mov	r1, r6
 8009414:	4642      	mov	r2, r8
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	d1c0      	bne.n	80093a0 <_printf_float+0x300>
 800941e:	e69e      	b.n	800915e <_printf_float+0xbe>
 8009420:	2301      	movs	r3, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f ae97 	beq.w	800915e <_printf_float+0xbe>
 8009430:	9a05      	ldr	r2, [sp, #20]
 8009432:	f10b 0b01 	add.w	fp, fp, #1
 8009436:	e7b9      	b.n	80093ac <_printf_float+0x30c>
 8009438:	ee18 3a10 	vmov	r3, s16
 800943c:	4652      	mov	r2, sl
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d1be      	bne.n	80093c6 <_printf_float+0x326>
 8009448:	e689      	b.n	800915e <_printf_float+0xbe>
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	464b      	mov	r3, r9
 800944e:	4442      	add	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c1      	bne.n	80093de <_printf_float+0x33e>
 800945a:	e680      	b.n	800915e <_printf_float+0xbe>
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	2a01      	cmp	r2, #1
 8009460:	dc01      	bgt.n	8009466 <_printf_float+0x3c6>
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d53a      	bpl.n	80094dc <_printf_float+0x43c>
 8009466:	2301      	movs	r3, #1
 8009468:	4642      	mov	r2, r8
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae74 	beq.w	800915e <_printf_float+0xbe>
 8009476:	ee18 3a10 	vmov	r3, s16
 800947a:	4652      	mov	r2, sl
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f ae6b 	beq.w	800915e <_printf_float+0xbe>
 8009488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009494:	f7f7 fb40 	bl	8000b18 <__aeabi_dcmpeq>
 8009498:	b9d8      	cbnz	r0, 80094d2 <_printf_float+0x432>
 800949a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800949e:	f108 0201 	add.w	r2, r8, #1
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	d10e      	bne.n	80094ca <_printf_float+0x42a>
 80094ac:	e657      	b.n	800915e <_printf_float+0xbe>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4652      	mov	r2, sl
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f ae50 	beq.w	800915e <_printf_float+0xbe>
 80094be:	f108 0801 	add.w	r8, r8, #1
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4543      	cmp	r3, r8
 80094c8:	dcf1      	bgt.n	80094ae <_printf_float+0x40e>
 80094ca:	464b      	mov	r3, r9
 80094cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094d0:	e6da      	b.n	8009288 <_printf_float+0x1e8>
 80094d2:	f04f 0800 	mov.w	r8, #0
 80094d6:	f104 0a1a 	add.w	sl, r4, #26
 80094da:	e7f2      	b.n	80094c2 <_printf_float+0x422>
 80094dc:	2301      	movs	r3, #1
 80094de:	4642      	mov	r2, r8
 80094e0:	e7df      	b.n	80094a2 <_printf_float+0x402>
 80094e2:	2301      	movs	r3, #1
 80094e4:	464a      	mov	r2, r9
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f ae36 	beq.w	800915e <_printf_float+0xbe>
 80094f2:	f108 0801 	add.w	r8, r8, #1
 80094f6:	68e3      	ldr	r3, [r4, #12]
 80094f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	4543      	cmp	r3, r8
 80094fe:	dcf0      	bgt.n	80094e2 <_printf_float+0x442>
 8009500:	e6f8      	b.n	80092f4 <_printf_float+0x254>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	f104 0919 	add.w	r9, r4, #25
 800950a:	e7f4      	b.n	80094f6 <_printf_float+0x456>

0800950c <_printf_common>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	4616      	mov	r6, r2
 8009512:	4699      	mov	r9, r3
 8009514:	688a      	ldr	r2, [r1, #8]
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800951c:	4293      	cmp	r3, r2
 800951e:	bfb8      	it	lt
 8009520:	4613      	movlt	r3, r2
 8009522:	6033      	str	r3, [r6, #0]
 8009524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009528:	4607      	mov	r7, r0
 800952a:	460c      	mov	r4, r1
 800952c:	b10a      	cbz	r2, 8009532 <_printf_common+0x26>
 800952e:	3301      	adds	r3, #1
 8009530:	6033      	str	r3, [r6, #0]
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	0699      	lsls	r1, r3, #26
 8009536:	bf42      	ittt	mi
 8009538:	6833      	ldrmi	r3, [r6, #0]
 800953a:	3302      	addmi	r3, #2
 800953c:	6033      	strmi	r3, [r6, #0]
 800953e:	6825      	ldr	r5, [r4, #0]
 8009540:	f015 0506 	ands.w	r5, r5, #6
 8009544:	d106      	bne.n	8009554 <_printf_common+0x48>
 8009546:	f104 0a19 	add.w	sl, r4, #25
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	6832      	ldr	r2, [r6, #0]
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	42ab      	cmp	r3, r5
 8009552:	dc26      	bgt.n	80095a2 <_printf_common+0x96>
 8009554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009558:	1e13      	subs	r3, r2, #0
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	bf18      	it	ne
 800955e:	2301      	movne	r3, #1
 8009560:	0692      	lsls	r2, r2, #26
 8009562:	d42b      	bmi.n	80095bc <_printf_common+0xb0>
 8009564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009568:	4649      	mov	r1, r9
 800956a:	4638      	mov	r0, r7
 800956c:	47c0      	blx	r8
 800956e:	3001      	adds	r0, #1
 8009570:	d01e      	beq.n	80095b0 <_printf_common+0xa4>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	6922      	ldr	r2, [r4, #16]
 8009576:	f003 0306 	and.w	r3, r3, #6
 800957a:	2b04      	cmp	r3, #4
 800957c:	bf02      	ittt	eq
 800957e:	68e5      	ldreq	r5, [r4, #12]
 8009580:	6833      	ldreq	r3, [r6, #0]
 8009582:	1aed      	subeq	r5, r5, r3
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	bf0c      	ite	eq
 8009588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800958c:	2500      	movne	r5, #0
 800958e:	4293      	cmp	r3, r2
 8009590:	bfc4      	itt	gt
 8009592:	1a9b      	subgt	r3, r3, r2
 8009594:	18ed      	addgt	r5, r5, r3
 8009596:	2600      	movs	r6, #0
 8009598:	341a      	adds	r4, #26
 800959a:	42b5      	cmp	r5, r6
 800959c:	d11a      	bne.n	80095d4 <_printf_common+0xc8>
 800959e:	2000      	movs	r0, #0
 80095a0:	e008      	b.n	80095b4 <_printf_common+0xa8>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4652      	mov	r2, sl
 80095a6:	4649      	mov	r1, r9
 80095a8:	4638      	mov	r0, r7
 80095aa:	47c0      	blx	r8
 80095ac:	3001      	adds	r0, #1
 80095ae:	d103      	bne.n	80095b8 <_printf_common+0xac>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	3501      	adds	r5, #1
 80095ba:	e7c6      	b.n	800954a <_printf_common+0x3e>
 80095bc:	18e1      	adds	r1, r4, r3
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	2030      	movs	r0, #48	; 0x30
 80095c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095c6:	4422      	add	r2, r4
 80095c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095d0:	3302      	adds	r3, #2
 80095d2:	e7c7      	b.n	8009564 <_printf_common+0x58>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4622      	mov	r2, r4
 80095d8:	4649      	mov	r1, r9
 80095da:	4638      	mov	r0, r7
 80095dc:	47c0      	blx	r8
 80095de:	3001      	adds	r0, #1
 80095e0:	d0e6      	beq.n	80095b0 <_printf_common+0xa4>
 80095e2:	3601      	adds	r6, #1
 80095e4:	e7d9      	b.n	800959a <_printf_common+0x8e>
	...

080095e8 <_printf_i>:
 80095e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ec:	7e0f      	ldrb	r7, [r1, #24]
 80095ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f0:	2f78      	cmp	r7, #120	; 0x78
 80095f2:	4691      	mov	r9, r2
 80095f4:	4680      	mov	r8, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	469a      	mov	sl, r3
 80095fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095fe:	d807      	bhi.n	8009610 <_printf_i+0x28>
 8009600:	2f62      	cmp	r7, #98	; 0x62
 8009602:	d80a      	bhi.n	800961a <_printf_i+0x32>
 8009604:	2f00      	cmp	r7, #0
 8009606:	f000 80d4 	beq.w	80097b2 <_printf_i+0x1ca>
 800960a:	2f58      	cmp	r7, #88	; 0x58
 800960c:	f000 80c0 	beq.w	8009790 <_printf_i+0x1a8>
 8009610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009618:	e03a      	b.n	8009690 <_printf_i+0xa8>
 800961a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800961e:	2b15      	cmp	r3, #21
 8009620:	d8f6      	bhi.n	8009610 <_printf_i+0x28>
 8009622:	a101      	add	r1, pc, #4	; (adr r1, 8009628 <_printf_i+0x40>)
 8009624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009628:	08009681 	.word	0x08009681
 800962c:	08009695 	.word	0x08009695
 8009630:	08009611 	.word	0x08009611
 8009634:	08009611 	.word	0x08009611
 8009638:	08009611 	.word	0x08009611
 800963c:	08009611 	.word	0x08009611
 8009640:	08009695 	.word	0x08009695
 8009644:	08009611 	.word	0x08009611
 8009648:	08009611 	.word	0x08009611
 800964c:	08009611 	.word	0x08009611
 8009650:	08009611 	.word	0x08009611
 8009654:	08009799 	.word	0x08009799
 8009658:	080096c1 	.word	0x080096c1
 800965c:	08009753 	.word	0x08009753
 8009660:	08009611 	.word	0x08009611
 8009664:	08009611 	.word	0x08009611
 8009668:	080097bb 	.word	0x080097bb
 800966c:	08009611 	.word	0x08009611
 8009670:	080096c1 	.word	0x080096c1
 8009674:	08009611 	.word	0x08009611
 8009678:	08009611 	.word	0x08009611
 800967c:	0800975b 	.word	0x0800975b
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	602a      	str	r2, [r5, #0]
 8009688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800968c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009690:	2301      	movs	r3, #1
 8009692:	e09f      	b.n	80097d4 <_printf_i+0x1ec>
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	0607      	lsls	r7, r0, #24
 800969a:	f103 0104 	add.w	r1, r3, #4
 800969e:	6029      	str	r1, [r5, #0]
 80096a0:	d501      	bpl.n	80096a6 <_printf_i+0xbe>
 80096a2:	681e      	ldr	r6, [r3, #0]
 80096a4:	e003      	b.n	80096ae <_printf_i+0xc6>
 80096a6:	0646      	lsls	r6, r0, #25
 80096a8:	d5fb      	bpl.n	80096a2 <_printf_i+0xba>
 80096aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	da03      	bge.n	80096ba <_printf_i+0xd2>
 80096b2:	232d      	movs	r3, #45	; 0x2d
 80096b4:	4276      	negs	r6, r6
 80096b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ba:	485a      	ldr	r0, [pc, #360]	; (8009824 <_printf_i+0x23c>)
 80096bc:	230a      	movs	r3, #10
 80096be:	e012      	b.n	80096e6 <_printf_i+0xfe>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	1d19      	adds	r1, r3, #4
 80096c6:	6029      	str	r1, [r5, #0]
 80096c8:	0605      	lsls	r5, r0, #24
 80096ca:	d501      	bpl.n	80096d0 <_printf_i+0xe8>
 80096cc:	681e      	ldr	r6, [r3, #0]
 80096ce:	e002      	b.n	80096d6 <_printf_i+0xee>
 80096d0:	0641      	lsls	r1, r0, #25
 80096d2:	d5fb      	bpl.n	80096cc <_printf_i+0xe4>
 80096d4:	881e      	ldrh	r6, [r3, #0]
 80096d6:	4853      	ldr	r0, [pc, #332]	; (8009824 <_printf_i+0x23c>)
 80096d8:	2f6f      	cmp	r7, #111	; 0x6f
 80096da:	bf0c      	ite	eq
 80096dc:	2308      	moveq	r3, #8
 80096de:	230a      	movne	r3, #10
 80096e0:	2100      	movs	r1, #0
 80096e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e6:	6865      	ldr	r5, [r4, #4]
 80096e8:	60a5      	str	r5, [r4, #8]
 80096ea:	2d00      	cmp	r5, #0
 80096ec:	bfa2      	ittt	ge
 80096ee:	6821      	ldrge	r1, [r4, #0]
 80096f0:	f021 0104 	bicge.w	r1, r1, #4
 80096f4:	6021      	strge	r1, [r4, #0]
 80096f6:	b90e      	cbnz	r6, 80096fc <_printf_i+0x114>
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	d04b      	beq.n	8009794 <_printf_i+0x1ac>
 80096fc:	4615      	mov	r5, r2
 80096fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009702:	fb03 6711 	mls	r7, r3, r1, r6
 8009706:	5dc7      	ldrb	r7, [r0, r7]
 8009708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800970c:	4637      	mov	r7, r6
 800970e:	42bb      	cmp	r3, r7
 8009710:	460e      	mov	r6, r1
 8009712:	d9f4      	bls.n	80096fe <_printf_i+0x116>
 8009714:	2b08      	cmp	r3, #8
 8009716:	d10b      	bne.n	8009730 <_printf_i+0x148>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07de      	lsls	r6, r3, #31
 800971c:	d508      	bpl.n	8009730 <_printf_i+0x148>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	bfde      	ittt	le
 8009726:	2330      	movle	r3, #48	; 0x30
 8009728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800972c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009730:	1b52      	subs	r2, r2, r5
 8009732:	6122      	str	r2, [r4, #16]
 8009734:	f8cd a000 	str.w	sl, [sp]
 8009738:	464b      	mov	r3, r9
 800973a:	aa03      	add	r2, sp, #12
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fee4 	bl	800950c <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	d14a      	bne.n	80097de <_printf_i+0x1f6>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f043 0320 	orr.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	4833      	ldr	r0, [pc, #204]	; (8009828 <_printf_i+0x240>)
 800975c:	2778      	movs	r7, #120	; 0x78
 800975e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	6829      	ldr	r1, [r5, #0]
 8009766:	061f      	lsls	r7, r3, #24
 8009768:	f851 6b04 	ldr.w	r6, [r1], #4
 800976c:	d402      	bmi.n	8009774 <_printf_i+0x18c>
 800976e:	065f      	lsls	r7, r3, #25
 8009770:	bf48      	it	mi
 8009772:	b2b6      	uxthmi	r6, r6
 8009774:	07df      	lsls	r7, r3, #31
 8009776:	bf48      	it	mi
 8009778:	f043 0320 	orrmi.w	r3, r3, #32
 800977c:	6029      	str	r1, [r5, #0]
 800977e:	bf48      	it	mi
 8009780:	6023      	strmi	r3, [r4, #0]
 8009782:	b91e      	cbnz	r6, 800978c <_printf_i+0x1a4>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	f023 0320 	bic.w	r3, r3, #32
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	2310      	movs	r3, #16
 800978e:	e7a7      	b.n	80096e0 <_printf_i+0xf8>
 8009790:	4824      	ldr	r0, [pc, #144]	; (8009824 <_printf_i+0x23c>)
 8009792:	e7e4      	b.n	800975e <_printf_i+0x176>
 8009794:	4615      	mov	r5, r2
 8009796:	e7bd      	b.n	8009714 <_printf_i+0x12c>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	6826      	ldr	r6, [r4, #0]
 800979c:	6961      	ldr	r1, [r4, #20]
 800979e:	1d18      	adds	r0, r3, #4
 80097a0:	6028      	str	r0, [r5, #0]
 80097a2:	0635      	lsls	r5, r6, #24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0x1c4>
 80097a8:	6019      	str	r1, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0x1ca>
 80097ac:	0670      	lsls	r0, r6, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0x1c0>
 80097b0:	8019      	strh	r1, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	4615      	mov	r5, r2
 80097b8:	e7bc      	b.n	8009734 <_printf_i+0x14c>
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	602a      	str	r2, [r5, #0]
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4628      	mov	r0, r5
 80097c8:	f7f6 fd2a 	bl	8000220 <memchr>
 80097cc:	b108      	cbz	r0, 80097d2 <_printf_i+0x1ea>
 80097ce:	1b40      	subs	r0, r0, r5
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	2300      	movs	r3, #0
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097dc:	e7aa      	b.n	8009734 <_printf_i+0x14c>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0ad      	beq.n	8009748 <_printf_i+0x160>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	d413      	bmi.n	800981a <_printf_i+0x232>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e7a6      	b.n	800974c <_printf_i+0x164>
 80097fe:	2301      	movs	r3, #1
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d09d      	beq.n	8009748 <_printf_i+0x160>
 800980c:	3501      	adds	r5, #1
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	42ab      	cmp	r3, r5
 8009816:	dcf2      	bgt.n	80097fe <_printf_i+0x216>
 8009818:	e7eb      	b.n	80097f2 <_printf_i+0x20a>
 800981a:	2500      	movs	r5, #0
 800981c:	f104 0619 	add.w	r6, r4, #25
 8009820:	e7f5      	b.n	800980e <_printf_i+0x226>
 8009822:	bf00      	nop
 8009824:	0800bd75 	.word	0x0800bd75
 8009828:	0800bd86 	.word	0x0800bd86

0800982c <std>:
 800982c:	2300      	movs	r3, #0
 800982e:	b510      	push	{r4, lr}
 8009830:	4604      	mov	r4, r0
 8009832:	e9c0 3300 	strd	r3, r3, [r0]
 8009836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800983a:	6083      	str	r3, [r0, #8]
 800983c:	8181      	strh	r1, [r0, #12]
 800983e:	6643      	str	r3, [r0, #100]	; 0x64
 8009840:	81c2      	strh	r2, [r0, #14]
 8009842:	6183      	str	r3, [r0, #24]
 8009844:	4619      	mov	r1, r3
 8009846:	2208      	movs	r2, #8
 8009848:	305c      	adds	r0, #92	; 0x5c
 800984a:	f000 f902 	bl	8009a52 <memset>
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <std+0x38>)
 8009850:	6263      	str	r3, [r4, #36]	; 0x24
 8009852:	4b05      	ldr	r3, [pc, #20]	; (8009868 <std+0x3c>)
 8009854:	62a3      	str	r3, [r4, #40]	; 0x28
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <std+0x40>)
 8009858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <std+0x44>)
 800985c:	6224      	str	r4, [r4, #32]
 800985e:	6323      	str	r3, [r4, #48]	; 0x30
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	080099cd 	.word	0x080099cd
 8009868:	080099ef 	.word	0x080099ef
 800986c:	08009a27 	.word	0x08009a27
 8009870:	08009a4b 	.word	0x08009a4b

08009874 <stdio_exit_handler>:
 8009874:	4a02      	ldr	r2, [pc, #8]	; (8009880 <stdio_exit_handler+0xc>)
 8009876:	4903      	ldr	r1, [pc, #12]	; (8009884 <stdio_exit_handler+0x10>)
 8009878:	4803      	ldr	r0, [pc, #12]	; (8009888 <stdio_exit_handler+0x14>)
 800987a:	f000 b869 	b.w	8009950 <_fwalk_sglue>
 800987e:	bf00      	nop
 8009880:	20000040 	.word	0x20000040
 8009884:	0800b539 	.word	0x0800b539
 8009888:	2000004c 	.word	0x2000004c

0800988c <cleanup_stdio>:
 800988c:	6841      	ldr	r1, [r0, #4]
 800988e:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <cleanup_stdio+0x34>)
 8009890:	4299      	cmp	r1, r3
 8009892:	b510      	push	{r4, lr}
 8009894:	4604      	mov	r4, r0
 8009896:	d001      	beq.n	800989c <cleanup_stdio+0x10>
 8009898:	f001 fe4e 	bl	800b538 <_fflush_r>
 800989c:	68a1      	ldr	r1, [r4, #8]
 800989e:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <cleanup_stdio+0x38>)
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d002      	beq.n	80098aa <cleanup_stdio+0x1e>
 80098a4:	4620      	mov	r0, r4
 80098a6:	f001 fe47 	bl	800b538 <_fflush_r>
 80098aa:	68e1      	ldr	r1, [r4, #12]
 80098ac:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <cleanup_stdio+0x3c>)
 80098ae:	4299      	cmp	r1, r3
 80098b0:	d004      	beq.n	80098bc <cleanup_stdio+0x30>
 80098b2:	4620      	mov	r0, r4
 80098b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b8:	f001 be3e 	b.w	800b538 <_fflush_r>
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	20000680 	.word	0x20000680
 80098c4:	200006e8 	.word	0x200006e8
 80098c8:	20000750 	.word	0x20000750

080098cc <global_stdio_init.part.0>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <global_stdio_init.part.0+0x30>)
 80098d0:	4c0b      	ldr	r4, [pc, #44]	; (8009900 <global_stdio_init.part.0+0x34>)
 80098d2:	4a0c      	ldr	r2, [pc, #48]	; (8009904 <global_stdio_init.part.0+0x38>)
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	4620      	mov	r0, r4
 80098d8:	2200      	movs	r2, #0
 80098da:	2104      	movs	r1, #4
 80098dc:	f7ff ffa6 	bl	800982c <std>
 80098e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80098e4:	2201      	movs	r2, #1
 80098e6:	2109      	movs	r1, #9
 80098e8:	f7ff ffa0 	bl	800982c <std>
 80098ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80098f0:	2202      	movs	r2, #2
 80098f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f6:	2112      	movs	r1, #18
 80098f8:	f7ff bf98 	b.w	800982c <std>
 80098fc:	200007b8 	.word	0x200007b8
 8009900:	20000680 	.word	0x20000680
 8009904:	08009875 	.word	0x08009875

08009908 <__sfp_lock_acquire>:
 8009908:	4801      	ldr	r0, [pc, #4]	; (8009910 <__sfp_lock_acquire+0x8>)
 800990a:	f000 b91f 	b.w	8009b4c <__retarget_lock_acquire_recursive>
 800990e:	bf00      	nop
 8009910:	200007c1 	.word	0x200007c1

08009914 <__sfp_lock_release>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__sfp_lock_release+0x8>)
 8009916:	f000 b91a 	b.w	8009b4e <__retarget_lock_release_recursive>
 800991a:	bf00      	nop
 800991c:	200007c1 	.word	0x200007c1

08009920 <__sinit>:
 8009920:	b510      	push	{r4, lr}
 8009922:	4604      	mov	r4, r0
 8009924:	f7ff fff0 	bl	8009908 <__sfp_lock_acquire>
 8009928:	6a23      	ldr	r3, [r4, #32]
 800992a:	b11b      	cbz	r3, 8009934 <__sinit+0x14>
 800992c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009930:	f7ff bff0 	b.w	8009914 <__sfp_lock_release>
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <__sinit+0x28>)
 8009936:	6223      	str	r3, [r4, #32]
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <__sinit+0x2c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1f5      	bne.n	800992c <__sinit+0xc>
 8009940:	f7ff ffc4 	bl	80098cc <global_stdio_init.part.0>
 8009944:	e7f2      	b.n	800992c <__sinit+0xc>
 8009946:	bf00      	nop
 8009948:	0800988d 	.word	0x0800988d
 800994c:	200007b8 	.word	0x200007b8

08009950 <_fwalk_sglue>:
 8009950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009954:	4607      	mov	r7, r0
 8009956:	4688      	mov	r8, r1
 8009958:	4614      	mov	r4, r2
 800995a:	2600      	movs	r6, #0
 800995c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009960:	f1b9 0901 	subs.w	r9, r9, #1
 8009964:	d505      	bpl.n	8009972 <_fwalk_sglue+0x22>
 8009966:	6824      	ldr	r4, [r4, #0]
 8009968:	2c00      	cmp	r4, #0
 800996a:	d1f7      	bne.n	800995c <_fwalk_sglue+0xc>
 800996c:	4630      	mov	r0, r6
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d907      	bls.n	8009988 <_fwalk_sglue+0x38>
 8009978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800997c:	3301      	adds	r3, #1
 800997e:	d003      	beq.n	8009988 <_fwalk_sglue+0x38>
 8009980:	4629      	mov	r1, r5
 8009982:	4638      	mov	r0, r7
 8009984:	47c0      	blx	r8
 8009986:	4306      	orrs	r6, r0
 8009988:	3568      	adds	r5, #104	; 0x68
 800998a:	e7e9      	b.n	8009960 <_fwalk_sglue+0x10>

0800998c <siprintf>:
 800998c:	b40e      	push	{r1, r2, r3}
 800998e:	b500      	push	{lr}
 8009990:	b09c      	sub	sp, #112	; 0x70
 8009992:	ab1d      	add	r3, sp, #116	; 0x74
 8009994:	9002      	str	r0, [sp, #8]
 8009996:	9006      	str	r0, [sp, #24]
 8009998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800999c:	4809      	ldr	r0, [pc, #36]	; (80099c4 <siprintf+0x38>)
 800999e:	9107      	str	r1, [sp, #28]
 80099a0:	9104      	str	r1, [sp, #16]
 80099a2:	4909      	ldr	r1, [pc, #36]	; (80099c8 <siprintf+0x3c>)
 80099a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a8:	9105      	str	r1, [sp, #20]
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	a902      	add	r1, sp, #8
 80099b0:	f001 fc3e 	bl	800b230 <_svfiprintf_r>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	b01c      	add	sp, #112	; 0x70
 80099bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c0:	b003      	add	sp, #12
 80099c2:	4770      	bx	lr
 80099c4:	20000098 	.word	0x20000098
 80099c8:	ffff0208 	.word	0xffff0208

080099cc <__sread>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	460c      	mov	r4, r1
 80099d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d4:	f000 f86c 	bl	8009ab0 <_read_r>
 80099d8:	2800      	cmp	r0, #0
 80099da:	bfab      	itete	ge
 80099dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099de:	89a3      	ldrhlt	r3, [r4, #12]
 80099e0:	181b      	addge	r3, r3, r0
 80099e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099e6:	bfac      	ite	ge
 80099e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099ea:	81a3      	strhlt	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__swrite>:
 80099ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	461f      	mov	r7, r3
 80099f4:	898b      	ldrh	r3, [r1, #12]
 80099f6:	05db      	lsls	r3, r3, #23
 80099f8:	4605      	mov	r5, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	4616      	mov	r6, r2
 80099fe:	d505      	bpl.n	8009a0c <__swrite+0x1e>
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	2302      	movs	r3, #2
 8009a06:	2200      	movs	r2, #0
 8009a08:	f000 f840 	bl	8009a8c <_lseek_r>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	4632      	mov	r2, r6
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	f000 b857 	b.w	8009ad4 <_write_r>

08009a26 <__sseek>:
 8009a26:	b510      	push	{r4, lr}
 8009a28:	460c      	mov	r4, r1
 8009a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2e:	f000 f82d 	bl	8009a8c <_lseek_r>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	bf15      	itete	ne
 8009a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a42:	81a3      	strheq	r3, [r4, #12]
 8009a44:	bf18      	it	ne
 8009a46:	81a3      	strhne	r3, [r4, #12]
 8009a48:	bd10      	pop	{r4, pc}

08009a4a <__sclose>:
 8009a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4e:	f000 b80d 	b.w	8009a6c <_close_r>

08009a52 <memset>:
 8009a52:	4402      	add	r2, r0
 8009a54:	4603      	mov	r3, r0
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d100      	bne.n	8009a5c <memset+0xa>
 8009a5a:	4770      	bx	lr
 8009a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009a60:	e7f9      	b.n	8009a56 <memset+0x4>
	...

08009a64 <_localeconv_r>:
 8009a64:	4800      	ldr	r0, [pc, #0]	; (8009a68 <_localeconv_r+0x4>)
 8009a66:	4770      	bx	lr
 8009a68:	2000018c 	.word	0x2000018c

08009a6c <_close_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d06      	ldr	r5, [pc, #24]	; (8009a88 <_close_r+0x1c>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	602b      	str	r3, [r5, #0]
 8009a78:	f7f8 fe39 	bl	80026ee <_close>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_close_r+0x1a>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_close_r+0x1a>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	200007bc 	.word	0x200007bc

08009a8c <_lseek_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4d07      	ldr	r5, [pc, #28]	; (8009aac <_lseek_r+0x20>)
 8009a90:	4604      	mov	r4, r0
 8009a92:	4608      	mov	r0, r1
 8009a94:	4611      	mov	r1, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	602a      	str	r2, [r5, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f7f8 fe4e 	bl	800273c <_lseek>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_lseek_r+0x1e>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_lseek_r+0x1e>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	200007bc 	.word	0x200007bc

08009ab0 <_read_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_read_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f8 fddc 	bl	800267c <_read>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_read_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_read_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200007bc 	.word	0x200007bc

08009ad4 <_write_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_write_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f8 fde7 	bl	80026b6 <_write>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_write_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_write_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200007bc 	.word	0x200007bc

08009af8 <__errno>:
 8009af8:	4b01      	ldr	r3, [pc, #4]	; (8009b00 <__errno+0x8>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20000098 	.word	0x20000098

08009b04 <__libc_init_array>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	4d0d      	ldr	r5, [pc, #52]	; (8009b3c <__libc_init_array+0x38>)
 8009b08:	4c0d      	ldr	r4, [pc, #52]	; (8009b40 <__libc_init_array+0x3c>)
 8009b0a:	1b64      	subs	r4, r4, r5
 8009b0c:	10a4      	asrs	r4, r4, #2
 8009b0e:	2600      	movs	r6, #0
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	d109      	bne.n	8009b28 <__libc_init_array+0x24>
 8009b14:	4d0b      	ldr	r5, [pc, #44]	; (8009b44 <__libc_init_array+0x40>)
 8009b16:	4c0c      	ldr	r4, [pc, #48]	; (8009b48 <__libc_init_array+0x44>)
 8009b18:	f002 f894 	bl	800bc44 <_init>
 8009b1c:	1b64      	subs	r4, r4, r5
 8009b1e:	10a4      	asrs	r4, r4, #2
 8009b20:	2600      	movs	r6, #0
 8009b22:	42a6      	cmp	r6, r4
 8009b24:	d105      	bne.n	8009b32 <__libc_init_array+0x2e>
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2c:	4798      	blx	r3
 8009b2e:	3601      	adds	r6, #1
 8009b30:	e7ee      	b.n	8009b10 <__libc_init_array+0xc>
 8009b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b36:	4798      	blx	r3
 8009b38:	3601      	adds	r6, #1
 8009b3a:	e7f2      	b.n	8009b22 <__libc_init_array+0x1e>
 8009b3c:	0800c0c8 	.word	0x0800c0c8
 8009b40:	0800c0c8 	.word	0x0800c0c8
 8009b44:	0800c0c8 	.word	0x0800c0c8
 8009b48:	0800c0cc 	.word	0x0800c0cc

08009b4c <__retarget_lock_acquire_recursive>:
 8009b4c:	4770      	bx	lr

08009b4e <__retarget_lock_release_recursive>:
 8009b4e:	4770      	bx	lr

08009b50 <__assert_func>:
 8009b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b52:	4614      	mov	r4, r2
 8009b54:	461a      	mov	r2, r3
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <__assert_func+0x2c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	68d8      	ldr	r0, [r3, #12]
 8009b5e:	b14c      	cbz	r4, 8009b74 <__assert_func+0x24>
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <__assert_func+0x30>)
 8009b62:	9100      	str	r1, [sp, #0]
 8009b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b68:	4906      	ldr	r1, [pc, #24]	; (8009b84 <__assert_func+0x34>)
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	f001 fd0c 	bl	800b588 <fiprintf>
 8009b70:	f001 fd54 	bl	800b61c <abort>
 8009b74:	4b04      	ldr	r3, [pc, #16]	; (8009b88 <__assert_func+0x38>)
 8009b76:	461c      	mov	r4, r3
 8009b78:	e7f3      	b.n	8009b62 <__assert_func+0x12>
 8009b7a:	bf00      	nop
 8009b7c:	20000098 	.word	0x20000098
 8009b80:	0800bd97 	.word	0x0800bd97
 8009b84:	0800bda4 	.word	0x0800bda4
 8009b88:	0800bdd2 	.word	0x0800bdd2

08009b8c <quorem>:
 8009b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	6903      	ldr	r3, [r0, #16]
 8009b92:	690c      	ldr	r4, [r1, #16]
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	4607      	mov	r7, r0
 8009b98:	db7e      	blt.n	8009c98 <quorem+0x10c>
 8009b9a:	3c01      	subs	r4, #1
 8009b9c:	f101 0814 	add.w	r8, r1, #20
 8009ba0:	f100 0514 	add.w	r5, r0, #20
 8009ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bc2:	d331      	bcc.n	8009c28 <quorem+0x9c>
 8009bc4:	f04f 0e00 	mov.w	lr, #0
 8009bc8:	4640      	mov	r0, r8
 8009bca:	46ac      	mov	ip, r5
 8009bcc:	46f2      	mov	sl, lr
 8009bce:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bd2:	b293      	uxth	r3, r2
 8009bd4:	fb06 e303 	mla	r3, r6, r3, lr
 8009bd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bdc:	0c1a      	lsrs	r2, r3, #16
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ebaa 0303 	sub.w	r3, sl, r3
 8009be4:	f8dc a000 	ldr.w	sl, [ip]
 8009be8:	fa13 f38a 	uxtah	r3, r3, sl
 8009bec:	fb06 220e 	mla	r2, r6, lr, r2
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	9b00      	ldr	r3, [sp, #0]
 8009bf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bf8:	b292      	uxth	r2, r2
 8009bfa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c02:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c06:	4581      	cmp	r9, r0
 8009c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c0c:	f84c 3b04 	str.w	r3, [ip], #4
 8009c10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c14:	d2db      	bcs.n	8009bce <quorem+0x42>
 8009c16:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c1a:	b92b      	cbnz	r3, 8009c28 <quorem+0x9c>
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	3b04      	subs	r3, #4
 8009c20:	429d      	cmp	r5, r3
 8009c22:	461a      	mov	r2, r3
 8009c24:	d32c      	bcc.n	8009c80 <quorem+0xf4>
 8009c26:	613c      	str	r4, [r7, #16]
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f001 f9a7 	bl	800af7c <__mcmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	db22      	blt.n	8009c78 <quorem+0xec>
 8009c32:	3601      	adds	r6, #1
 8009c34:	4629      	mov	r1, r5
 8009c36:	2000      	movs	r0, #0
 8009c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8009c40:	b293      	uxth	r3, r2
 8009c42:	1ac3      	subs	r3, r0, r3
 8009c44:	0c12      	lsrs	r2, r2, #16
 8009c46:	fa13 f38c 	uxtah	r3, r3, ip
 8009c4a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c58:	45c1      	cmp	r9, r8
 8009c5a:	f841 3b04 	str.w	r3, [r1], #4
 8009c5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c62:	d2e9      	bcs.n	8009c38 <quorem+0xac>
 8009c64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c6c:	b922      	cbnz	r2, 8009c78 <quorem+0xec>
 8009c6e:	3b04      	subs	r3, #4
 8009c70:	429d      	cmp	r5, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	d30a      	bcc.n	8009c8c <quorem+0x100>
 8009c76:	613c      	str	r4, [r7, #16]
 8009c78:	4630      	mov	r0, r6
 8009c7a:	b003      	add	sp, #12
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	d1ce      	bne.n	8009c26 <quorem+0x9a>
 8009c88:	3c01      	subs	r4, #1
 8009c8a:	e7c9      	b.n	8009c20 <quorem+0x94>
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	3b04      	subs	r3, #4
 8009c90:	2a00      	cmp	r2, #0
 8009c92:	d1f0      	bne.n	8009c76 <quorem+0xea>
 8009c94:	3c01      	subs	r4, #1
 8009c96:	e7eb      	b.n	8009c70 <quorem+0xe4>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e7ee      	b.n	8009c7a <quorem+0xee>
 8009c9c:	0000      	movs	r0, r0
	...

08009ca0 <_dtoa_r>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	ed2d 8b04 	vpush	{d8-d9}
 8009ca8:	69c5      	ldr	r5, [r0, #28]
 8009caa:	b093      	sub	sp, #76	; 0x4c
 8009cac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cb0:	ec57 6b10 	vmov	r6, r7, d0
 8009cb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cb8:	9107      	str	r1, [sp, #28]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc0:	b975      	cbnz	r5, 8009ce0 <_dtoa_r+0x40>
 8009cc2:	2010      	movs	r0, #16
 8009cc4:	f000 fe2a 	bl	800a91c <malloc>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	61e0      	str	r0, [r4, #28]
 8009ccc:	b920      	cbnz	r0, 8009cd8 <_dtoa_r+0x38>
 8009cce:	4bae      	ldr	r3, [pc, #696]	; (8009f88 <_dtoa_r+0x2e8>)
 8009cd0:	21ef      	movs	r1, #239	; 0xef
 8009cd2:	48ae      	ldr	r0, [pc, #696]	; (8009f8c <_dtoa_r+0x2ec>)
 8009cd4:	f7ff ff3c 	bl	8009b50 <__assert_func>
 8009cd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cdc:	6005      	str	r5, [r0, #0]
 8009cde:	60c5      	str	r5, [r0, #12]
 8009ce0:	69e3      	ldr	r3, [r4, #28]
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	b151      	cbz	r1, 8009cfc <_dtoa_r+0x5c>
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	604a      	str	r2, [r1, #4]
 8009cea:	2301      	movs	r3, #1
 8009cec:	4093      	lsls	r3, r2
 8009cee:	608b      	str	r3, [r1, #8]
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 ff07 	bl	800ab04 <_Bfree>
 8009cf6:	69e3      	ldr	r3, [r4, #28]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	1e3b      	subs	r3, r7, #0
 8009cfe:	bfbb      	ittet	lt
 8009d00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d04:	9303      	strlt	r3, [sp, #12]
 8009d06:	2300      	movge	r3, #0
 8009d08:	2201      	movlt	r2, #1
 8009d0a:	bfac      	ite	ge
 8009d0c:	f8c8 3000 	strge.w	r3, [r8]
 8009d10:	f8c8 2000 	strlt.w	r2, [r8]
 8009d14:	4b9e      	ldr	r3, [pc, #632]	; (8009f90 <_dtoa_r+0x2f0>)
 8009d16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d1a:	ea33 0308 	bics.w	r3, r3, r8
 8009d1e:	d11b      	bne.n	8009d58 <_dtoa_r+0xb8>
 8009d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d22:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d2c:	4333      	orrs	r3, r6
 8009d2e:	f000 8593 	beq.w	800a858 <_dtoa_r+0xbb8>
 8009d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d34:	b963      	cbnz	r3, 8009d50 <_dtoa_r+0xb0>
 8009d36:	4b97      	ldr	r3, [pc, #604]	; (8009f94 <_dtoa_r+0x2f4>)
 8009d38:	e027      	b.n	8009d8a <_dtoa_r+0xea>
 8009d3a:	4b97      	ldr	r3, [pc, #604]	; (8009f98 <_dtoa_r+0x2f8>)
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	9800      	ldr	r0, [sp, #0]
 8009d46:	b013      	add	sp, #76	; 0x4c
 8009d48:	ecbd 8b04 	vpop	{d8-d9}
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	4b90      	ldr	r3, [pc, #576]	; (8009f94 <_dtoa_r+0x2f4>)
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	3303      	adds	r3, #3
 8009d56:	e7f3      	b.n	8009d40 <_dtoa_r+0xa0>
 8009d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	ec51 0b17 	vmov	r0, r1, d7
 8009d62:	eeb0 8a47 	vmov.f32	s16, s14
 8009d66:	eef0 8a67 	vmov.f32	s17, s15
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f7f6 fed4 	bl	8000b18 <__aeabi_dcmpeq>
 8009d70:	4681      	mov	r9, r0
 8009d72:	b160      	cbz	r0, 8009d8e <_dtoa_r+0xee>
 8009d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d76:	2301      	movs	r3, #1
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 8568 	beq.w	800a852 <_dtoa_r+0xbb2>
 8009d82:	4b86      	ldr	r3, [pc, #536]	; (8009f9c <_dtoa_r+0x2fc>)
 8009d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	e7da      	b.n	8009d44 <_dtoa_r+0xa4>
 8009d8e:	aa10      	add	r2, sp, #64	; 0x40
 8009d90:	a911      	add	r1, sp, #68	; 0x44
 8009d92:	4620      	mov	r0, r4
 8009d94:	eeb0 0a48 	vmov.f32	s0, s16
 8009d98:	eef0 0a68 	vmov.f32	s1, s17
 8009d9c:	f001 f994 	bl	800b0c8 <__d2b>
 8009da0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009da4:	4682      	mov	sl, r0
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	d07f      	beq.n	8009eaa <_dtoa_r+0x20a>
 8009daa:	ee18 3a90 	vmov	r3, s17
 8009dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009db2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009db6:	ec51 0b18 	vmov	r0, r1, d8
 8009dba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009dc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4b75      	ldr	r3, [pc, #468]	; (8009fa0 <_dtoa_r+0x300>)
 8009dcc:	f7f6 fa84 	bl	80002d8 <__aeabi_dsub>
 8009dd0:	a367      	add	r3, pc, #412	; (adr r3, 8009f70 <_dtoa_r+0x2d0>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 fc37 	bl	8000648 <__aeabi_dmul>
 8009dda:	a367      	add	r3, pc, #412	; (adr r3, 8009f78 <_dtoa_r+0x2d8>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fa7c 	bl	80002dc <__adddf3>
 8009de4:	4606      	mov	r6, r0
 8009de6:	4628      	mov	r0, r5
 8009de8:	460f      	mov	r7, r1
 8009dea:	f7f6 fbc3 	bl	8000574 <__aeabi_i2d>
 8009dee:	a364      	add	r3, pc, #400	; (adr r3, 8009f80 <_dtoa_r+0x2e0>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f7f6 fc28 	bl	8000648 <__aeabi_dmul>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fa6c 	bl	80002dc <__adddf3>
 8009e04:	4606      	mov	r6, r0
 8009e06:	460f      	mov	r7, r1
 8009e08:	f7f6 fece 	bl	8000ba8 <__aeabi_d2iz>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4683      	mov	fp, r0
 8009e10:	2300      	movs	r3, #0
 8009e12:	4630      	mov	r0, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	f7f6 fe89 	bl	8000b2c <__aeabi_dcmplt>
 8009e1a:	b148      	cbz	r0, 8009e30 <_dtoa_r+0x190>
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f7f6 fba9 	bl	8000574 <__aeabi_i2d>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 fe77 	bl	8000b18 <__aeabi_dcmpeq>
 8009e2a:	b908      	cbnz	r0, 8009e30 <_dtoa_r+0x190>
 8009e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e30:	f1bb 0f16 	cmp.w	fp, #22
 8009e34:	d857      	bhi.n	8009ee6 <_dtoa_r+0x246>
 8009e36:	4b5b      	ldr	r3, [pc, #364]	; (8009fa4 <_dtoa_r+0x304>)
 8009e38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	ec51 0b18 	vmov	r0, r1, d8
 8009e44:	f7f6 fe72 	bl	8000b2c <__aeabi_dcmplt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d04e      	beq.n	8009eea <_dtoa_r+0x24a>
 8009e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e50:	2300      	movs	r3, #0
 8009e52:	930c      	str	r3, [sp, #48]	; 0x30
 8009e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e56:	1b5b      	subs	r3, r3, r5
 8009e58:	1e5a      	subs	r2, r3, #1
 8009e5a:	bf45      	ittet	mi
 8009e5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e60:	9305      	strmi	r3, [sp, #20]
 8009e62:	2300      	movpl	r3, #0
 8009e64:	2300      	movmi	r3, #0
 8009e66:	9206      	str	r2, [sp, #24]
 8009e68:	bf54      	ite	pl
 8009e6a:	9305      	strpl	r3, [sp, #20]
 8009e6c:	9306      	strmi	r3, [sp, #24]
 8009e6e:	f1bb 0f00 	cmp.w	fp, #0
 8009e72:	db3c      	blt.n	8009eee <_dtoa_r+0x24e>
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e7a:	445b      	add	r3, fp
 8009e7c:	9306      	str	r3, [sp, #24]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9308      	str	r3, [sp, #32]
 8009e82:	9b07      	ldr	r3, [sp, #28]
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	d868      	bhi.n	8009f5a <_dtoa_r+0x2ba>
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	bfc4      	itt	gt
 8009e8c:	3b04      	subgt	r3, #4
 8009e8e:	9307      	strgt	r3, [sp, #28]
 8009e90:	9b07      	ldr	r3, [sp, #28]
 8009e92:	f1a3 0302 	sub.w	r3, r3, #2
 8009e96:	bfcc      	ite	gt
 8009e98:	2500      	movgt	r5, #0
 8009e9a:	2501      	movle	r5, #1
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	f200 8085 	bhi.w	8009fac <_dtoa_r+0x30c>
 8009ea2:	e8df f003 	tbb	[pc, r3]
 8009ea6:	3b2e      	.short	0x3b2e
 8009ea8:	5839      	.short	0x5839
 8009eaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009eae:	441d      	add	r5, r3
 8009eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	bfc1      	itttt	gt
 8009eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ebc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009ec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009ec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009ec8:	bfd6      	itet	le
 8009eca:	f1c3 0320 	rsble	r3, r3, #32
 8009ece:	ea48 0003 	orrgt.w	r0, r8, r3
 8009ed2:	fa06 f003 	lslle.w	r0, r6, r3
 8009ed6:	f7f6 fb3d 	bl	8000554 <__aeabi_ui2d>
 8009eda:	2201      	movs	r2, #1
 8009edc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ee0:	3d01      	subs	r5, #1
 8009ee2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ee4:	e76f      	b.n	8009dc6 <_dtoa_r+0x126>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e7b3      	b.n	8009e52 <_dtoa_r+0x1b2>
 8009eea:	900c      	str	r0, [sp, #48]	; 0x30
 8009eec:	e7b2      	b.n	8009e54 <_dtoa_r+0x1b4>
 8009eee:	9b05      	ldr	r3, [sp, #20]
 8009ef0:	eba3 030b 	sub.w	r3, r3, fp
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	f1cb 0300 	rsb	r3, fp, #0
 8009efa:	9308      	str	r3, [sp, #32]
 8009efc:	2300      	movs	r3, #0
 8009efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f00:	e7bf      	b.n	8009e82 <_dtoa_r+0x1e2>
 8009f02:	2300      	movs	r3, #0
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc52      	bgt.n	8009fb2 <_dtoa_r+0x312>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	461a      	mov	r2, r3
 8009f14:	920a      	str	r2, [sp, #40]	; 0x28
 8009f16:	e00b      	b.n	8009f30 <_dtoa_r+0x290>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e7f3      	b.n	8009f04 <_dtoa_r+0x264>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f22:	445b      	add	r3, fp
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	3301      	adds	r3, #1
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	bfb8      	it	lt
 8009f2e:	2301      	movlt	r3, #1
 8009f30:	69e0      	ldr	r0, [r4, #28]
 8009f32:	2100      	movs	r1, #0
 8009f34:	2204      	movs	r2, #4
 8009f36:	f102 0614 	add.w	r6, r2, #20
 8009f3a:	429e      	cmp	r6, r3
 8009f3c:	d93d      	bls.n	8009fba <_dtoa_r+0x31a>
 8009f3e:	6041      	str	r1, [r0, #4]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 fd9f 	bl	800aa84 <_Balloc>
 8009f46:	9000      	str	r0, [sp, #0]
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d139      	bne.n	8009fc0 <_dtoa_r+0x320>
 8009f4c:	4b16      	ldr	r3, [pc, #88]	; (8009fa8 <_dtoa_r+0x308>)
 8009f4e:	4602      	mov	r2, r0
 8009f50:	f240 11af 	movw	r1, #431	; 0x1af
 8009f54:	e6bd      	b.n	8009cd2 <_dtoa_r+0x32>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e7e1      	b.n	8009f1e <_dtoa_r+0x27e>
 8009f5a:	2501      	movs	r5, #1
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9307      	str	r3, [sp, #28]
 8009f60:	9509      	str	r5, [sp, #36]	; 0x24
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2312      	movs	r3, #18
 8009f6e:	e7d1      	b.n	8009f14 <_dtoa_r+0x274>
 8009f70:	636f4361 	.word	0x636f4361
 8009f74:	3fd287a7 	.word	0x3fd287a7
 8009f78:	8b60c8b3 	.word	0x8b60c8b3
 8009f7c:	3fc68a28 	.word	0x3fc68a28
 8009f80:	509f79fb 	.word	0x509f79fb
 8009f84:	3fd34413 	.word	0x3fd34413
 8009f88:	0800bcf4 	.word	0x0800bcf4
 8009f8c:	0800bde0 	.word	0x0800bde0
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	0800bddc 	.word	0x0800bddc
 8009f98:	0800bdd3 	.word	0x0800bdd3
 8009f9c:	0800bd74 	.word	0x0800bd74
 8009fa0:	3ff80000 	.word	0x3ff80000
 8009fa4:	0800bed0 	.word	0x0800bed0
 8009fa8:	0800be38 	.word	0x0800be38
 8009fac:	2301      	movs	r3, #1
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	e7d7      	b.n	8009f62 <_dtoa_r+0x2c2>
 8009fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	9304      	str	r3, [sp, #16]
 8009fb8:	e7ba      	b.n	8009f30 <_dtoa_r+0x290>
 8009fba:	3101      	adds	r1, #1
 8009fbc:	0052      	lsls	r2, r2, #1
 8009fbe:	e7ba      	b.n	8009f36 <_dtoa_r+0x296>
 8009fc0:	69e3      	ldr	r3, [r4, #28]
 8009fc2:	9a00      	ldr	r2, [sp, #0]
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	2b0e      	cmp	r3, #14
 8009fca:	f200 80a8 	bhi.w	800a11e <_dtoa_r+0x47e>
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	f000 80a5 	beq.w	800a11e <_dtoa_r+0x47e>
 8009fd4:	f1bb 0f00 	cmp.w	fp, #0
 8009fd8:	dd38      	ble.n	800a04c <_dtoa_r+0x3ac>
 8009fda:	4bc0      	ldr	r3, [pc, #768]	; (800a2dc <_dtoa_r+0x63c>)
 8009fdc:	f00b 020f 	and.w	r2, fp, #15
 8009fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009fe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009fec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ff0:	d019      	beq.n	800a026 <_dtoa_r+0x386>
 8009ff2:	4bbb      	ldr	r3, [pc, #748]	; (800a2e0 <_dtoa_r+0x640>)
 8009ff4:	ec51 0b18 	vmov	r0, r1, d8
 8009ff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ffc:	f7f6 fc4e 	bl	800089c <__aeabi_ddiv>
 800a000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a004:	f008 080f 	and.w	r8, r8, #15
 800a008:	2503      	movs	r5, #3
 800a00a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a2e0 <_dtoa_r+0x640>
 800a00e:	f1b8 0f00 	cmp.w	r8, #0
 800a012:	d10a      	bne.n	800a02a <_dtoa_r+0x38a>
 800a014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a018:	4632      	mov	r2, r6
 800a01a:	463b      	mov	r3, r7
 800a01c:	f7f6 fc3e 	bl	800089c <__aeabi_ddiv>
 800a020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a024:	e02b      	b.n	800a07e <_dtoa_r+0x3de>
 800a026:	2502      	movs	r5, #2
 800a028:	e7ef      	b.n	800a00a <_dtoa_r+0x36a>
 800a02a:	f018 0f01 	tst.w	r8, #1
 800a02e:	d008      	beq.n	800a042 <_dtoa_r+0x3a2>
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a038:	f7f6 fb06 	bl	8000648 <__aeabi_dmul>
 800a03c:	3501      	adds	r5, #1
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a046:	f109 0908 	add.w	r9, r9, #8
 800a04a:	e7e0      	b.n	800a00e <_dtoa_r+0x36e>
 800a04c:	f000 809f 	beq.w	800a18e <_dtoa_r+0x4ee>
 800a050:	f1cb 0600 	rsb	r6, fp, #0
 800a054:	4ba1      	ldr	r3, [pc, #644]	; (800a2dc <_dtoa_r+0x63c>)
 800a056:	4fa2      	ldr	r7, [pc, #648]	; (800a2e0 <_dtoa_r+0x640>)
 800a058:	f006 020f 	and.w	r2, r6, #15
 800a05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	ec51 0b18 	vmov	r0, r1, d8
 800a068:	f7f6 faee 	bl	8000648 <__aeabi_dmul>
 800a06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a070:	1136      	asrs	r6, r6, #4
 800a072:	2300      	movs	r3, #0
 800a074:	2502      	movs	r5, #2
 800a076:	2e00      	cmp	r6, #0
 800a078:	d17e      	bne.n	800a178 <_dtoa_r+0x4d8>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1d0      	bne.n	800a020 <_dtoa_r+0x380>
 800a07e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8084 	beq.w	800a192 <_dtoa_r+0x4f2>
 800a08a:	4b96      	ldr	r3, [pc, #600]	; (800a2e4 <_dtoa_r+0x644>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 fd4b 	bl	8000b2c <__aeabi_dcmplt>
 800a096:	2800      	cmp	r0, #0
 800a098:	d07b      	beq.n	800a192 <_dtoa_r+0x4f2>
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d078      	beq.n	800a192 <_dtoa_r+0x4f2>
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd39      	ble.n	800a11a <_dtoa_r+0x47a>
 800a0a6:	4b90      	ldr	r3, [pc, #576]	; (800a2e8 <_dtoa_r+0x648>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 facb 	bl	8000648 <__aeabi_dmul>
 800a0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b6:	9e01      	ldr	r6, [sp, #4]
 800a0b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a0bc:	3501      	adds	r5, #1
 800a0be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f7f6 fa56 	bl	8000574 <__aeabi_i2d>
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	f7f6 fabc 	bl	8000648 <__aeabi_dmul>
 800a0d0:	4b86      	ldr	r3, [pc, #536]	; (800a2ec <_dtoa_r+0x64c>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f7f6 f902 	bl	80002dc <__adddf3>
 800a0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d158      	bne.n	800a198 <_dtoa_r+0x4f8>
 800a0e6:	4b82      	ldr	r3, [pc, #520]	; (800a2f0 <_dtoa_r+0x650>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7f6 f8f3 	bl	80002d8 <__aeabi_dsub>
 800a0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	f7f6 fd35 	bl	8000b68 <__aeabi_dcmpgt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f040 8296 	bne.w	800a630 <_dtoa_r+0x990>
 800a104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a108:	4640      	mov	r0, r8
 800a10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 fd0c 	bl	8000b2c <__aeabi_dcmplt>
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 8289 	bne.w	800a62c <_dtoa_r+0x98c>
 800a11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a120:	2b00      	cmp	r3, #0
 800a122:	f2c0 814e 	blt.w	800a3c2 <_dtoa_r+0x722>
 800a126:	f1bb 0f0e 	cmp.w	fp, #14
 800a12a:	f300 814a 	bgt.w	800a3c2 <_dtoa_r+0x722>
 800a12e:	4b6b      	ldr	r3, [pc, #428]	; (800a2dc <_dtoa_r+0x63c>)
 800a130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f280 80dc 	bge.w	800a2f8 <_dtoa_r+0x658>
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f300 80d8 	bgt.w	800a2f8 <_dtoa_r+0x658>
 800a148:	f040 826f 	bne.w	800a62a <_dtoa_r+0x98a>
 800a14c:	4b68      	ldr	r3, [pc, #416]	; (800a2f0 <_dtoa_r+0x650>)
 800a14e:	2200      	movs	r2, #0
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 fa78 	bl	8000648 <__aeabi_dmul>
 800a158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a15c:	f7f6 fcfa 	bl	8000b54 <__aeabi_dcmpge>
 800a160:	9e04      	ldr	r6, [sp, #16]
 800a162:	4637      	mov	r7, r6
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 8245 	bne.w	800a5f4 <_dtoa_r+0x954>
 800a16a:	9d00      	ldr	r5, [sp, #0]
 800a16c:	2331      	movs	r3, #49	; 0x31
 800a16e:	f805 3b01 	strb.w	r3, [r5], #1
 800a172:	f10b 0b01 	add.w	fp, fp, #1
 800a176:	e241      	b.n	800a5fc <_dtoa_r+0x95c>
 800a178:	07f2      	lsls	r2, r6, #31
 800a17a:	d505      	bpl.n	800a188 <_dtoa_r+0x4e8>
 800a17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a180:	f7f6 fa62 	bl	8000648 <__aeabi_dmul>
 800a184:	3501      	adds	r5, #1
 800a186:	2301      	movs	r3, #1
 800a188:	1076      	asrs	r6, r6, #1
 800a18a:	3708      	adds	r7, #8
 800a18c:	e773      	b.n	800a076 <_dtoa_r+0x3d6>
 800a18e:	2502      	movs	r5, #2
 800a190:	e775      	b.n	800a07e <_dtoa_r+0x3de>
 800a192:	9e04      	ldr	r6, [sp, #16]
 800a194:	465f      	mov	r7, fp
 800a196:	e792      	b.n	800a0be <_dtoa_r+0x41e>
 800a198:	9900      	ldr	r1, [sp, #0]
 800a19a:	4b50      	ldr	r3, [pc, #320]	; (800a2dc <_dtoa_r+0x63c>)
 800a19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a0:	4431      	add	r1, r6
 800a1a2:	9102      	str	r1, [sp, #8]
 800a1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1a6:	eeb0 9a47 	vmov.f32	s18, s14
 800a1aa:	eef0 9a67 	vmov.f32	s19, s15
 800a1ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d044      	beq.n	800a244 <_dtoa_r+0x5a4>
 800a1ba:	494e      	ldr	r1, [pc, #312]	; (800a2f4 <_dtoa_r+0x654>)
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f7f6 fb6d 	bl	800089c <__aeabi_ddiv>
 800a1c2:	ec53 2b19 	vmov	r2, r3, d9
 800a1c6:	f7f6 f887 	bl	80002d8 <__aeabi_dsub>
 800a1ca:	9d00      	ldr	r5, [sp, #0]
 800a1cc:	ec41 0b19 	vmov	d9, r0, r1
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	f7f6 fce8 	bl	8000ba8 <__aeabi_d2iz>
 800a1d8:	4606      	mov	r6, r0
 800a1da:	f7f6 f9cb 	bl	8000574 <__aeabi_i2d>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	f7f6 f877 	bl	80002d8 <__aeabi_dsub>
 800a1ea:	3630      	adds	r6, #48	; 0x30
 800a1ec:	f805 6b01 	strb.w	r6, [r5], #1
 800a1f0:	ec53 2b19 	vmov	r2, r3, d9
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	f7f6 fc98 	bl	8000b2c <__aeabi_dcmplt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d164      	bne.n	800a2ca <_dtoa_r+0x62a>
 800a200:	4642      	mov	r2, r8
 800a202:	464b      	mov	r3, r9
 800a204:	4937      	ldr	r1, [pc, #220]	; (800a2e4 <_dtoa_r+0x644>)
 800a206:	2000      	movs	r0, #0
 800a208:	f7f6 f866 	bl	80002d8 <__aeabi_dsub>
 800a20c:	ec53 2b19 	vmov	r2, r3, d9
 800a210:	f7f6 fc8c 	bl	8000b2c <__aeabi_dcmplt>
 800a214:	2800      	cmp	r0, #0
 800a216:	f040 80b6 	bne.w	800a386 <_dtoa_r+0x6e6>
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	429d      	cmp	r5, r3
 800a21e:	f43f af7c 	beq.w	800a11a <_dtoa_r+0x47a>
 800a222:	4b31      	ldr	r3, [pc, #196]	; (800a2e8 <_dtoa_r+0x648>)
 800a224:	ec51 0b19 	vmov	r0, r1, d9
 800a228:	2200      	movs	r2, #0
 800a22a:	f7f6 fa0d 	bl	8000648 <__aeabi_dmul>
 800a22e:	4b2e      	ldr	r3, [pc, #184]	; (800a2e8 <_dtoa_r+0x648>)
 800a230:	ec41 0b19 	vmov	d9, r0, r1
 800a234:	2200      	movs	r2, #0
 800a236:	4640      	mov	r0, r8
 800a238:	4649      	mov	r1, r9
 800a23a:	f7f6 fa05 	bl	8000648 <__aeabi_dmul>
 800a23e:	4680      	mov	r8, r0
 800a240:	4689      	mov	r9, r1
 800a242:	e7c5      	b.n	800a1d0 <_dtoa_r+0x530>
 800a244:	ec51 0b17 	vmov	r0, r1, d7
 800a248:	f7f6 f9fe 	bl	8000648 <__aeabi_dmul>
 800a24c:	9b02      	ldr	r3, [sp, #8]
 800a24e:	9d00      	ldr	r5, [sp, #0]
 800a250:	930f      	str	r3, [sp, #60]	; 0x3c
 800a252:	ec41 0b19 	vmov	d9, r0, r1
 800a256:	4649      	mov	r1, r9
 800a258:	4640      	mov	r0, r8
 800a25a:	f7f6 fca5 	bl	8000ba8 <__aeabi_d2iz>
 800a25e:	4606      	mov	r6, r0
 800a260:	f7f6 f988 	bl	8000574 <__aeabi_i2d>
 800a264:	3630      	adds	r6, #48	; 0x30
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	f7f6 f833 	bl	80002d8 <__aeabi_dsub>
 800a272:	f805 6b01 	strb.w	r6, [r5], #1
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	429d      	cmp	r5, r3
 800a27a:	4680      	mov	r8, r0
 800a27c:	4689      	mov	r9, r1
 800a27e:	f04f 0200 	mov.w	r2, #0
 800a282:	d124      	bne.n	800a2ce <_dtoa_r+0x62e>
 800a284:	4b1b      	ldr	r3, [pc, #108]	; (800a2f4 <_dtoa_r+0x654>)
 800a286:	ec51 0b19 	vmov	r0, r1, d9
 800a28a:	f7f6 f827 	bl	80002dc <__adddf3>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f6 fc67 	bl	8000b68 <__aeabi_dcmpgt>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d173      	bne.n	800a386 <_dtoa_r+0x6e6>
 800a29e:	ec53 2b19 	vmov	r2, r3, d9
 800a2a2:	4914      	ldr	r1, [pc, #80]	; (800a2f4 <_dtoa_r+0x654>)
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f7f6 f817 	bl	80002d8 <__aeabi_dsub>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	f7f6 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f43f af2f 	beq.w	800a11a <_dtoa_r+0x47a>
 800a2bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2be:	1e6b      	subs	r3, r5, #1
 800a2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2c6:	2b30      	cmp	r3, #48	; 0x30
 800a2c8:	d0f8      	beq.n	800a2bc <_dtoa_r+0x61c>
 800a2ca:	46bb      	mov	fp, r7
 800a2cc:	e04a      	b.n	800a364 <_dtoa_r+0x6c4>
 800a2ce:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <_dtoa_r+0x648>)
 800a2d0:	f7f6 f9ba 	bl	8000648 <__aeabi_dmul>
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	e7bd      	b.n	800a256 <_dtoa_r+0x5b6>
 800a2da:	bf00      	nop
 800a2dc:	0800bed0 	.word	0x0800bed0
 800a2e0:	0800bea8 	.word	0x0800bea8
 800a2e4:	3ff00000 	.word	0x3ff00000
 800a2e8:	40240000 	.word	0x40240000
 800a2ec:	401c0000 	.word	0x401c0000
 800a2f0:	40140000 	.word	0x40140000
 800a2f4:	3fe00000 	.word	0x3fe00000
 800a2f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2fc:	9d00      	ldr	r5, [sp, #0]
 800a2fe:	4642      	mov	r2, r8
 800a300:	464b      	mov	r3, r9
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f6 fac9 	bl	800089c <__aeabi_ddiv>
 800a30a:	f7f6 fc4d 	bl	8000ba8 <__aeabi_d2iz>
 800a30e:	9001      	str	r0, [sp, #4]
 800a310:	f7f6 f930 	bl	8000574 <__aeabi_i2d>
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	f7f6 f996 	bl	8000648 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f5 ffd8 	bl	80002d8 <__aeabi_dsub>
 800a328:	9e01      	ldr	r6, [sp, #4]
 800a32a:	9f04      	ldr	r7, [sp, #16]
 800a32c:	3630      	adds	r6, #48	; 0x30
 800a32e:	f805 6b01 	strb.w	r6, [r5], #1
 800a332:	9e00      	ldr	r6, [sp, #0]
 800a334:	1bae      	subs	r6, r5, r6
 800a336:	42b7      	cmp	r7, r6
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	d134      	bne.n	800a3a8 <_dtoa_r+0x708>
 800a33e:	f7f5 ffcd 	bl	80002dc <__adddf3>
 800a342:	4642      	mov	r2, r8
 800a344:	464b      	mov	r3, r9
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	f7f6 fc0d 	bl	8000b68 <__aeabi_dcmpgt>
 800a34e:	b9c8      	cbnz	r0, 800a384 <_dtoa_r+0x6e4>
 800a350:	4642      	mov	r2, r8
 800a352:	464b      	mov	r3, r9
 800a354:	4630      	mov	r0, r6
 800a356:	4639      	mov	r1, r7
 800a358:	f7f6 fbde 	bl	8000b18 <__aeabi_dcmpeq>
 800a35c:	b110      	cbz	r0, 800a364 <_dtoa_r+0x6c4>
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	07db      	lsls	r3, r3, #31
 800a362:	d40f      	bmi.n	800a384 <_dtoa_r+0x6e4>
 800a364:	4651      	mov	r1, sl
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fbcc 	bl	800ab04 <_Bfree>
 800a36c:	2300      	movs	r3, #0
 800a36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a370:	702b      	strb	r3, [r5, #0]
 800a372:	f10b 0301 	add.w	r3, fp, #1
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f43f ace2 	beq.w	8009d44 <_dtoa_r+0xa4>
 800a380:	601d      	str	r5, [r3, #0]
 800a382:	e4df      	b.n	8009d44 <_dtoa_r+0xa4>
 800a384:	465f      	mov	r7, fp
 800a386:	462b      	mov	r3, r5
 800a388:	461d      	mov	r5, r3
 800a38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38e:	2a39      	cmp	r2, #57	; 0x39
 800a390:	d106      	bne.n	800a3a0 <_dtoa_r+0x700>
 800a392:	9a00      	ldr	r2, [sp, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d1f7      	bne.n	800a388 <_dtoa_r+0x6e8>
 800a398:	9900      	ldr	r1, [sp, #0]
 800a39a:	2230      	movs	r2, #48	; 0x30
 800a39c:	3701      	adds	r7, #1
 800a39e:	700a      	strb	r2, [r1, #0]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	3201      	adds	r2, #1
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	e790      	b.n	800a2ca <_dtoa_r+0x62a>
 800a3a8:	4ba3      	ldr	r3, [pc, #652]	; (800a638 <_dtoa_r+0x998>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f6 f94c 	bl	8000648 <__aeabi_dmul>
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	f7f6 fbae 	bl	8000b18 <__aeabi_dcmpeq>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d09e      	beq.n	800a2fe <_dtoa_r+0x65e>
 800a3c0:	e7d0      	b.n	800a364 <_dtoa_r+0x6c4>
 800a3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c4:	2a00      	cmp	r2, #0
 800a3c6:	f000 80ca 	beq.w	800a55e <_dtoa_r+0x8be>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	2a01      	cmp	r2, #1
 800a3ce:	f300 80ad 	bgt.w	800a52c <_dtoa_r+0x88c>
 800a3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	f000 80a5 	beq.w	800a524 <_dtoa_r+0x884>
 800a3da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3de:	9e08      	ldr	r6, [sp, #32]
 800a3e0:	9d05      	ldr	r5, [sp, #20]
 800a3e2:	9a05      	ldr	r2, [sp, #20]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	9205      	str	r2, [sp, #20]
 800a3e8:	9a06      	ldr	r2, [sp, #24]
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	441a      	add	r2, r3
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	9206      	str	r2, [sp, #24]
 800a3f2:	f000 fc3d 	bl	800ac70 <__i2b>
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	b165      	cbz	r5, 800a414 <_dtoa_r+0x774>
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dd09      	ble.n	800a414 <_dtoa_r+0x774>
 800a400:	42ab      	cmp	r3, r5
 800a402:	9a05      	ldr	r2, [sp, #20]
 800a404:	bfa8      	it	ge
 800a406:	462b      	movge	r3, r5
 800a408:	1ad2      	subs	r2, r2, r3
 800a40a:	9205      	str	r2, [sp, #20]
 800a40c:	9a06      	ldr	r2, [sp, #24]
 800a40e:	1aed      	subs	r5, r5, r3
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	9306      	str	r3, [sp, #24]
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	b1f3      	cbz	r3, 800a456 <_dtoa_r+0x7b6>
 800a418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 80a3 	beq.w	800a566 <_dtoa_r+0x8c6>
 800a420:	2e00      	cmp	r6, #0
 800a422:	dd10      	ble.n	800a446 <_dtoa_r+0x7a6>
 800a424:	4639      	mov	r1, r7
 800a426:	4632      	mov	r2, r6
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fce1 	bl	800adf0 <__pow5mult>
 800a42e:	4652      	mov	r2, sl
 800a430:	4601      	mov	r1, r0
 800a432:	4607      	mov	r7, r0
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fc31 	bl	800ac9c <__multiply>
 800a43a:	4651      	mov	r1, sl
 800a43c:	4680      	mov	r8, r0
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fb60 	bl	800ab04 <_Bfree>
 800a444:	46c2      	mov	sl, r8
 800a446:	9b08      	ldr	r3, [sp, #32]
 800a448:	1b9a      	subs	r2, r3, r6
 800a44a:	d004      	beq.n	800a456 <_dtoa_r+0x7b6>
 800a44c:	4651      	mov	r1, sl
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 fcce 	bl	800adf0 <__pow5mult>
 800a454:	4682      	mov	sl, r0
 800a456:	2101      	movs	r1, #1
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fc09 	bl	800ac70 <__i2b>
 800a45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	4606      	mov	r6, r0
 800a464:	f340 8081 	ble.w	800a56a <_dtoa_r+0x8ca>
 800a468:	461a      	mov	r2, r3
 800a46a:	4601      	mov	r1, r0
 800a46c:	4620      	mov	r0, r4
 800a46e:	f000 fcbf 	bl	800adf0 <__pow5mult>
 800a472:	9b07      	ldr	r3, [sp, #28]
 800a474:	2b01      	cmp	r3, #1
 800a476:	4606      	mov	r6, r0
 800a478:	dd7a      	ble.n	800a570 <_dtoa_r+0x8d0>
 800a47a:	f04f 0800 	mov.w	r8, #0
 800a47e:	6933      	ldr	r3, [r6, #16]
 800a480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a484:	6918      	ldr	r0, [r3, #16]
 800a486:	f000 fba5 	bl	800abd4 <__hi0bits>
 800a48a:	f1c0 0020 	rsb	r0, r0, #32
 800a48e:	9b06      	ldr	r3, [sp, #24]
 800a490:	4418      	add	r0, r3
 800a492:	f010 001f 	ands.w	r0, r0, #31
 800a496:	f000 8094 	beq.w	800a5c2 <_dtoa_r+0x922>
 800a49a:	f1c0 0320 	rsb	r3, r0, #32
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	f340 8085 	ble.w	800a5ae <_dtoa_r+0x90e>
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	f1c0 001c 	rsb	r0, r0, #28
 800a4aa:	4403      	add	r3, r0
 800a4ac:	9305      	str	r3, [sp, #20]
 800a4ae:	9b06      	ldr	r3, [sp, #24]
 800a4b0:	4403      	add	r3, r0
 800a4b2:	4405      	add	r5, r0
 800a4b4:	9306      	str	r3, [sp, #24]
 800a4b6:	9b05      	ldr	r3, [sp, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dd05      	ble.n	800a4c8 <_dtoa_r+0x828>
 800a4bc:	4651      	mov	r1, sl
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fcef 	bl	800aea4 <__lshift>
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	9b06      	ldr	r3, [sp, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd05      	ble.n	800a4da <_dtoa_r+0x83a>
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 fce6 	bl	800aea4 <__lshift>
 800a4d8:	4606      	mov	r6, r0
 800a4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d072      	beq.n	800a5c6 <_dtoa_r+0x926>
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f000 fd4a 	bl	800af7c <__mcmp>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	da6c      	bge.n	800a5c6 <_dtoa_r+0x926>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4651      	mov	r1, sl
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fb28 	bl	800ab48 <__multadd>
 800a4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4fe:	4682      	mov	sl, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 81b0 	beq.w	800a866 <_dtoa_r+0xbc6>
 800a506:	2300      	movs	r3, #0
 800a508:	4639      	mov	r1, r7
 800a50a:	220a      	movs	r2, #10
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fb1b 	bl	800ab48 <__multadd>
 800a512:	9b01      	ldr	r3, [sp, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	4607      	mov	r7, r0
 800a518:	f300 8096 	bgt.w	800a648 <_dtoa_r+0x9a8>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	dc59      	bgt.n	800a5d6 <_dtoa_r+0x936>
 800a522:	e091      	b.n	800a648 <_dtoa_r+0x9a8>
 800a524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a52a:	e758      	b.n	800a3de <_dtoa_r+0x73e>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	1e5e      	subs	r6, r3, #1
 800a530:	9b08      	ldr	r3, [sp, #32]
 800a532:	42b3      	cmp	r3, r6
 800a534:	bfbf      	itttt	lt
 800a536:	9b08      	ldrlt	r3, [sp, #32]
 800a538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a53a:	9608      	strlt	r6, [sp, #32]
 800a53c:	1af3      	sublt	r3, r6, r3
 800a53e:	bfb4      	ite	lt
 800a540:	18d2      	addlt	r2, r2, r3
 800a542:	1b9e      	subge	r6, r3, r6
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	bfbc      	itt	lt
 800a548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a54a:	2600      	movlt	r6, #0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bfb7      	itett	lt
 800a550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a558:	1a9d      	sublt	r5, r3, r2
 800a55a:	2300      	movlt	r3, #0
 800a55c:	e741      	b.n	800a3e2 <_dtoa_r+0x742>
 800a55e:	9e08      	ldr	r6, [sp, #32]
 800a560:	9d05      	ldr	r5, [sp, #20]
 800a562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a564:	e748      	b.n	800a3f8 <_dtoa_r+0x758>
 800a566:	9a08      	ldr	r2, [sp, #32]
 800a568:	e770      	b.n	800a44c <_dtoa_r+0x7ac>
 800a56a:	9b07      	ldr	r3, [sp, #28]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	dc19      	bgt.n	800a5a4 <_dtoa_r+0x904>
 800a570:	9b02      	ldr	r3, [sp, #8]
 800a572:	b9bb      	cbnz	r3, 800a5a4 <_dtoa_r+0x904>
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a57a:	b99b      	cbnz	r3, 800a5a4 <_dtoa_r+0x904>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a582:	0d1b      	lsrs	r3, r3, #20
 800a584:	051b      	lsls	r3, r3, #20
 800a586:	b183      	cbz	r3, 800a5aa <_dtoa_r+0x90a>
 800a588:	9b05      	ldr	r3, [sp, #20]
 800a58a:	3301      	adds	r3, #1
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	9b06      	ldr	r3, [sp, #24]
 800a590:	3301      	adds	r3, #1
 800a592:	9306      	str	r3, [sp, #24]
 800a594:	f04f 0801 	mov.w	r8, #1
 800a598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f47f af6f 	bne.w	800a47e <_dtoa_r+0x7de>
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	e774      	b.n	800a48e <_dtoa_r+0x7ee>
 800a5a4:	f04f 0800 	mov.w	r8, #0
 800a5a8:	e7f6      	b.n	800a598 <_dtoa_r+0x8f8>
 800a5aa:	4698      	mov	r8, r3
 800a5ac:	e7f4      	b.n	800a598 <_dtoa_r+0x8f8>
 800a5ae:	d082      	beq.n	800a4b6 <_dtoa_r+0x816>
 800a5b0:	9a05      	ldr	r2, [sp, #20]
 800a5b2:	331c      	adds	r3, #28
 800a5b4:	441a      	add	r2, r3
 800a5b6:	9205      	str	r2, [sp, #20]
 800a5b8:	9a06      	ldr	r2, [sp, #24]
 800a5ba:	441a      	add	r2, r3
 800a5bc:	441d      	add	r5, r3
 800a5be:	9206      	str	r2, [sp, #24]
 800a5c0:	e779      	b.n	800a4b6 <_dtoa_r+0x816>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	e7f4      	b.n	800a5b0 <_dtoa_r+0x910>
 800a5c6:	9b04      	ldr	r3, [sp, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	dc37      	bgt.n	800a63c <_dtoa_r+0x99c>
 800a5cc:	9b07      	ldr	r3, [sp, #28]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	dd34      	ble.n	800a63c <_dtoa_r+0x99c>
 800a5d2:	9b04      	ldr	r3, [sp, #16]
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	b963      	cbnz	r3, 800a5f4 <_dtoa_r+0x954>
 800a5da:	4631      	mov	r1, r6
 800a5dc:	2205      	movs	r2, #5
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f000 fab2 	bl	800ab48 <__multadd>
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	f000 fcc7 	bl	800af7c <__mcmp>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f73f adbb 	bgt.w	800a16a <_dtoa_r+0x4ca>
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f6:	9d00      	ldr	r5, [sp, #0]
 800a5f8:	ea6f 0b03 	mvn.w	fp, r3
 800a5fc:	f04f 0800 	mov.w	r8, #0
 800a600:	4631      	mov	r1, r6
 800a602:	4620      	mov	r0, r4
 800a604:	f000 fa7e 	bl	800ab04 <_Bfree>
 800a608:	2f00      	cmp	r7, #0
 800a60a:	f43f aeab 	beq.w	800a364 <_dtoa_r+0x6c4>
 800a60e:	f1b8 0f00 	cmp.w	r8, #0
 800a612:	d005      	beq.n	800a620 <_dtoa_r+0x980>
 800a614:	45b8      	cmp	r8, r7
 800a616:	d003      	beq.n	800a620 <_dtoa_r+0x980>
 800a618:	4641      	mov	r1, r8
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fa72 	bl	800ab04 <_Bfree>
 800a620:	4639      	mov	r1, r7
 800a622:	4620      	mov	r0, r4
 800a624:	f000 fa6e 	bl	800ab04 <_Bfree>
 800a628:	e69c      	b.n	800a364 <_dtoa_r+0x6c4>
 800a62a:	2600      	movs	r6, #0
 800a62c:	4637      	mov	r7, r6
 800a62e:	e7e1      	b.n	800a5f4 <_dtoa_r+0x954>
 800a630:	46bb      	mov	fp, r7
 800a632:	4637      	mov	r7, r6
 800a634:	e599      	b.n	800a16a <_dtoa_r+0x4ca>
 800a636:	bf00      	nop
 800a638:	40240000 	.word	0x40240000
 800a63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 80c8 	beq.w	800a7d4 <_dtoa_r+0xb34>
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2d00      	cmp	r5, #0
 800a64a:	dd05      	ble.n	800a658 <_dtoa_r+0x9b8>
 800a64c:	4639      	mov	r1, r7
 800a64e:	462a      	mov	r2, r5
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fc27 	bl	800aea4 <__lshift>
 800a656:	4607      	mov	r7, r0
 800a658:	f1b8 0f00 	cmp.w	r8, #0
 800a65c:	d05b      	beq.n	800a716 <_dtoa_r+0xa76>
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fa0f 	bl	800aa84 <_Balloc>
 800a666:	4605      	mov	r5, r0
 800a668:	b928      	cbnz	r0, 800a676 <_dtoa_r+0x9d6>
 800a66a:	4b83      	ldr	r3, [pc, #524]	; (800a878 <_dtoa_r+0xbd8>)
 800a66c:	4602      	mov	r2, r0
 800a66e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a672:	f7ff bb2e 	b.w	8009cd2 <_dtoa_r+0x32>
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	3202      	adds	r2, #2
 800a67a:	0092      	lsls	r2, r2, #2
 800a67c:	f107 010c 	add.w	r1, r7, #12
 800a680:	300c      	adds	r0, #12
 800a682:	f000 ffbd 	bl	800b600 <memcpy>
 800a686:	2201      	movs	r2, #1
 800a688:	4629      	mov	r1, r5
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fc0a 	bl	800aea4 <__lshift>
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a69a:	4413      	add	r3, r2
 800a69c:	9308      	str	r3, [sp, #32]
 800a69e:	9b02      	ldr	r3, [sp, #8]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	46b8      	mov	r8, r7
 800a6a6:	9306      	str	r3, [sp, #24]
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	9b04      	ldr	r3, [sp, #16]
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	f7ff fa6a 	bl	8009b8c <quorem>
 800a6b8:	4641      	mov	r1, r8
 800a6ba:	9002      	str	r0, [sp, #8]
 800a6bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	f000 fc5b 	bl	800af7c <__mcmp>
 800a6c6:	463a      	mov	r2, r7
 800a6c8:	9005      	str	r0, [sp, #20]
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 fc71 	bl	800afb4 <__mdiff>
 800a6d2:	68c2      	ldr	r2, [r0, #12]
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	bb02      	cbnz	r2, 800a71a <_dtoa_r+0xa7a>
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4650      	mov	r0, sl
 800a6dc:	f000 fc4e 	bl	800af7c <__mcmp>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e8:	f000 fa0c 	bl	800ab04 <_Bfree>
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	9d04      	ldr	r5, [sp, #16]
 800a6f2:	ea43 0102 	orr.w	r1, r3, r2
 800a6f6:	9b06      	ldr	r3, [sp, #24]
 800a6f8:	4319      	orrs	r1, r3
 800a6fa:	d110      	bne.n	800a71e <_dtoa_r+0xa7e>
 800a6fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a700:	d029      	beq.n	800a756 <_dtoa_r+0xab6>
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd02      	ble.n	800a70e <_dtoa_r+0xa6e>
 800a708:	9b02      	ldr	r3, [sp, #8]
 800a70a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	f883 9000 	strb.w	r9, [r3]
 800a714:	e774      	b.n	800a600 <_dtoa_r+0x960>
 800a716:	4638      	mov	r0, r7
 800a718:	e7ba      	b.n	800a690 <_dtoa_r+0x9f0>
 800a71a:	2201      	movs	r2, #1
 800a71c:	e7e1      	b.n	800a6e2 <_dtoa_r+0xa42>
 800a71e:	9b05      	ldr	r3, [sp, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	db04      	blt.n	800a72e <_dtoa_r+0xa8e>
 800a724:	9907      	ldr	r1, [sp, #28]
 800a726:	430b      	orrs	r3, r1
 800a728:	9906      	ldr	r1, [sp, #24]
 800a72a:	430b      	orrs	r3, r1
 800a72c:	d120      	bne.n	800a770 <_dtoa_r+0xad0>
 800a72e:	2a00      	cmp	r2, #0
 800a730:	dded      	ble.n	800a70e <_dtoa_r+0xa6e>
 800a732:	4651      	mov	r1, sl
 800a734:	2201      	movs	r2, #1
 800a736:	4620      	mov	r0, r4
 800a738:	f000 fbb4 	bl	800aea4 <__lshift>
 800a73c:	4631      	mov	r1, r6
 800a73e:	4682      	mov	sl, r0
 800a740:	f000 fc1c 	bl	800af7c <__mcmp>
 800a744:	2800      	cmp	r0, #0
 800a746:	dc03      	bgt.n	800a750 <_dtoa_r+0xab0>
 800a748:	d1e1      	bne.n	800a70e <_dtoa_r+0xa6e>
 800a74a:	f019 0f01 	tst.w	r9, #1
 800a74e:	d0de      	beq.n	800a70e <_dtoa_r+0xa6e>
 800a750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a754:	d1d8      	bne.n	800a708 <_dtoa_r+0xa68>
 800a756:	9a01      	ldr	r2, [sp, #4]
 800a758:	2339      	movs	r3, #57	; 0x39
 800a75a:	7013      	strb	r3, [r2, #0]
 800a75c:	462b      	mov	r3, r5
 800a75e:	461d      	mov	r5, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a766:	2a39      	cmp	r2, #57	; 0x39
 800a768:	d06c      	beq.n	800a844 <_dtoa_r+0xba4>
 800a76a:	3201      	adds	r2, #1
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	e747      	b.n	800a600 <_dtoa_r+0x960>
 800a770:	2a00      	cmp	r2, #0
 800a772:	dd07      	ble.n	800a784 <_dtoa_r+0xae4>
 800a774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a778:	d0ed      	beq.n	800a756 <_dtoa_r+0xab6>
 800a77a:	9a01      	ldr	r2, [sp, #4]
 800a77c:	f109 0301 	add.w	r3, r9, #1
 800a780:	7013      	strb	r3, [r2, #0]
 800a782:	e73d      	b.n	800a600 <_dtoa_r+0x960>
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	9a08      	ldr	r2, [sp, #32]
 800a788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d043      	beq.n	800a818 <_dtoa_r+0xb78>
 800a790:	4651      	mov	r1, sl
 800a792:	2300      	movs	r3, #0
 800a794:	220a      	movs	r2, #10
 800a796:	4620      	mov	r0, r4
 800a798:	f000 f9d6 	bl	800ab48 <__multadd>
 800a79c:	45b8      	cmp	r8, r7
 800a79e:	4682      	mov	sl, r0
 800a7a0:	f04f 0300 	mov.w	r3, #0
 800a7a4:	f04f 020a 	mov.w	r2, #10
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	d107      	bne.n	800a7be <_dtoa_r+0xb1e>
 800a7ae:	f000 f9cb 	bl	800ab48 <__multadd>
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	9b04      	ldr	r3, [sp, #16]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	e775      	b.n	800a6aa <_dtoa_r+0xa0a>
 800a7be:	f000 f9c3 	bl	800ab48 <__multadd>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f9bc 	bl	800ab48 <__multadd>
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	e7f0      	b.n	800a7b6 <_dtoa_r+0xb16>
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	9d00      	ldr	r5, [sp, #0]
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4650      	mov	r0, sl
 800a7de:	f7ff f9d5 	bl	8009b8c <quorem>
 800a7e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7e6:	9b00      	ldr	r3, [sp, #0]
 800a7e8:	f805 9b01 	strb.w	r9, [r5], #1
 800a7ec:	1aea      	subs	r2, r5, r3
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	dd07      	ble.n	800a804 <_dtoa_r+0xb64>
 800a7f4:	4651      	mov	r1, sl
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 f9a4 	bl	800ab48 <__multadd>
 800a800:	4682      	mov	sl, r0
 800a802:	e7ea      	b.n	800a7da <_dtoa_r+0xb3a>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfc8      	it	gt
 800a80a:	461d      	movgt	r5, r3
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	bfd8      	it	le
 800a810:	2501      	movle	r5, #1
 800a812:	441d      	add	r5, r3
 800a814:	f04f 0800 	mov.w	r8, #0
 800a818:	4651      	mov	r1, sl
 800a81a:	2201      	movs	r2, #1
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fb41 	bl	800aea4 <__lshift>
 800a822:	4631      	mov	r1, r6
 800a824:	4682      	mov	sl, r0
 800a826:	f000 fba9 	bl	800af7c <__mcmp>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	dc96      	bgt.n	800a75c <_dtoa_r+0xabc>
 800a82e:	d102      	bne.n	800a836 <_dtoa_r+0xb96>
 800a830:	f019 0f01 	tst.w	r9, #1
 800a834:	d192      	bne.n	800a75c <_dtoa_r+0xabc>
 800a836:	462b      	mov	r3, r5
 800a838:	461d      	mov	r5, r3
 800a83a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a83e:	2a30      	cmp	r2, #48	; 0x30
 800a840:	d0fa      	beq.n	800a838 <_dtoa_r+0xb98>
 800a842:	e6dd      	b.n	800a600 <_dtoa_r+0x960>
 800a844:	9a00      	ldr	r2, [sp, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d189      	bne.n	800a75e <_dtoa_r+0xabe>
 800a84a:	f10b 0b01 	add.w	fp, fp, #1
 800a84e:	2331      	movs	r3, #49	; 0x31
 800a850:	e796      	b.n	800a780 <_dtoa_r+0xae0>
 800a852:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <_dtoa_r+0xbdc>)
 800a854:	f7ff ba99 	b.w	8009d8a <_dtoa_r+0xea>
 800a858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f47f aa6d 	bne.w	8009d3a <_dtoa_r+0x9a>
 800a860:	4b07      	ldr	r3, [pc, #28]	; (800a880 <_dtoa_r+0xbe0>)
 800a862:	f7ff ba92 	b.w	8009d8a <_dtoa_r+0xea>
 800a866:	9b01      	ldr	r3, [sp, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dcb5      	bgt.n	800a7d8 <_dtoa_r+0xb38>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	f73f aeb1 	bgt.w	800a5d6 <_dtoa_r+0x936>
 800a874:	e7b0      	b.n	800a7d8 <_dtoa_r+0xb38>
 800a876:	bf00      	nop
 800a878:	0800be38 	.word	0x0800be38
 800a87c:	0800bd73 	.word	0x0800bd73
 800a880:	0800bdd3 	.word	0x0800bdd3

0800a884 <_free_r>:
 800a884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a886:	2900      	cmp	r1, #0
 800a888:	d044      	beq.n	800a914 <_free_r+0x90>
 800a88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88e:	9001      	str	r0, [sp, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f1a1 0404 	sub.w	r4, r1, #4
 800a896:	bfb8      	it	lt
 800a898:	18e4      	addlt	r4, r4, r3
 800a89a:	f000 f8e7 	bl	800aa6c <__malloc_lock>
 800a89e:	4a1e      	ldr	r2, [pc, #120]	; (800a918 <_free_r+0x94>)
 800a8a0:	9801      	ldr	r0, [sp, #4]
 800a8a2:	6813      	ldr	r3, [r2, #0]
 800a8a4:	b933      	cbnz	r3, 800a8b4 <_free_r+0x30>
 800a8a6:	6063      	str	r3, [r4, #4]
 800a8a8:	6014      	str	r4, [r2, #0]
 800a8aa:	b003      	add	sp, #12
 800a8ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b0:	f000 b8e2 	b.w	800aa78 <__malloc_unlock>
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	d908      	bls.n	800a8ca <_free_r+0x46>
 800a8b8:	6825      	ldr	r5, [r4, #0]
 800a8ba:	1961      	adds	r1, r4, r5
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf01      	itttt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	1949      	addeq	r1, r1, r5
 800a8c6:	6021      	streq	r1, [r4, #0]
 800a8c8:	e7ed      	b.n	800a8a6 <_free_r+0x22>
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	b10b      	cbz	r3, 800a8d4 <_free_r+0x50>
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	d9fa      	bls.n	800a8ca <_free_r+0x46>
 800a8d4:	6811      	ldr	r1, [r2, #0]
 800a8d6:	1855      	adds	r5, r2, r1
 800a8d8:	42a5      	cmp	r5, r4
 800a8da:	d10b      	bne.n	800a8f4 <_free_r+0x70>
 800a8dc:	6824      	ldr	r4, [r4, #0]
 800a8de:	4421      	add	r1, r4
 800a8e0:	1854      	adds	r4, r2, r1
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	6011      	str	r1, [r2, #0]
 800a8e6:	d1e0      	bne.n	800a8aa <_free_r+0x26>
 800a8e8:	681c      	ldr	r4, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	6053      	str	r3, [r2, #4]
 800a8ee:	440c      	add	r4, r1
 800a8f0:	6014      	str	r4, [r2, #0]
 800a8f2:	e7da      	b.n	800a8aa <_free_r+0x26>
 800a8f4:	d902      	bls.n	800a8fc <_free_r+0x78>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	e7d6      	b.n	800a8aa <_free_r+0x26>
 800a8fc:	6825      	ldr	r5, [r4, #0]
 800a8fe:	1961      	adds	r1, r4, r5
 800a900:	428b      	cmp	r3, r1
 800a902:	bf04      	itt	eq
 800a904:	6819      	ldreq	r1, [r3, #0]
 800a906:	685b      	ldreq	r3, [r3, #4]
 800a908:	6063      	str	r3, [r4, #4]
 800a90a:	bf04      	itt	eq
 800a90c:	1949      	addeq	r1, r1, r5
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	6054      	str	r4, [r2, #4]
 800a912:	e7ca      	b.n	800a8aa <_free_r+0x26>
 800a914:	b003      	add	sp, #12
 800a916:	bd30      	pop	{r4, r5, pc}
 800a918:	200007c4 	.word	0x200007c4

0800a91c <malloc>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <malloc+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f000 b823 	b.w	800a96c <_malloc_r>
 800a926:	bf00      	nop
 800a928:	20000098 	.word	0x20000098

0800a92c <sbrk_aligned>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	4e0e      	ldr	r6, [pc, #56]	; (800a968 <sbrk_aligned+0x3c>)
 800a930:	460c      	mov	r4, r1
 800a932:	6831      	ldr	r1, [r6, #0]
 800a934:	4605      	mov	r5, r0
 800a936:	b911      	cbnz	r1, 800a93e <sbrk_aligned+0x12>
 800a938:	f000 fe52 	bl	800b5e0 <_sbrk_r>
 800a93c:	6030      	str	r0, [r6, #0]
 800a93e:	4621      	mov	r1, r4
 800a940:	4628      	mov	r0, r5
 800a942:	f000 fe4d 	bl	800b5e0 <_sbrk_r>
 800a946:	1c43      	adds	r3, r0, #1
 800a948:	d00a      	beq.n	800a960 <sbrk_aligned+0x34>
 800a94a:	1cc4      	adds	r4, r0, #3
 800a94c:	f024 0403 	bic.w	r4, r4, #3
 800a950:	42a0      	cmp	r0, r4
 800a952:	d007      	beq.n	800a964 <sbrk_aligned+0x38>
 800a954:	1a21      	subs	r1, r4, r0
 800a956:	4628      	mov	r0, r5
 800a958:	f000 fe42 	bl	800b5e0 <_sbrk_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d101      	bne.n	800a964 <sbrk_aligned+0x38>
 800a960:	f04f 34ff 	mov.w	r4, #4294967295
 800a964:	4620      	mov	r0, r4
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	200007c8 	.word	0x200007c8

0800a96c <_malloc_r>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	1ccd      	adds	r5, r1, #3
 800a972:	f025 0503 	bic.w	r5, r5, #3
 800a976:	3508      	adds	r5, #8
 800a978:	2d0c      	cmp	r5, #12
 800a97a:	bf38      	it	cc
 800a97c:	250c      	movcc	r5, #12
 800a97e:	2d00      	cmp	r5, #0
 800a980:	4607      	mov	r7, r0
 800a982:	db01      	blt.n	800a988 <_malloc_r+0x1c>
 800a984:	42a9      	cmp	r1, r5
 800a986:	d905      	bls.n	800a994 <_malloc_r+0x28>
 800a988:	230c      	movs	r3, #12
 800a98a:	603b      	str	r3, [r7, #0]
 800a98c:	2600      	movs	r6, #0
 800a98e:	4630      	mov	r0, r6
 800a990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa68 <_malloc_r+0xfc>
 800a998:	f000 f868 	bl	800aa6c <__malloc_lock>
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	461c      	mov	r4, r3
 800a9a2:	bb5c      	cbnz	r4, 800a9fc <_malloc_r+0x90>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7ff ffc0 	bl	800a92c <sbrk_aligned>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	d155      	bne.n	800aa5e <_malloc_r+0xf2>
 800a9b2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9b6:	4626      	mov	r6, r4
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	d145      	bne.n	800aa48 <_malloc_r+0xdc>
 800a9bc:	2c00      	cmp	r4, #0
 800a9be:	d048      	beq.n	800aa52 <_malloc_r+0xe6>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	eb04 0903 	add.w	r9, r4, r3
 800a9ca:	f000 fe09 	bl	800b5e0 <_sbrk_r>
 800a9ce:	4581      	cmp	r9, r0
 800a9d0:	d13f      	bne.n	800aa52 <_malloc_r+0xe6>
 800a9d2:	6821      	ldr	r1, [r4, #0]
 800a9d4:	1a6d      	subs	r5, r5, r1
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ffa7 	bl	800a92c <sbrk_aligned>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d037      	beq.n	800aa52 <_malloc_r+0xe6>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	442b      	add	r3, r5
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d038      	beq.n	800aa62 <_malloc_r+0xf6>
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	42a2      	cmp	r2, r4
 800a9f4:	d12b      	bne.n	800aa4e <_malloc_r+0xe2>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	605a      	str	r2, [r3, #4]
 800a9fa:	e00f      	b.n	800aa1c <_malloc_r+0xb0>
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	1b52      	subs	r2, r2, r5
 800aa00:	d41f      	bmi.n	800aa42 <_malloc_r+0xd6>
 800aa02:	2a0b      	cmp	r2, #11
 800aa04:	d917      	bls.n	800aa36 <_malloc_r+0xca>
 800aa06:	1961      	adds	r1, r4, r5
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	6025      	str	r5, [r4, #0]
 800aa0c:	bf18      	it	ne
 800aa0e:	6059      	strne	r1, [r3, #4]
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	bf08      	it	eq
 800aa14:	f8c8 1000 	streq.w	r1, [r8]
 800aa18:	5162      	str	r2, [r4, r5]
 800aa1a:	604b      	str	r3, [r1, #4]
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f104 060b 	add.w	r6, r4, #11
 800aa22:	f000 f829 	bl	800aa78 <__malloc_unlock>
 800aa26:	f026 0607 	bic.w	r6, r6, #7
 800aa2a:	1d23      	adds	r3, r4, #4
 800aa2c:	1af2      	subs	r2, r6, r3
 800aa2e:	d0ae      	beq.n	800a98e <_malloc_r+0x22>
 800aa30:	1b9b      	subs	r3, r3, r6
 800aa32:	50a3      	str	r3, [r4, r2]
 800aa34:	e7ab      	b.n	800a98e <_malloc_r+0x22>
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	6862      	ldr	r2, [r4, #4]
 800aa3a:	d1dd      	bne.n	800a9f8 <_malloc_r+0x8c>
 800aa3c:	f8c8 2000 	str.w	r2, [r8]
 800aa40:	e7ec      	b.n	800aa1c <_malloc_r+0xb0>
 800aa42:	4623      	mov	r3, r4
 800aa44:	6864      	ldr	r4, [r4, #4]
 800aa46:	e7ac      	b.n	800a9a2 <_malloc_r+0x36>
 800aa48:	4634      	mov	r4, r6
 800aa4a:	6876      	ldr	r6, [r6, #4]
 800aa4c:	e7b4      	b.n	800a9b8 <_malloc_r+0x4c>
 800aa4e:	4613      	mov	r3, r2
 800aa50:	e7cc      	b.n	800a9ec <_malloc_r+0x80>
 800aa52:	230c      	movs	r3, #12
 800aa54:	603b      	str	r3, [r7, #0]
 800aa56:	4638      	mov	r0, r7
 800aa58:	f000 f80e 	bl	800aa78 <__malloc_unlock>
 800aa5c:	e797      	b.n	800a98e <_malloc_r+0x22>
 800aa5e:	6025      	str	r5, [r4, #0]
 800aa60:	e7dc      	b.n	800aa1c <_malloc_r+0xb0>
 800aa62:	605b      	str	r3, [r3, #4]
 800aa64:	deff      	udf	#255	; 0xff
 800aa66:	bf00      	nop
 800aa68:	200007c4 	.word	0x200007c4

0800aa6c <__malloc_lock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	; (800aa74 <__malloc_lock+0x8>)
 800aa6e:	f7ff b86d 	b.w	8009b4c <__retarget_lock_acquire_recursive>
 800aa72:	bf00      	nop
 800aa74:	200007c0 	.word	0x200007c0

0800aa78 <__malloc_unlock>:
 800aa78:	4801      	ldr	r0, [pc, #4]	; (800aa80 <__malloc_unlock+0x8>)
 800aa7a:	f7ff b868 	b.w	8009b4e <__retarget_lock_release_recursive>
 800aa7e:	bf00      	nop
 800aa80:	200007c0 	.word	0x200007c0

0800aa84 <_Balloc>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	69c6      	ldr	r6, [r0, #28]
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	b976      	cbnz	r6, 800aaac <_Balloc+0x28>
 800aa8e:	2010      	movs	r0, #16
 800aa90:	f7ff ff44 	bl	800a91c <malloc>
 800aa94:	4602      	mov	r2, r0
 800aa96:	61e0      	str	r0, [r4, #28]
 800aa98:	b920      	cbnz	r0, 800aaa4 <_Balloc+0x20>
 800aa9a:	4b18      	ldr	r3, [pc, #96]	; (800aafc <_Balloc+0x78>)
 800aa9c:	4818      	ldr	r0, [pc, #96]	; (800ab00 <_Balloc+0x7c>)
 800aa9e:	216b      	movs	r1, #107	; 0x6b
 800aaa0:	f7ff f856 	bl	8009b50 <__assert_func>
 800aaa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaa8:	6006      	str	r6, [r0, #0]
 800aaaa:	60c6      	str	r6, [r0, #12]
 800aaac:	69e6      	ldr	r6, [r4, #28]
 800aaae:	68f3      	ldr	r3, [r6, #12]
 800aab0:	b183      	cbz	r3, 800aad4 <_Balloc+0x50>
 800aab2:	69e3      	ldr	r3, [r4, #28]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaba:	b9b8      	cbnz	r0, 800aaec <_Balloc+0x68>
 800aabc:	2101      	movs	r1, #1
 800aabe:	fa01 f605 	lsl.w	r6, r1, r5
 800aac2:	1d72      	adds	r2, r6, #5
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fdaf 	bl	800b62a <_calloc_r>
 800aacc:	b160      	cbz	r0, 800aae8 <_Balloc+0x64>
 800aace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aad2:	e00e      	b.n	800aaf2 <_Balloc+0x6e>
 800aad4:	2221      	movs	r2, #33	; 0x21
 800aad6:	2104      	movs	r1, #4
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fda6 	bl	800b62a <_calloc_r>
 800aade:	69e3      	ldr	r3, [r4, #28]
 800aae0:	60f0      	str	r0, [r6, #12]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e4      	bne.n	800aab2 <_Balloc+0x2e>
 800aae8:	2000      	movs	r0, #0
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	6802      	ldr	r2, [r0, #0]
 800aaee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaf8:	e7f7      	b.n	800aaea <_Balloc+0x66>
 800aafa:	bf00      	nop
 800aafc:	0800bcf4 	.word	0x0800bcf4
 800ab00:	0800be49 	.word	0x0800be49

0800ab04 <_Bfree>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	69c6      	ldr	r6, [r0, #28]
 800ab08:	4605      	mov	r5, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	b976      	cbnz	r6, 800ab2c <_Bfree+0x28>
 800ab0e:	2010      	movs	r0, #16
 800ab10:	f7ff ff04 	bl	800a91c <malloc>
 800ab14:	4602      	mov	r2, r0
 800ab16:	61e8      	str	r0, [r5, #28]
 800ab18:	b920      	cbnz	r0, 800ab24 <_Bfree+0x20>
 800ab1a:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <_Bfree+0x3c>)
 800ab1c:	4809      	ldr	r0, [pc, #36]	; (800ab44 <_Bfree+0x40>)
 800ab1e:	218f      	movs	r1, #143	; 0x8f
 800ab20:	f7ff f816 	bl	8009b50 <__assert_func>
 800ab24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab28:	6006      	str	r6, [r0, #0]
 800ab2a:	60c6      	str	r6, [r0, #12]
 800ab2c:	b13c      	cbz	r4, 800ab3e <_Bfree+0x3a>
 800ab2e:	69eb      	ldr	r3, [r5, #28]
 800ab30:	6862      	ldr	r2, [r4, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab38:	6021      	str	r1, [r4, #0]
 800ab3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	0800bcf4 	.word	0x0800bcf4
 800ab44:	0800be49 	.word	0x0800be49

0800ab48 <__multadd>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	690d      	ldr	r5, [r1, #16]
 800ab4e:	4607      	mov	r7, r0
 800ab50:	460c      	mov	r4, r1
 800ab52:	461e      	mov	r6, r3
 800ab54:	f101 0c14 	add.w	ip, r1, #20
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ab5e:	b299      	uxth	r1, r3
 800ab60:	fb02 6101 	mla	r1, r2, r1, r6
 800ab64:	0c1e      	lsrs	r6, r3, #16
 800ab66:	0c0b      	lsrs	r3, r1, #16
 800ab68:	fb02 3306 	mla	r3, r2, r6, r3
 800ab6c:	b289      	uxth	r1, r1
 800ab6e:	3001      	adds	r0, #1
 800ab70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab74:	4285      	cmp	r5, r0
 800ab76:	f84c 1b04 	str.w	r1, [ip], #4
 800ab7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab7e:	dcec      	bgt.n	800ab5a <__multadd+0x12>
 800ab80:	b30e      	cbz	r6, 800abc6 <__multadd+0x7e>
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	dc19      	bgt.n	800abbc <__multadd+0x74>
 800ab88:	6861      	ldr	r1, [r4, #4]
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	f7ff ff79 	bl	800aa84 <_Balloc>
 800ab92:	4680      	mov	r8, r0
 800ab94:	b928      	cbnz	r0, 800aba2 <__multadd+0x5a>
 800ab96:	4602      	mov	r2, r0
 800ab98:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <__multadd+0x84>)
 800ab9a:	480d      	ldr	r0, [pc, #52]	; (800abd0 <__multadd+0x88>)
 800ab9c:	21ba      	movs	r1, #186	; 0xba
 800ab9e:	f7fe ffd7 	bl	8009b50 <__assert_func>
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	3202      	adds	r2, #2
 800aba6:	f104 010c 	add.w	r1, r4, #12
 800abaa:	0092      	lsls	r2, r2, #2
 800abac:	300c      	adds	r0, #12
 800abae:	f000 fd27 	bl	800b600 <memcpy>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff ffa5 	bl	800ab04 <_Bfree>
 800abba:	4644      	mov	r4, r8
 800abbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abc0:	3501      	adds	r5, #1
 800abc2:	615e      	str	r6, [r3, #20]
 800abc4:	6125      	str	r5, [r4, #16]
 800abc6:	4620      	mov	r0, r4
 800abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abcc:	0800be38 	.word	0x0800be38
 800abd0:	0800be49 	.word	0x0800be49

0800abd4 <__hi0bits>:
 800abd4:	0c03      	lsrs	r3, r0, #16
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	b9d3      	cbnz	r3, 800ac10 <__hi0bits+0x3c>
 800abda:	0400      	lsls	r0, r0, #16
 800abdc:	2310      	movs	r3, #16
 800abde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abe2:	bf04      	itt	eq
 800abe4:	0200      	lsleq	r0, r0, #8
 800abe6:	3308      	addeq	r3, #8
 800abe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abec:	bf04      	itt	eq
 800abee:	0100      	lsleq	r0, r0, #4
 800abf0:	3304      	addeq	r3, #4
 800abf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abf6:	bf04      	itt	eq
 800abf8:	0080      	lsleq	r0, r0, #2
 800abfa:	3302      	addeq	r3, #2
 800abfc:	2800      	cmp	r0, #0
 800abfe:	db05      	blt.n	800ac0c <__hi0bits+0x38>
 800ac00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac04:	f103 0301 	add.w	r3, r3, #1
 800ac08:	bf08      	it	eq
 800ac0a:	2320      	moveq	r3, #32
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	4770      	bx	lr
 800ac10:	2300      	movs	r3, #0
 800ac12:	e7e4      	b.n	800abde <__hi0bits+0xa>

0800ac14 <__lo0bits>:
 800ac14:	6803      	ldr	r3, [r0, #0]
 800ac16:	f013 0207 	ands.w	r2, r3, #7
 800ac1a:	d00c      	beq.n	800ac36 <__lo0bits+0x22>
 800ac1c:	07d9      	lsls	r1, r3, #31
 800ac1e:	d422      	bmi.n	800ac66 <__lo0bits+0x52>
 800ac20:	079a      	lsls	r2, r3, #30
 800ac22:	bf49      	itett	mi
 800ac24:	085b      	lsrmi	r3, r3, #1
 800ac26:	089b      	lsrpl	r3, r3, #2
 800ac28:	6003      	strmi	r3, [r0, #0]
 800ac2a:	2201      	movmi	r2, #1
 800ac2c:	bf5c      	itt	pl
 800ac2e:	6003      	strpl	r3, [r0, #0]
 800ac30:	2202      	movpl	r2, #2
 800ac32:	4610      	mov	r0, r2
 800ac34:	4770      	bx	lr
 800ac36:	b299      	uxth	r1, r3
 800ac38:	b909      	cbnz	r1, 800ac3e <__lo0bits+0x2a>
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	2210      	movs	r2, #16
 800ac3e:	b2d9      	uxtb	r1, r3
 800ac40:	b909      	cbnz	r1, 800ac46 <__lo0bits+0x32>
 800ac42:	3208      	adds	r2, #8
 800ac44:	0a1b      	lsrs	r3, r3, #8
 800ac46:	0719      	lsls	r1, r3, #28
 800ac48:	bf04      	itt	eq
 800ac4a:	091b      	lsreq	r3, r3, #4
 800ac4c:	3204      	addeq	r2, #4
 800ac4e:	0799      	lsls	r1, r3, #30
 800ac50:	bf04      	itt	eq
 800ac52:	089b      	lsreq	r3, r3, #2
 800ac54:	3202      	addeq	r2, #2
 800ac56:	07d9      	lsls	r1, r3, #31
 800ac58:	d403      	bmi.n	800ac62 <__lo0bits+0x4e>
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	f102 0201 	add.w	r2, r2, #1
 800ac60:	d003      	beq.n	800ac6a <__lo0bits+0x56>
 800ac62:	6003      	str	r3, [r0, #0]
 800ac64:	e7e5      	b.n	800ac32 <__lo0bits+0x1e>
 800ac66:	2200      	movs	r2, #0
 800ac68:	e7e3      	b.n	800ac32 <__lo0bits+0x1e>
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	e7e1      	b.n	800ac32 <__lo0bits+0x1e>
	...

0800ac70 <__i2b>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	460c      	mov	r4, r1
 800ac74:	2101      	movs	r1, #1
 800ac76:	f7ff ff05 	bl	800aa84 <_Balloc>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	b928      	cbnz	r0, 800ac8a <__i2b+0x1a>
 800ac7e:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <__i2b+0x24>)
 800ac80:	4805      	ldr	r0, [pc, #20]	; (800ac98 <__i2b+0x28>)
 800ac82:	f240 1145 	movw	r1, #325	; 0x145
 800ac86:	f7fe ff63 	bl	8009b50 <__assert_func>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	6144      	str	r4, [r0, #20]
 800ac8e:	6103      	str	r3, [r0, #16]
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	bf00      	nop
 800ac94:	0800be38 	.word	0x0800be38
 800ac98:	0800be49 	.word	0x0800be49

0800ac9c <__multiply>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	4691      	mov	r9, r2
 800aca2:	690a      	ldr	r2, [r1, #16]
 800aca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	bfb8      	it	lt
 800acac:	460b      	movlt	r3, r1
 800acae:	460c      	mov	r4, r1
 800acb0:	bfbc      	itt	lt
 800acb2:	464c      	movlt	r4, r9
 800acb4:	4699      	movlt	r9, r3
 800acb6:	6927      	ldr	r7, [r4, #16]
 800acb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acbc:	68a3      	ldr	r3, [r4, #8]
 800acbe:	6861      	ldr	r1, [r4, #4]
 800acc0:	eb07 060a 	add.w	r6, r7, sl
 800acc4:	42b3      	cmp	r3, r6
 800acc6:	b085      	sub	sp, #20
 800acc8:	bfb8      	it	lt
 800acca:	3101      	addlt	r1, #1
 800accc:	f7ff feda 	bl	800aa84 <_Balloc>
 800acd0:	b930      	cbnz	r0, 800ace0 <__multiply+0x44>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4b44      	ldr	r3, [pc, #272]	; (800ade8 <__multiply+0x14c>)
 800acd6:	4845      	ldr	r0, [pc, #276]	; (800adec <__multiply+0x150>)
 800acd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800acdc:	f7fe ff38 	bl	8009b50 <__assert_func>
 800ace0:	f100 0514 	add.w	r5, r0, #20
 800ace4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ace8:	462b      	mov	r3, r5
 800acea:	2200      	movs	r2, #0
 800acec:	4543      	cmp	r3, r8
 800acee:	d321      	bcc.n	800ad34 <__multiply+0x98>
 800acf0:	f104 0314 	add.w	r3, r4, #20
 800acf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acf8:	f109 0314 	add.w	r3, r9, #20
 800acfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad00:	9202      	str	r2, [sp, #8]
 800ad02:	1b3a      	subs	r2, r7, r4
 800ad04:	3a15      	subs	r2, #21
 800ad06:	f022 0203 	bic.w	r2, r2, #3
 800ad0a:	3204      	adds	r2, #4
 800ad0c:	f104 0115 	add.w	r1, r4, #21
 800ad10:	428f      	cmp	r7, r1
 800ad12:	bf38      	it	cc
 800ad14:	2204      	movcc	r2, #4
 800ad16:	9201      	str	r2, [sp, #4]
 800ad18:	9a02      	ldr	r2, [sp, #8]
 800ad1a:	9303      	str	r3, [sp, #12]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d80c      	bhi.n	800ad3a <__multiply+0x9e>
 800ad20:	2e00      	cmp	r6, #0
 800ad22:	dd03      	ble.n	800ad2c <__multiply+0x90>
 800ad24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d05b      	beq.n	800ade4 <__multiply+0x148>
 800ad2c:	6106      	str	r6, [r0, #16]
 800ad2e:	b005      	add	sp, #20
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	f843 2b04 	str.w	r2, [r3], #4
 800ad38:	e7d8      	b.n	800acec <__multiply+0x50>
 800ad3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad3e:	f1ba 0f00 	cmp.w	sl, #0
 800ad42:	d024      	beq.n	800ad8e <__multiply+0xf2>
 800ad44:	f104 0e14 	add.w	lr, r4, #20
 800ad48:	46a9      	mov	r9, r5
 800ad4a:	f04f 0c00 	mov.w	ip, #0
 800ad4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad52:	f8d9 1000 	ldr.w	r1, [r9]
 800ad56:	fa1f fb82 	uxth.w	fp, r2
 800ad5a:	b289      	uxth	r1, r1
 800ad5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad64:	f8d9 2000 	ldr.w	r2, [r9]
 800ad68:	4461      	add	r1, ip
 800ad6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad76:	b289      	uxth	r1, r1
 800ad78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad7c:	4577      	cmp	r7, lr
 800ad7e:	f849 1b04 	str.w	r1, [r9], #4
 800ad82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad86:	d8e2      	bhi.n	800ad4e <__multiply+0xb2>
 800ad88:	9a01      	ldr	r2, [sp, #4]
 800ad8a:	f845 c002 	str.w	ip, [r5, r2]
 800ad8e:	9a03      	ldr	r2, [sp, #12]
 800ad90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad94:	3304      	adds	r3, #4
 800ad96:	f1b9 0f00 	cmp.w	r9, #0
 800ad9a:	d021      	beq.n	800ade0 <__multiply+0x144>
 800ad9c:	6829      	ldr	r1, [r5, #0]
 800ad9e:	f104 0c14 	add.w	ip, r4, #20
 800ada2:	46ae      	mov	lr, r5
 800ada4:	f04f 0a00 	mov.w	sl, #0
 800ada8:	f8bc b000 	ldrh.w	fp, [ip]
 800adac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adb0:	fb09 220b 	mla	r2, r9, fp, r2
 800adb4:	4452      	add	r2, sl
 800adb6:	b289      	uxth	r1, r1
 800adb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adbc:	f84e 1b04 	str.w	r1, [lr], #4
 800adc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800adc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adc8:	f8be 1000 	ldrh.w	r1, [lr]
 800adcc:	fb09 110a 	mla	r1, r9, sl, r1
 800add0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800add4:	4567      	cmp	r7, ip
 800add6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adda:	d8e5      	bhi.n	800ada8 <__multiply+0x10c>
 800addc:	9a01      	ldr	r2, [sp, #4]
 800adde:	50a9      	str	r1, [r5, r2]
 800ade0:	3504      	adds	r5, #4
 800ade2:	e799      	b.n	800ad18 <__multiply+0x7c>
 800ade4:	3e01      	subs	r6, #1
 800ade6:	e79b      	b.n	800ad20 <__multiply+0x84>
 800ade8:	0800be38 	.word	0x0800be38
 800adec:	0800be49 	.word	0x0800be49

0800adf0 <__pow5mult>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	4615      	mov	r5, r2
 800adf6:	f012 0203 	ands.w	r2, r2, #3
 800adfa:	4606      	mov	r6, r0
 800adfc:	460f      	mov	r7, r1
 800adfe:	d007      	beq.n	800ae10 <__pow5mult+0x20>
 800ae00:	4c25      	ldr	r4, [pc, #148]	; (800ae98 <__pow5mult+0xa8>)
 800ae02:	3a01      	subs	r2, #1
 800ae04:	2300      	movs	r3, #0
 800ae06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae0a:	f7ff fe9d 	bl	800ab48 <__multadd>
 800ae0e:	4607      	mov	r7, r0
 800ae10:	10ad      	asrs	r5, r5, #2
 800ae12:	d03d      	beq.n	800ae90 <__pow5mult+0xa0>
 800ae14:	69f4      	ldr	r4, [r6, #28]
 800ae16:	b97c      	cbnz	r4, 800ae38 <__pow5mult+0x48>
 800ae18:	2010      	movs	r0, #16
 800ae1a:	f7ff fd7f 	bl	800a91c <malloc>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	61f0      	str	r0, [r6, #28]
 800ae22:	b928      	cbnz	r0, 800ae30 <__pow5mult+0x40>
 800ae24:	4b1d      	ldr	r3, [pc, #116]	; (800ae9c <__pow5mult+0xac>)
 800ae26:	481e      	ldr	r0, [pc, #120]	; (800aea0 <__pow5mult+0xb0>)
 800ae28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae2c:	f7fe fe90 	bl	8009b50 <__assert_func>
 800ae30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae34:	6004      	str	r4, [r0, #0]
 800ae36:	60c4      	str	r4, [r0, #12]
 800ae38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae40:	b94c      	cbnz	r4, 800ae56 <__pow5mult+0x66>
 800ae42:	f240 2171 	movw	r1, #625	; 0x271
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7ff ff12 	bl	800ac70 <__i2b>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae52:	4604      	mov	r4, r0
 800ae54:	6003      	str	r3, [r0, #0]
 800ae56:	f04f 0900 	mov.w	r9, #0
 800ae5a:	07eb      	lsls	r3, r5, #31
 800ae5c:	d50a      	bpl.n	800ae74 <__pow5mult+0x84>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4622      	mov	r2, r4
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff1a 	bl	800ac9c <__multiply>
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff fe49 	bl	800ab04 <_Bfree>
 800ae72:	4647      	mov	r7, r8
 800ae74:	106d      	asrs	r5, r5, #1
 800ae76:	d00b      	beq.n	800ae90 <__pow5mult+0xa0>
 800ae78:	6820      	ldr	r0, [r4, #0]
 800ae7a:	b938      	cbnz	r0, 800ae8c <__pow5mult+0x9c>
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7ff ff0b 	bl	800ac9c <__multiply>
 800ae86:	6020      	str	r0, [r4, #0]
 800ae88:	f8c0 9000 	str.w	r9, [r0]
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	e7e4      	b.n	800ae5a <__pow5mult+0x6a>
 800ae90:	4638      	mov	r0, r7
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	bf00      	nop
 800ae98:	0800bf98 	.word	0x0800bf98
 800ae9c:	0800bcf4 	.word	0x0800bcf4
 800aea0:	0800be49 	.word	0x0800be49

0800aea4 <__lshift>:
 800aea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea8:	460c      	mov	r4, r1
 800aeaa:	6849      	ldr	r1, [r1, #4]
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	4691      	mov	r9, r2
 800aeb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aebc:	f108 0601 	add.w	r6, r8, #1
 800aec0:	42b3      	cmp	r3, r6
 800aec2:	db0b      	blt.n	800aedc <__lshift+0x38>
 800aec4:	4638      	mov	r0, r7
 800aec6:	f7ff fddd 	bl	800aa84 <_Balloc>
 800aeca:	4605      	mov	r5, r0
 800aecc:	b948      	cbnz	r0, 800aee2 <__lshift+0x3e>
 800aece:	4602      	mov	r2, r0
 800aed0:	4b28      	ldr	r3, [pc, #160]	; (800af74 <__lshift+0xd0>)
 800aed2:	4829      	ldr	r0, [pc, #164]	; (800af78 <__lshift+0xd4>)
 800aed4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aed8:	f7fe fe3a 	bl	8009b50 <__assert_func>
 800aedc:	3101      	adds	r1, #1
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	e7ee      	b.n	800aec0 <__lshift+0x1c>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f100 0114 	add.w	r1, r0, #20
 800aee8:	f100 0210 	add.w	r2, r0, #16
 800aeec:	4618      	mov	r0, r3
 800aeee:	4553      	cmp	r3, sl
 800aef0:	db33      	blt.n	800af5a <__lshift+0xb6>
 800aef2:	6920      	ldr	r0, [r4, #16]
 800aef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aef8:	f104 0314 	add.w	r3, r4, #20
 800aefc:	f019 091f 	ands.w	r9, r9, #31
 800af00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af08:	d02b      	beq.n	800af62 <__lshift+0xbe>
 800af0a:	f1c9 0e20 	rsb	lr, r9, #32
 800af0e:	468a      	mov	sl, r1
 800af10:	2200      	movs	r2, #0
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	fa00 f009 	lsl.w	r0, r0, r9
 800af18:	4310      	orrs	r0, r2
 800af1a:	f84a 0b04 	str.w	r0, [sl], #4
 800af1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af22:	459c      	cmp	ip, r3
 800af24:	fa22 f20e 	lsr.w	r2, r2, lr
 800af28:	d8f3      	bhi.n	800af12 <__lshift+0x6e>
 800af2a:	ebac 0304 	sub.w	r3, ip, r4
 800af2e:	3b15      	subs	r3, #21
 800af30:	f023 0303 	bic.w	r3, r3, #3
 800af34:	3304      	adds	r3, #4
 800af36:	f104 0015 	add.w	r0, r4, #21
 800af3a:	4584      	cmp	ip, r0
 800af3c:	bf38      	it	cc
 800af3e:	2304      	movcc	r3, #4
 800af40:	50ca      	str	r2, [r1, r3]
 800af42:	b10a      	cbz	r2, 800af48 <__lshift+0xa4>
 800af44:	f108 0602 	add.w	r6, r8, #2
 800af48:	3e01      	subs	r6, #1
 800af4a:	4638      	mov	r0, r7
 800af4c:	612e      	str	r6, [r5, #16]
 800af4e:	4621      	mov	r1, r4
 800af50:	f7ff fdd8 	bl	800ab04 <_Bfree>
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af5e:	3301      	adds	r3, #1
 800af60:	e7c5      	b.n	800aeee <__lshift+0x4a>
 800af62:	3904      	subs	r1, #4
 800af64:	f853 2b04 	ldr.w	r2, [r3], #4
 800af68:	f841 2f04 	str.w	r2, [r1, #4]!
 800af6c:	459c      	cmp	ip, r3
 800af6e:	d8f9      	bhi.n	800af64 <__lshift+0xc0>
 800af70:	e7ea      	b.n	800af48 <__lshift+0xa4>
 800af72:	bf00      	nop
 800af74:	0800be38 	.word	0x0800be38
 800af78:	0800be49 	.word	0x0800be49

0800af7c <__mcmp>:
 800af7c:	b530      	push	{r4, r5, lr}
 800af7e:	6902      	ldr	r2, [r0, #16]
 800af80:	690c      	ldr	r4, [r1, #16]
 800af82:	1b12      	subs	r2, r2, r4
 800af84:	d10e      	bne.n	800afa4 <__mcmp+0x28>
 800af86:	f100 0314 	add.w	r3, r0, #20
 800af8a:	3114      	adds	r1, #20
 800af8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af9c:	42a5      	cmp	r5, r4
 800af9e:	d003      	beq.n	800afa8 <__mcmp+0x2c>
 800afa0:	d305      	bcc.n	800afae <__mcmp+0x32>
 800afa2:	2201      	movs	r2, #1
 800afa4:	4610      	mov	r0, r2
 800afa6:	bd30      	pop	{r4, r5, pc}
 800afa8:	4283      	cmp	r3, r0
 800afaa:	d3f3      	bcc.n	800af94 <__mcmp+0x18>
 800afac:	e7fa      	b.n	800afa4 <__mcmp+0x28>
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	e7f7      	b.n	800afa4 <__mcmp+0x28>

0800afb4 <__mdiff>:
 800afb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	460c      	mov	r4, r1
 800afba:	4606      	mov	r6, r0
 800afbc:	4611      	mov	r1, r2
 800afbe:	4620      	mov	r0, r4
 800afc0:	4690      	mov	r8, r2
 800afc2:	f7ff ffdb 	bl	800af7c <__mcmp>
 800afc6:	1e05      	subs	r5, r0, #0
 800afc8:	d110      	bne.n	800afec <__mdiff+0x38>
 800afca:	4629      	mov	r1, r5
 800afcc:	4630      	mov	r0, r6
 800afce:	f7ff fd59 	bl	800aa84 <_Balloc>
 800afd2:	b930      	cbnz	r0, 800afe2 <__mdiff+0x2e>
 800afd4:	4b3a      	ldr	r3, [pc, #232]	; (800b0c0 <__mdiff+0x10c>)
 800afd6:	4602      	mov	r2, r0
 800afd8:	f240 2137 	movw	r1, #567	; 0x237
 800afdc:	4839      	ldr	r0, [pc, #228]	; (800b0c4 <__mdiff+0x110>)
 800afde:	f7fe fdb7 	bl	8009b50 <__assert_func>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afec:	bfa4      	itt	ge
 800afee:	4643      	movge	r3, r8
 800aff0:	46a0      	movge	r8, r4
 800aff2:	4630      	mov	r0, r6
 800aff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aff8:	bfa6      	itte	ge
 800affa:	461c      	movge	r4, r3
 800affc:	2500      	movge	r5, #0
 800affe:	2501      	movlt	r5, #1
 800b000:	f7ff fd40 	bl	800aa84 <_Balloc>
 800b004:	b920      	cbnz	r0, 800b010 <__mdiff+0x5c>
 800b006:	4b2e      	ldr	r3, [pc, #184]	; (800b0c0 <__mdiff+0x10c>)
 800b008:	4602      	mov	r2, r0
 800b00a:	f240 2145 	movw	r1, #581	; 0x245
 800b00e:	e7e5      	b.n	800afdc <__mdiff+0x28>
 800b010:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b014:	6926      	ldr	r6, [r4, #16]
 800b016:	60c5      	str	r5, [r0, #12]
 800b018:	f104 0914 	add.w	r9, r4, #20
 800b01c:	f108 0514 	add.w	r5, r8, #20
 800b020:	f100 0e14 	add.w	lr, r0, #20
 800b024:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b02c:	f108 0210 	add.w	r2, r8, #16
 800b030:	46f2      	mov	sl, lr
 800b032:	2100      	movs	r1, #0
 800b034:	f859 3b04 	ldr.w	r3, [r9], #4
 800b038:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b03c:	fa11 f88b 	uxtah	r8, r1, fp
 800b040:	b299      	uxth	r1, r3
 800b042:	0c1b      	lsrs	r3, r3, #16
 800b044:	eba8 0801 	sub.w	r8, r8, r1
 800b048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b04c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b050:	fa1f f888 	uxth.w	r8, r8
 800b054:	1419      	asrs	r1, r3, #16
 800b056:	454e      	cmp	r6, r9
 800b058:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b05c:	f84a 3b04 	str.w	r3, [sl], #4
 800b060:	d8e8      	bhi.n	800b034 <__mdiff+0x80>
 800b062:	1b33      	subs	r3, r6, r4
 800b064:	3b15      	subs	r3, #21
 800b066:	f023 0303 	bic.w	r3, r3, #3
 800b06a:	3304      	adds	r3, #4
 800b06c:	3415      	adds	r4, #21
 800b06e:	42a6      	cmp	r6, r4
 800b070:	bf38      	it	cc
 800b072:	2304      	movcc	r3, #4
 800b074:	441d      	add	r5, r3
 800b076:	4473      	add	r3, lr
 800b078:	469e      	mov	lr, r3
 800b07a:	462e      	mov	r6, r5
 800b07c:	4566      	cmp	r6, ip
 800b07e:	d30e      	bcc.n	800b09e <__mdiff+0xea>
 800b080:	f10c 0203 	add.w	r2, ip, #3
 800b084:	1b52      	subs	r2, r2, r5
 800b086:	f022 0203 	bic.w	r2, r2, #3
 800b08a:	3d03      	subs	r5, #3
 800b08c:	45ac      	cmp	ip, r5
 800b08e:	bf38      	it	cc
 800b090:	2200      	movcc	r2, #0
 800b092:	4413      	add	r3, r2
 800b094:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b098:	b17a      	cbz	r2, 800b0ba <__mdiff+0x106>
 800b09a:	6107      	str	r7, [r0, #16]
 800b09c:	e7a4      	b.n	800afe8 <__mdiff+0x34>
 800b09e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0a2:	fa11 f288 	uxtah	r2, r1, r8
 800b0a6:	1414      	asrs	r4, r2, #16
 800b0a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0ac:	b292      	uxth	r2, r2
 800b0ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0b2:	f84e 2b04 	str.w	r2, [lr], #4
 800b0b6:	1421      	asrs	r1, r4, #16
 800b0b8:	e7e0      	b.n	800b07c <__mdiff+0xc8>
 800b0ba:	3f01      	subs	r7, #1
 800b0bc:	e7ea      	b.n	800b094 <__mdiff+0xe0>
 800b0be:	bf00      	nop
 800b0c0:	0800be38 	.word	0x0800be38
 800b0c4:	0800be49 	.word	0x0800be49

0800b0c8 <__d2b>:
 800b0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	460f      	mov	r7, r1
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	ec59 8b10 	vmov	r8, r9, d0
 800b0d4:	4616      	mov	r6, r2
 800b0d6:	f7ff fcd5 	bl	800aa84 <_Balloc>
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b930      	cbnz	r0, 800b0ec <__d2b+0x24>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	4b24      	ldr	r3, [pc, #144]	; (800b174 <__d2b+0xac>)
 800b0e2:	4825      	ldr	r0, [pc, #148]	; (800b178 <__d2b+0xb0>)
 800b0e4:	f240 310f 	movw	r1, #783	; 0x30f
 800b0e8:	f7fe fd32 	bl	8009b50 <__assert_func>
 800b0ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0f4:	bb2d      	cbnz	r5, 800b142 <__d2b+0x7a>
 800b0f6:	9301      	str	r3, [sp, #4]
 800b0f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b0fc:	d026      	beq.n	800b14c <__d2b+0x84>
 800b0fe:	4668      	mov	r0, sp
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	f7ff fd87 	bl	800ac14 <__lo0bits>
 800b106:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b10a:	b1e8      	cbz	r0, 800b148 <__d2b+0x80>
 800b10c:	f1c0 0320 	rsb	r3, r0, #32
 800b110:	fa02 f303 	lsl.w	r3, r2, r3
 800b114:	430b      	orrs	r3, r1
 800b116:	40c2      	lsrs	r2, r0
 800b118:	6163      	str	r3, [r4, #20]
 800b11a:	9201      	str	r2, [sp, #4]
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	61a3      	str	r3, [r4, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	bf14      	ite	ne
 800b124:	2202      	movne	r2, #2
 800b126:	2201      	moveq	r2, #1
 800b128:	6122      	str	r2, [r4, #16]
 800b12a:	b1bd      	cbz	r5, 800b15c <__d2b+0x94>
 800b12c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b130:	4405      	add	r5, r0
 800b132:	603d      	str	r5, [r7, #0]
 800b134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b138:	6030      	str	r0, [r6, #0]
 800b13a:	4620      	mov	r0, r4
 800b13c:	b003      	add	sp, #12
 800b13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b146:	e7d6      	b.n	800b0f6 <__d2b+0x2e>
 800b148:	6161      	str	r1, [r4, #20]
 800b14a:	e7e7      	b.n	800b11c <__d2b+0x54>
 800b14c:	a801      	add	r0, sp, #4
 800b14e:	f7ff fd61 	bl	800ac14 <__lo0bits>
 800b152:	9b01      	ldr	r3, [sp, #4]
 800b154:	6163      	str	r3, [r4, #20]
 800b156:	3020      	adds	r0, #32
 800b158:	2201      	movs	r2, #1
 800b15a:	e7e5      	b.n	800b128 <__d2b+0x60>
 800b15c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b164:	6038      	str	r0, [r7, #0]
 800b166:	6918      	ldr	r0, [r3, #16]
 800b168:	f7ff fd34 	bl	800abd4 <__hi0bits>
 800b16c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b170:	e7e2      	b.n	800b138 <__d2b+0x70>
 800b172:	bf00      	nop
 800b174:	0800be38 	.word	0x0800be38
 800b178:	0800be49 	.word	0x0800be49

0800b17c <__ssputs_r>:
 800b17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	688e      	ldr	r6, [r1, #8]
 800b182:	461f      	mov	r7, r3
 800b184:	42be      	cmp	r6, r7
 800b186:	680b      	ldr	r3, [r1, #0]
 800b188:	4682      	mov	sl, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	4690      	mov	r8, r2
 800b18e:	d82c      	bhi.n	800b1ea <__ssputs_r+0x6e>
 800b190:	898a      	ldrh	r2, [r1, #12]
 800b192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b196:	d026      	beq.n	800b1e6 <__ssputs_r+0x6a>
 800b198:	6965      	ldr	r5, [r4, #20]
 800b19a:	6909      	ldr	r1, [r1, #16]
 800b19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1a0:	eba3 0901 	sub.w	r9, r3, r1
 800b1a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1a8:	1c7b      	adds	r3, r7, #1
 800b1aa:	444b      	add	r3, r9
 800b1ac:	106d      	asrs	r5, r5, #1
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	bf38      	it	cc
 800b1b2:	461d      	movcc	r5, r3
 800b1b4:	0553      	lsls	r3, r2, #21
 800b1b6:	d527      	bpl.n	800b208 <__ssputs_r+0x8c>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7ff fbd7 	bl	800a96c <_malloc_r>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	b360      	cbz	r0, 800b21c <__ssputs_r+0xa0>
 800b1c2:	6921      	ldr	r1, [r4, #16]
 800b1c4:	464a      	mov	r2, r9
 800b1c6:	f000 fa1b 	bl	800b600 <memcpy>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	6126      	str	r6, [r4, #16]
 800b1d8:	6165      	str	r5, [r4, #20]
 800b1da:	444e      	add	r6, r9
 800b1dc:	eba5 0509 	sub.w	r5, r5, r9
 800b1e0:	6026      	str	r6, [r4, #0]
 800b1e2:	60a5      	str	r5, [r4, #8]
 800b1e4:	463e      	mov	r6, r7
 800b1e6:	42be      	cmp	r6, r7
 800b1e8:	d900      	bls.n	800b1ec <__ssputs_r+0x70>
 800b1ea:	463e      	mov	r6, r7
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	4632      	mov	r2, r6
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	f000 f9db 	bl	800b5ac <memmove>
 800b1f6:	68a3      	ldr	r3, [r4, #8]
 800b1f8:	1b9b      	subs	r3, r3, r6
 800b1fa:	60a3      	str	r3, [r4, #8]
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	4433      	add	r3, r6
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	2000      	movs	r0, #0
 800b204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b208:	462a      	mov	r2, r5
 800b20a:	f000 fa36 	bl	800b67a <_realloc_r>
 800b20e:	4606      	mov	r6, r0
 800b210:	2800      	cmp	r0, #0
 800b212:	d1e0      	bne.n	800b1d6 <__ssputs_r+0x5a>
 800b214:	6921      	ldr	r1, [r4, #16]
 800b216:	4650      	mov	r0, sl
 800b218:	f7ff fb34 	bl	800a884 <_free_r>
 800b21c:	230c      	movs	r3, #12
 800b21e:	f8ca 3000 	str.w	r3, [sl]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	e7e9      	b.n	800b204 <__ssputs_r+0x88>

0800b230 <_svfiprintf_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4698      	mov	r8, r3
 800b236:	898b      	ldrh	r3, [r1, #12]
 800b238:	061b      	lsls	r3, r3, #24
 800b23a:	b09d      	sub	sp, #116	; 0x74
 800b23c:	4607      	mov	r7, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	4614      	mov	r4, r2
 800b242:	d50e      	bpl.n	800b262 <_svfiprintf_r+0x32>
 800b244:	690b      	ldr	r3, [r1, #16]
 800b246:	b963      	cbnz	r3, 800b262 <_svfiprintf_r+0x32>
 800b248:	2140      	movs	r1, #64	; 0x40
 800b24a:	f7ff fb8f 	bl	800a96c <_malloc_r>
 800b24e:	6028      	str	r0, [r5, #0]
 800b250:	6128      	str	r0, [r5, #16]
 800b252:	b920      	cbnz	r0, 800b25e <_svfiprintf_r+0x2e>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e0d0      	b.n	800b400 <_svfiprintf_r+0x1d0>
 800b25e:	2340      	movs	r3, #64	; 0x40
 800b260:	616b      	str	r3, [r5, #20]
 800b262:	2300      	movs	r3, #0
 800b264:	9309      	str	r3, [sp, #36]	; 0x24
 800b266:	2320      	movs	r3, #32
 800b268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b270:	2330      	movs	r3, #48	; 0x30
 800b272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b418 <_svfiprintf_r+0x1e8>
 800b276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b27a:	f04f 0901 	mov.w	r9, #1
 800b27e:	4623      	mov	r3, r4
 800b280:	469a      	mov	sl, r3
 800b282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b286:	b10a      	cbz	r2, 800b28c <_svfiprintf_r+0x5c>
 800b288:	2a25      	cmp	r2, #37	; 0x25
 800b28a:	d1f9      	bne.n	800b280 <_svfiprintf_r+0x50>
 800b28c:	ebba 0b04 	subs.w	fp, sl, r4
 800b290:	d00b      	beq.n	800b2aa <_svfiprintf_r+0x7a>
 800b292:	465b      	mov	r3, fp
 800b294:	4622      	mov	r2, r4
 800b296:	4629      	mov	r1, r5
 800b298:	4638      	mov	r0, r7
 800b29a:	f7ff ff6f 	bl	800b17c <__ssputs_r>
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f000 80a9 	beq.w	800b3f6 <_svfiprintf_r+0x1c6>
 800b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a6:	445a      	add	r2, fp
 800b2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80a1 	beq.w	800b3f6 <_svfiprintf_r+0x1c6>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2be:	f10a 0a01 	add.w	sl, sl, #1
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	9307      	str	r3, [sp, #28]
 800b2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b2cc:	4654      	mov	r4, sl
 800b2ce:	2205      	movs	r2, #5
 800b2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d4:	4850      	ldr	r0, [pc, #320]	; (800b418 <_svfiprintf_r+0x1e8>)
 800b2d6:	f7f4 ffa3 	bl	8000220 <memchr>
 800b2da:	9a04      	ldr	r2, [sp, #16]
 800b2dc:	b9d8      	cbnz	r0, 800b316 <_svfiprintf_r+0xe6>
 800b2de:	06d0      	lsls	r0, r2, #27
 800b2e0:	bf44      	itt	mi
 800b2e2:	2320      	movmi	r3, #32
 800b2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e8:	0711      	lsls	r1, r2, #28
 800b2ea:	bf44      	itt	mi
 800b2ec:	232b      	movmi	r3, #43	; 0x2b
 800b2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f8:	d015      	beq.n	800b326 <_svfiprintf_r+0xf6>
 800b2fa:	9a07      	ldr	r2, [sp, #28]
 800b2fc:	4654      	mov	r4, sl
 800b2fe:	2000      	movs	r0, #0
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4621      	mov	r1, r4
 800b306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b30a:	3b30      	subs	r3, #48	; 0x30
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	d94d      	bls.n	800b3ac <_svfiprintf_r+0x17c>
 800b310:	b1b0      	cbz	r0, 800b340 <_svfiprintf_r+0x110>
 800b312:	9207      	str	r2, [sp, #28]
 800b314:	e014      	b.n	800b340 <_svfiprintf_r+0x110>
 800b316:	eba0 0308 	sub.w	r3, r0, r8
 800b31a:	fa09 f303 	lsl.w	r3, r9, r3
 800b31e:	4313      	orrs	r3, r2
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	46a2      	mov	sl, r4
 800b324:	e7d2      	b.n	800b2cc <_svfiprintf_r+0x9c>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	1d19      	adds	r1, r3, #4
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	9103      	str	r1, [sp, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfbb      	ittet	lt
 800b332:	425b      	neglt	r3, r3
 800b334:	f042 0202 	orrlt.w	r2, r2, #2
 800b338:	9307      	strge	r3, [sp, #28]
 800b33a:	9307      	strlt	r3, [sp, #28]
 800b33c:	bfb8      	it	lt
 800b33e:	9204      	strlt	r2, [sp, #16]
 800b340:	7823      	ldrb	r3, [r4, #0]
 800b342:	2b2e      	cmp	r3, #46	; 0x2e
 800b344:	d10c      	bne.n	800b360 <_svfiprintf_r+0x130>
 800b346:	7863      	ldrb	r3, [r4, #1]
 800b348:	2b2a      	cmp	r3, #42	; 0x2a
 800b34a:	d134      	bne.n	800b3b6 <_svfiprintf_r+0x186>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	1d1a      	adds	r2, r3, #4
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	9203      	str	r2, [sp, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	bfb8      	it	lt
 800b358:	f04f 33ff 	movlt.w	r3, #4294967295
 800b35c:	3402      	adds	r4, #2
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b428 <_svfiprintf_r+0x1f8>
 800b364:	7821      	ldrb	r1, [r4, #0]
 800b366:	2203      	movs	r2, #3
 800b368:	4650      	mov	r0, sl
 800b36a:	f7f4 ff59 	bl	8000220 <memchr>
 800b36e:	b138      	cbz	r0, 800b380 <_svfiprintf_r+0x150>
 800b370:	9b04      	ldr	r3, [sp, #16]
 800b372:	eba0 000a 	sub.w	r0, r0, sl
 800b376:	2240      	movs	r2, #64	; 0x40
 800b378:	4082      	lsls	r2, r0
 800b37a:	4313      	orrs	r3, r2
 800b37c:	3401      	adds	r4, #1
 800b37e:	9304      	str	r3, [sp, #16]
 800b380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b384:	4825      	ldr	r0, [pc, #148]	; (800b41c <_svfiprintf_r+0x1ec>)
 800b386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b38a:	2206      	movs	r2, #6
 800b38c:	f7f4 ff48 	bl	8000220 <memchr>
 800b390:	2800      	cmp	r0, #0
 800b392:	d038      	beq.n	800b406 <_svfiprintf_r+0x1d6>
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <_svfiprintf_r+0x1f0>)
 800b396:	bb1b      	cbnz	r3, 800b3e0 <_svfiprintf_r+0x1b0>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	3307      	adds	r3, #7
 800b39c:	f023 0307 	bic.w	r3, r3, #7
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a6:	4433      	add	r3, r6
 800b3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3aa:	e768      	b.n	800b27e <_svfiprintf_r+0x4e>
 800b3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e7a6      	b.n	800b304 <_svfiprintf_r+0xd4>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	3401      	adds	r4, #1
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	f04f 0c0a 	mov.w	ip, #10
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3c8:	3a30      	subs	r2, #48	; 0x30
 800b3ca:	2a09      	cmp	r2, #9
 800b3cc:	d903      	bls.n	800b3d6 <_svfiprintf_r+0x1a6>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0c6      	beq.n	800b360 <_svfiprintf_r+0x130>
 800b3d2:	9105      	str	r1, [sp, #20]
 800b3d4:	e7c4      	b.n	800b360 <_svfiprintf_r+0x130>
 800b3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3da:	4604      	mov	r4, r0
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e7f0      	b.n	800b3c2 <_svfiprintf_r+0x192>
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <_svfiprintf_r+0x1f4>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7fd fe58 	bl	80090a0 <_printf_float>
 800b3f0:	1c42      	adds	r2, r0, #1
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	d1d6      	bne.n	800b3a4 <_svfiprintf_r+0x174>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	065b      	lsls	r3, r3, #25
 800b3fa:	f53f af2d 	bmi.w	800b258 <_svfiprintf_r+0x28>
 800b3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b400:	b01d      	add	sp, #116	; 0x74
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	ab03      	add	r3, sp, #12
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	462a      	mov	r2, r5
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <_svfiprintf_r+0x1f4>)
 800b40e:	a904      	add	r1, sp, #16
 800b410:	4638      	mov	r0, r7
 800b412:	f7fe f8e9 	bl	80095e8 <_printf_i>
 800b416:	e7eb      	b.n	800b3f0 <_svfiprintf_r+0x1c0>
 800b418:	0800bfa4 	.word	0x0800bfa4
 800b41c:	0800bfae 	.word	0x0800bfae
 800b420:	080090a1 	.word	0x080090a1
 800b424:	0800b17d 	.word	0x0800b17d
 800b428:	0800bfaa 	.word	0x0800bfaa

0800b42c <__sflush_r>:
 800b42c:	898a      	ldrh	r2, [r1, #12]
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	4605      	mov	r5, r0
 800b434:	0710      	lsls	r0, r2, #28
 800b436:	460c      	mov	r4, r1
 800b438:	d458      	bmi.n	800b4ec <__sflush_r+0xc0>
 800b43a:	684b      	ldr	r3, [r1, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dc05      	bgt.n	800b44c <__sflush_r+0x20>
 800b440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b442:	2b00      	cmp	r3, #0
 800b444:	dc02      	bgt.n	800b44c <__sflush_r+0x20>
 800b446:	2000      	movs	r0, #0
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b44e:	2e00      	cmp	r6, #0
 800b450:	d0f9      	beq.n	800b446 <__sflush_r+0x1a>
 800b452:	2300      	movs	r3, #0
 800b454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b458:	682f      	ldr	r7, [r5, #0]
 800b45a:	6a21      	ldr	r1, [r4, #32]
 800b45c:	602b      	str	r3, [r5, #0]
 800b45e:	d032      	beq.n	800b4c6 <__sflush_r+0x9a>
 800b460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	075a      	lsls	r2, r3, #29
 800b466:	d505      	bpl.n	800b474 <__sflush_r+0x48>
 800b468:	6863      	ldr	r3, [r4, #4]
 800b46a:	1ac0      	subs	r0, r0, r3
 800b46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b46e:	b10b      	cbz	r3, 800b474 <__sflush_r+0x48>
 800b470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b472:	1ac0      	subs	r0, r0, r3
 800b474:	2300      	movs	r3, #0
 800b476:	4602      	mov	r2, r0
 800b478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b47a:	6a21      	ldr	r1, [r4, #32]
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b0      	blx	r6
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	d106      	bne.n	800b494 <__sflush_r+0x68>
 800b486:	6829      	ldr	r1, [r5, #0]
 800b488:	291d      	cmp	r1, #29
 800b48a:	d82b      	bhi.n	800b4e4 <__sflush_r+0xb8>
 800b48c:	4a29      	ldr	r2, [pc, #164]	; (800b534 <__sflush_r+0x108>)
 800b48e:	410a      	asrs	r2, r1
 800b490:	07d6      	lsls	r6, r2, #31
 800b492:	d427      	bmi.n	800b4e4 <__sflush_r+0xb8>
 800b494:	2200      	movs	r2, #0
 800b496:	6062      	str	r2, [r4, #4]
 800b498:	04d9      	lsls	r1, r3, #19
 800b49a:	6922      	ldr	r2, [r4, #16]
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	d504      	bpl.n	800b4aa <__sflush_r+0x7e>
 800b4a0:	1c42      	adds	r2, r0, #1
 800b4a2:	d101      	bne.n	800b4a8 <__sflush_r+0x7c>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b903      	cbnz	r3, 800b4aa <__sflush_r+0x7e>
 800b4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800b4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ac:	602f      	str	r7, [r5, #0]
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	d0c9      	beq.n	800b446 <__sflush_r+0x1a>
 800b4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4b6:	4299      	cmp	r1, r3
 800b4b8:	d002      	beq.n	800b4c0 <__sflush_r+0x94>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f7ff f9e2 	bl	800a884 <_free_r>
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800b4c4:	e7c0      	b.n	800b448 <__sflush_r+0x1c>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	47b0      	blx	r6
 800b4cc:	1c41      	adds	r1, r0, #1
 800b4ce:	d1c8      	bne.n	800b462 <__sflush_r+0x36>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0c5      	beq.n	800b462 <__sflush_r+0x36>
 800b4d6:	2b1d      	cmp	r3, #29
 800b4d8:	d001      	beq.n	800b4de <__sflush_r+0xb2>
 800b4da:	2b16      	cmp	r3, #22
 800b4dc:	d101      	bne.n	800b4e2 <__sflush_r+0xb6>
 800b4de:	602f      	str	r7, [r5, #0]
 800b4e0:	e7b1      	b.n	800b446 <__sflush_r+0x1a>
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	e7ad      	b.n	800b448 <__sflush_r+0x1c>
 800b4ec:	690f      	ldr	r7, [r1, #16]
 800b4ee:	2f00      	cmp	r7, #0
 800b4f0:	d0a9      	beq.n	800b446 <__sflush_r+0x1a>
 800b4f2:	0793      	lsls	r3, r2, #30
 800b4f4:	680e      	ldr	r6, [r1, #0]
 800b4f6:	bf08      	it	eq
 800b4f8:	694b      	ldreq	r3, [r1, #20]
 800b4fa:	600f      	str	r7, [r1, #0]
 800b4fc:	bf18      	it	ne
 800b4fe:	2300      	movne	r3, #0
 800b500:	eba6 0807 	sub.w	r8, r6, r7
 800b504:	608b      	str	r3, [r1, #8]
 800b506:	f1b8 0f00 	cmp.w	r8, #0
 800b50a:	dd9c      	ble.n	800b446 <__sflush_r+0x1a>
 800b50c:	6a21      	ldr	r1, [r4, #32]
 800b50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b510:	4643      	mov	r3, r8
 800b512:	463a      	mov	r2, r7
 800b514:	4628      	mov	r0, r5
 800b516:	47b0      	blx	r6
 800b518:	2800      	cmp	r0, #0
 800b51a:	dc06      	bgt.n	800b52a <__sflush_r+0xfe>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	e78e      	b.n	800b448 <__sflush_r+0x1c>
 800b52a:	4407      	add	r7, r0
 800b52c:	eba8 0800 	sub.w	r8, r8, r0
 800b530:	e7e9      	b.n	800b506 <__sflush_r+0xda>
 800b532:	bf00      	nop
 800b534:	dfbffffe 	.word	0xdfbffffe

0800b538 <_fflush_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	690b      	ldr	r3, [r1, #16]
 800b53c:	4605      	mov	r5, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	b913      	cbnz	r3, 800b548 <_fflush_r+0x10>
 800b542:	2500      	movs	r5, #0
 800b544:	4628      	mov	r0, r5
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	b118      	cbz	r0, 800b552 <_fflush_r+0x1a>
 800b54a:	6a03      	ldr	r3, [r0, #32]
 800b54c:	b90b      	cbnz	r3, 800b552 <_fflush_r+0x1a>
 800b54e:	f7fe f9e7 	bl	8009920 <__sinit>
 800b552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0f3      	beq.n	800b542 <_fflush_r+0xa>
 800b55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b55c:	07d0      	lsls	r0, r2, #31
 800b55e:	d404      	bmi.n	800b56a <_fflush_r+0x32>
 800b560:	0599      	lsls	r1, r3, #22
 800b562:	d402      	bmi.n	800b56a <_fflush_r+0x32>
 800b564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b566:	f7fe faf1 	bl	8009b4c <__retarget_lock_acquire_recursive>
 800b56a:	4628      	mov	r0, r5
 800b56c:	4621      	mov	r1, r4
 800b56e:	f7ff ff5d 	bl	800b42c <__sflush_r>
 800b572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b574:	07da      	lsls	r2, r3, #31
 800b576:	4605      	mov	r5, r0
 800b578:	d4e4      	bmi.n	800b544 <_fflush_r+0xc>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	059b      	lsls	r3, r3, #22
 800b57e:	d4e1      	bmi.n	800b544 <_fflush_r+0xc>
 800b580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b582:	f7fe fae4 	bl	8009b4e <__retarget_lock_release_recursive>
 800b586:	e7dd      	b.n	800b544 <_fflush_r+0xc>

0800b588 <fiprintf>:
 800b588:	b40e      	push	{r1, r2, r3}
 800b58a:	b503      	push	{r0, r1, lr}
 800b58c:	4601      	mov	r1, r0
 800b58e:	ab03      	add	r3, sp, #12
 800b590:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <fiprintf+0x20>)
 800b592:	f853 2b04 	ldr.w	r2, [r3], #4
 800b596:	6800      	ldr	r0, [r0, #0]
 800b598:	9301      	str	r3, [sp, #4]
 800b59a:	f000 f8d3 	bl	800b744 <_vfiprintf_r>
 800b59e:	b002      	add	sp, #8
 800b5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a4:	b003      	add	sp, #12
 800b5a6:	4770      	bx	lr
 800b5a8:	20000098 	.word	0x20000098

0800b5ac <memmove>:
 800b5ac:	4288      	cmp	r0, r1
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	eb01 0402 	add.w	r4, r1, r2
 800b5b4:	d902      	bls.n	800b5bc <memmove+0x10>
 800b5b6:	4284      	cmp	r4, r0
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	d807      	bhi.n	800b5cc <memmove+0x20>
 800b5bc:	1e43      	subs	r3, r0, #1
 800b5be:	42a1      	cmp	r1, r4
 800b5c0:	d008      	beq.n	800b5d4 <memmove+0x28>
 800b5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ca:	e7f8      	b.n	800b5be <memmove+0x12>
 800b5cc:	4402      	add	r2, r0
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	428a      	cmp	r2, r1
 800b5d2:	d100      	bne.n	800b5d6 <memmove+0x2a>
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5de:	e7f7      	b.n	800b5d0 <memmove+0x24>

0800b5e0 <_sbrk_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_sbrk_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f7 f8b4 	bl	8002758 <_sbrk>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_sbrk_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_sbrk_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	200007bc 	.word	0x200007bc

0800b600 <memcpy>:
 800b600:	440a      	add	r2, r1
 800b602:	4291      	cmp	r1, r2
 800b604:	f100 33ff 	add.w	r3, r0, #4294967295
 800b608:	d100      	bne.n	800b60c <memcpy+0xc>
 800b60a:	4770      	bx	lr
 800b60c:	b510      	push	{r4, lr}
 800b60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b616:	4291      	cmp	r1, r2
 800b618:	d1f9      	bne.n	800b60e <memcpy+0xe>
 800b61a:	bd10      	pop	{r4, pc}

0800b61c <abort>:
 800b61c:	b508      	push	{r3, lr}
 800b61e:	2006      	movs	r0, #6
 800b620:	f000 fa68 	bl	800baf4 <raise>
 800b624:	2001      	movs	r0, #1
 800b626:	f7f7 f81f 	bl	8002668 <_exit>

0800b62a <_calloc_r>:
 800b62a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b62c:	fba1 2402 	umull	r2, r4, r1, r2
 800b630:	b94c      	cbnz	r4, 800b646 <_calloc_r+0x1c>
 800b632:	4611      	mov	r1, r2
 800b634:	9201      	str	r2, [sp, #4]
 800b636:	f7ff f999 	bl	800a96c <_malloc_r>
 800b63a:	9a01      	ldr	r2, [sp, #4]
 800b63c:	4605      	mov	r5, r0
 800b63e:	b930      	cbnz	r0, 800b64e <_calloc_r+0x24>
 800b640:	4628      	mov	r0, r5
 800b642:	b003      	add	sp, #12
 800b644:	bd30      	pop	{r4, r5, pc}
 800b646:	220c      	movs	r2, #12
 800b648:	6002      	str	r2, [r0, #0]
 800b64a:	2500      	movs	r5, #0
 800b64c:	e7f8      	b.n	800b640 <_calloc_r+0x16>
 800b64e:	4621      	mov	r1, r4
 800b650:	f7fe f9ff 	bl	8009a52 <memset>
 800b654:	e7f4      	b.n	800b640 <_calloc_r+0x16>

0800b656 <__ascii_mbtowc>:
 800b656:	b082      	sub	sp, #8
 800b658:	b901      	cbnz	r1, 800b65c <__ascii_mbtowc+0x6>
 800b65a:	a901      	add	r1, sp, #4
 800b65c:	b142      	cbz	r2, 800b670 <__ascii_mbtowc+0x1a>
 800b65e:	b14b      	cbz	r3, 800b674 <__ascii_mbtowc+0x1e>
 800b660:	7813      	ldrb	r3, [r2, #0]
 800b662:	600b      	str	r3, [r1, #0]
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	1e10      	subs	r0, r2, #0
 800b668:	bf18      	it	ne
 800b66a:	2001      	movne	r0, #1
 800b66c:	b002      	add	sp, #8
 800b66e:	4770      	bx	lr
 800b670:	4610      	mov	r0, r2
 800b672:	e7fb      	b.n	800b66c <__ascii_mbtowc+0x16>
 800b674:	f06f 0001 	mvn.w	r0, #1
 800b678:	e7f8      	b.n	800b66c <__ascii_mbtowc+0x16>

0800b67a <_realloc_r>:
 800b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	4680      	mov	r8, r0
 800b680:	4614      	mov	r4, r2
 800b682:	460e      	mov	r6, r1
 800b684:	b921      	cbnz	r1, 800b690 <_realloc_r+0x16>
 800b686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68a:	4611      	mov	r1, r2
 800b68c:	f7ff b96e 	b.w	800a96c <_malloc_r>
 800b690:	b92a      	cbnz	r2, 800b69e <_realloc_r+0x24>
 800b692:	f7ff f8f7 	bl	800a884 <_free_r>
 800b696:	4625      	mov	r5, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69e:	f000 fa45 	bl	800bb2c <_malloc_usable_size_r>
 800b6a2:	4284      	cmp	r4, r0
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	d802      	bhi.n	800b6ae <_realloc_r+0x34>
 800b6a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6ac:	d812      	bhi.n	800b6d4 <_realloc_r+0x5a>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4640      	mov	r0, r8
 800b6b2:	f7ff f95b 	bl	800a96c <_malloc_r>
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d0ed      	beq.n	800b698 <_realloc_r+0x1e>
 800b6bc:	42bc      	cmp	r4, r7
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	bf28      	it	cs
 800b6c4:	463a      	movcs	r2, r7
 800b6c6:	f7ff ff9b 	bl	800b600 <memcpy>
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	f7ff f8d9 	bl	800a884 <_free_r>
 800b6d2:	e7e1      	b.n	800b698 <_realloc_r+0x1e>
 800b6d4:	4635      	mov	r5, r6
 800b6d6:	e7df      	b.n	800b698 <_realloc_r+0x1e>

0800b6d8 <__ascii_wctomb>:
 800b6d8:	b149      	cbz	r1, 800b6ee <__ascii_wctomb+0x16>
 800b6da:	2aff      	cmp	r2, #255	; 0xff
 800b6dc:	bf85      	ittet	hi
 800b6de:	238a      	movhi	r3, #138	; 0x8a
 800b6e0:	6003      	strhi	r3, [r0, #0]
 800b6e2:	700a      	strbls	r2, [r1, #0]
 800b6e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6e8:	bf98      	it	ls
 800b6ea:	2001      	movls	r0, #1
 800b6ec:	4770      	bx	lr
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4770      	bx	lr

0800b6f2 <__sfputc_r>:
 800b6f2:	6893      	ldr	r3, [r2, #8]
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	b410      	push	{r4}
 800b6fa:	6093      	str	r3, [r2, #8]
 800b6fc:	da08      	bge.n	800b710 <__sfputc_r+0x1e>
 800b6fe:	6994      	ldr	r4, [r2, #24]
 800b700:	42a3      	cmp	r3, r4
 800b702:	db01      	blt.n	800b708 <__sfputc_r+0x16>
 800b704:	290a      	cmp	r1, #10
 800b706:	d103      	bne.n	800b710 <__sfputc_r+0x1e>
 800b708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b70c:	f000 b934 	b.w	800b978 <__swbuf_r>
 800b710:	6813      	ldr	r3, [r2, #0]
 800b712:	1c58      	adds	r0, r3, #1
 800b714:	6010      	str	r0, [r2, #0]
 800b716:	7019      	strb	r1, [r3, #0]
 800b718:	4608      	mov	r0, r1
 800b71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <__sfputs_r>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	4614      	mov	r4, r2
 800b728:	18d5      	adds	r5, r2, r3
 800b72a:	42ac      	cmp	r4, r5
 800b72c:	d101      	bne.n	800b732 <__sfputs_r+0x12>
 800b72e:	2000      	movs	r0, #0
 800b730:	e007      	b.n	800b742 <__sfputs_r+0x22>
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	463a      	mov	r2, r7
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff ffda 	bl	800b6f2 <__sfputc_r>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d1f3      	bne.n	800b72a <__sfputs_r+0xa>
 800b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b744 <_vfiprintf_r>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	460d      	mov	r5, r1
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	4614      	mov	r4, r2
 800b74e:	4698      	mov	r8, r3
 800b750:	4606      	mov	r6, r0
 800b752:	b118      	cbz	r0, 800b75c <_vfiprintf_r+0x18>
 800b754:	6a03      	ldr	r3, [r0, #32]
 800b756:	b90b      	cbnz	r3, 800b75c <_vfiprintf_r+0x18>
 800b758:	f7fe f8e2 	bl	8009920 <__sinit>
 800b75c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b75e:	07d9      	lsls	r1, r3, #31
 800b760:	d405      	bmi.n	800b76e <_vfiprintf_r+0x2a>
 800b762:	89ab      	ldrh	r3, [r5, #12]
 800b764:	059a      	lsls	r2, r3, #22
 800b766:	d402      	bmi.n	800b76e <_vfiprintf_r+0x2a>
 800b768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b76a:	f7fe f9ef 	bl	8009b4c <__retarget_lock_acquire_recursive>
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	071b      	lsls	r3, r3, #28
 800b772:	d501      	bpl.n	800b778 <_vfiprintf_r+0x34>
 800b774:	692b      	ldr	r3, [r5, #16]
 800b776:	b99b      	cbnz	r3, 800b7a0 <_vfiprintf_r+0x5c>
 800b778:	4629      	mov	r1, r5
 800b77a:	4630      	mov	r0, r6
 800b77c:	f000 f93a 	bl	800b9f4 <__swsetup_r>
 800b780:	b170      	cbz	r0, 800b7a0 <_vfiprintf_r+0x5c>
 800b782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b784:	07dc      	lsls	r4, r3, #31
 800b786:	d504      	bpl.n	800b792 <_vfiprintf_r+0x4e>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	b01d      	add	sp, #116	; 0x74
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	89ab      	ldrh	r3, [r5, #12]
 800b794:	0598      	lsls	r0, r3, #22
 800b796:	d4f7      	bmi.n	800b788 <_vfiprintf_r+0x44>
 800b798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b79a:	f7fe f9d8 	bl	8009b4e <__retarget_lock_release_recursive>
 800b79e:	e7f3      	b.n	800b788 <_vfiprintf_r+0x44>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	2320      	movs	r3, #32
 800b7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ae:	2330      	movs	r3, #48	; 0x30
 800b7b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b964 <_vfiprintf_r+0x220>
 800b7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b8:	f04f 0901 	mov.w	r9, #1
 800b7bc:	4623      	mov	r3, r4
 800b7be:	469a      	mov	sl, r3
 800b7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c4:	b10a      	cbz	r2, 800b7ca <_vfiprintf_r+0x86>
 800b7c6:	2a25      	cmp	r2, #37	; 0x25
 800b7c8:	d1f9      	bne.n	800b7be <_vfiprintf_r+0x7a>
 800b7ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ce:	d00b      	beq.n	800b7e8 <_vfiprintf_r+0xa4>
 800b7d0:	465b      	mov	r3, fp
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f7ff ffa2 	bl	800b720 <__sfputs_r>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	f000 80a9 	beq.w	800b934 <_vfiprintf_r+0x1f0>
 800b7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e4:	445a      	add	r2, fp
 800b7e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 80a1 	beq.w	800b934 <_vfiprintf_r+0x1f0>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fc:	f10a 0a01 	add.w	sl, sl, #1
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	9307      	str	r3, [sp, #28]
 800b804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b808:	931a      	str	r3, [sp, #104]	; 0x68
 800b80a:	4654      	mov	r4, sl
 800b80c:	2205      	movs	r2, #5
 800b80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b812:	4854      	ldr	r0, [pc, #336]	; (800b964 <_vfiprintf_r+0x220>)
 800b814:	f7f4 fd04 	bl	8000220 <memchr>
 800b818:	9a04      	ldr	r2, [sp, #16]
 800b81a:	b9d8      	cbnz	r0, 800b854 <_vfiprintf_r+0x110>
 800b81c:	06d1      	lsls	r1, r2, #27
 800b81e:	bf44      	itt	mi
 800b820:	2320      	movmi	r3, #32
 800b822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b826:	0713      	lsls	r3, r2, #28
 800b828:	bf44      	itt	mi
 800b82a:	232b      	movmi	r3, #43	; 0x2b
 800b82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b830:	f89a 3000 	ldrb.w	r3, [sl]
 800b834:	2b2a      	cmp	r3, #42	; 0x2a
 800b836:	d015      	beq.n	800b864 <_vfiprintf_r+0x120>
 800b838:	9a07      	ldr	r2, [sp, #28]
 800b83a:	4654      	mov	r4, sl
 800b83c:	2000      	movs	r0, #0
 800b83e:	f04f 0c0a 	mov.w	ip, #10
 800b842:	4621      	mov	r1, r4
 800b844:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b848:	3b30      	subs	r3, #48	; 0x30
 800b84a:	2b09      	cmp	r3, #9
 800b84c:	d94d      	bls.n	800b8ea <_vfiprintf_r+0x1a6>
 800b84e:	b1b0      	cbz	r0, 800b87e <_vfiprintf_r+0x13a>
 800b850:	9207      	str	r2, [sp, #28]
 800b852:	e014      	b.n	800b87e <_vfiprintf_r+0x13a>
 800b854:	eba0 0308 	sub.w	r3, r0, r8
 800b858:	fa09 f303 	lsl.w	r3, r9, r3
 800b85c:	4313      	orrs	r3, r2
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	46a2      	mov	sl, r4
 800b862:	e7d2      	b.n	800b80a <_vfiprintf_r+0xc6>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	1d19      	adds	r1, r3, #4
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	9103      	str	r1, [sp, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bfbb      	ittet	lt
 800b870:	425b      	neglt	r3, r3
 800b872:	f042 0202 	orrlt.w	r2, r2, #2
 800b876:	9307      	strge	r3, [sp, #28]
 800b878:	9307      	strlt	r3, [sp, #28]
 800b87a:	bfb8      	it	lt
 800b87c:	9204      	strlt	r2, [sp, #16]
 800b87e:	7823      	ldrb	r3, [r4, #0]
 800b880:	2b2e      	cmp	r3, #46	; 0x2e
 800b882:	d10c      	bne.n	800b89e <_vfiprintf_r+0x15a>
 800b884:	7863      	ldrb	r3, [r4, #1]
 800b886:	2b2a      	cmp	r3, #42	; 0x2a
 800b888:	d134      	bne.n	800b8f4 <_vfiprintf_r+0x1b0>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	1d1a      	adds	r2, r3, #4
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	9203      	str	r2, [sp, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfb8      	it	lt
 800b896:	f04f 33ff 	movlt.w	r3, #4294967295
 800b89a:	3402      	adds	r4, #2
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b974 <_vfiprintf_r+0x230>
 800b8a2:	7821      	ldrb	r1, [r4, #0]
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	f7f4 fcba 	bl	8000220 <memchr>
 800b8ac:	b138      	cbz	r0, 800b8be <_vfiprintf_r+0x17a>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	eba0 000a 	sub.w	r0, r0, sl
 800b8b4:	2240      	movs	r2, #64	; 0x40
 800b8b6:	4082      	lsls	r2, r0
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c2:	4829      	ldr	r0, [pc, #164]	; (800b968 <_vfiprintf_r+0x224>)
 800b8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c8:	2206      	movs	r2, #6
 800b8ca:	f7f4 fca9 	bl	8000220 <memchr>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d03f      	beq.n	800b952 <_vfiprintf_r+0x20e>
 800b8d2:	4b26      	ldr	r3, [pc, #152]	; (800b96c <_vfiprintf_r+0x228>)
 800b8d4:	bb1b      	cbnz	r3, 800b91e <_vfiprintf_r+0x1da>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	3307      	adds	r3, #7
 800b8da:	f023 0307 	bic.w	r3, r3, #7
 800b8de:	3308      	adds	r3, #8
 800b8e0:	9303      	str	r3, [sp, #12]
 800b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e4:	443b      	add	r3, r7
 800b8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e8:	e768      	b.n	800b7bc <_vfiprintf_r+0x78>
 800b8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	2001      	movs	r0, #1
 800b8f2:	e7a6      	b.n	800b842 <_vfiprintf_r+0xfe>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	3401      	adds	r4, #1
 800b8f8:	9305      	str	r3, [sp, #20]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f04f 0c0a 	mov.w	ip, #10
 800b900:	4620      	mov	r0, r4
 800b902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b906:	3a30      	subs	r2, #48	; 0x30
 800b908:	2a09      	cmp	r2, #9
 800b90a:	d903      	bls.n	800b914 <_vfiprintf_r+0x1d0>
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0c6      	beq.n	800b89e <_vfiprintf_r+0x15a>
 800b910:	9105      	str	r1, [sp, #20]
 800b912:	e7c4      	b.n	800b89e <_vfiprintf_r+0x15a>
 800b914:	fb0c 2101 	mla	r1, ip, r1, r2
 800b918:	4604      	mov	r4, r0
 800b91a:	2301      	movs	r3, #1
 800b91c:	e7f0      	b.n	800b900 <_vfiprintf_r+0x1bc>
 800b91e:	ab03      	add	r3, sp, #12
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	462a      	mov	r2, r5
 800b924:	4b12      	ldr	r3, [pc, #72]	; (800b970 <_vfiprintf_r+0x22c>)
 800b926:	a904      	add	r1, sp, #16
 800b928:	4630      	mov	r0, r6
 800b92a:	f7fd fbb9 	bl	80090a0 <_printf_float>
 800b92e:	4607      	mov	r7, r0
 800b930:	1c78      	adds	r0, r7, #1
 800b932:	d1d6      	bne.n	800b8e2 <_vfiprintf_r+0x19e>
 800b934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b936:	07d9      	lsls	r1, r3, #31
 800b938:	d405      	bmi.n	800b946 <_vfiprintf_r+0x202>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	059a      	lsls	r2, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_vfiprintf_r+0x202>
 800b940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b942:	f7fe f904 	bl	8009b4e <__retarget_lock_release_recursive>
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	065b      	lsls	r3, r3, #25
 800b94a:	f53f af1d 	bmi.w	800b788 <_vfiprintf_r+0x44>
 800b94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b950:	e71c      	b.n	800b78c <_vfiprintf_r+0x48>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <_vfiprintf_r+0x22c>)
 800b95a:	a904      	add	r1, sp, #16
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7fd fe43 	bl	80095e8 <_printf_i>
 800b962:	e7e4      	b.n	800b92e <_vfiprintf_r+0x1ea>
 800b964:	0800bfa4 	.word	0x0800bfa4
 800b968:	0800bfae 	.word	0x0800bfae
 800b96c:	080090a1 	.word	0x080090a1
 800b970:	0800b721 	.word	0x0800b721
 800b974:	0800bfaa 	.word	0x0800bfaa

0800b978 <__swbuf_r>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	460e      	mov	r6, r1
 800b97c:	4614      	mov	r4, r2
 800b97e:	4605      	mov	r5, r0
 800b980:	b118      	cbz	r0, 800b98a <__swbuf_r+0x12>
 800b982:	6a03      	ldr	r3, [r0, #32]
 800b984:	b90b      	cbnz	r3, 800b98a <__swbuf_r+0x12>
 800b986:	f7fd ffcb 	bl	8009920 <__sinit>
 800b98a:	69a3      	ldr	r3, [r4, #24]
 800b98c:	60a3      	str	r3, [r4, #8]
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	071a      	lsls	r2, r3, #28
 800b992:	d525      	bpl.n	800b9e0 <__swbuf_r+0x68>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	b31b      	cbz	r3, 800b9e0 <__swbuf_r+0x68>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	6922      	ldr	r2, [r4, #16]
 800b99c:	1a98      	subs	r0, r3, r2
 800b99e:	6963      	ldr	r3, [r4, #20]
 800b9a0:	b2f6      	uxtb	r6, r6
 800b9a2:	4283      	cmp	r3, r0
 800b9a4:	4637      	mov	r7, r6
 800b9a6:	dc04      	bgt.n	800b9b2 <__swbuf_r+0x3a>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7ff fdc4 	bl	800b538 <_fflush_r>
 800b9b0:	b9e0      	cbnz	r0, 800b9ec <__swbuf_r+0x74>
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	60a3      	str	r3, [r4, #8]
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	6022      	str	r2, [r4, #0]
 800b9be:	701e      	strb	r6, [r3, #0]
 800b9c0:	6962      	ldr	r2, [r4, #20]
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d004      	beq.n	800b9d2 <__swbuf_r+0x5a>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	07db      	lsls	r3, r3, #31
 800b9cc:	d506      	bpl.n	800b9dc <__swbuf_r+0x64>
 800b9ce:	2e0a      	cmp	r6, #10
 800b9d0:	d104      	bne.n	800b9dc <__swbuf_r+0x64>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f7ff fdaf 	bl	800b538 <_fflush_r>
 800b9da:	b938      	cbnz	r0, 800b9ec <__swbuf_r+0x74>
 800b9dc:	4638      	mov	r0, r7
 800b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 f806 	bl	800b9f4 <__swsetup_r>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d0d5      	beq.n	800b998 <__swbuf_r+0x20>
 800b9ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b9f0:	e7f4      	b.n	800b9dc <__swbuf_r+0x64>
	...

0800b9f4 <__swsetup_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4b2a      	ldr	r3, [pc, #168]	; (800baa0 <__swsetup_r+0xac>)
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	b118      	cbz	r0, 800ba08 <__swsetup_r+0x14>
 800ba00:	6a03      	ldr	r3, [r0, #32]
 800ba02:	b90b      	cbnz	r3, 800ba08 <__swsetup_r+0x14>
 800ba04:	f7fd ff8c 	bl	8009920 <__sinit>
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba0e:	0718      	lsls	r0, r3, #28
 800ba10:	d422      	bmi.n	800ba58 <__swsetup_r+0x64>
 800ba12:	06d9      	lsls	r1, r3, #27
 800ba14:	d407      	bmi.n	800ba26 <__swsetup_r+0x32>
 800ba16:	2309      	movs	r3, #9
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	e034      	b.n	800ba90 <__swsetup_r+0x9c>
 800ba26:	0758      	lsls	r0, r3, #29
 800ba28:	d512      	bpl.n	800ba50 <__swsetup_r+0x5c>
 800ba2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba2c:	b141      	cbz	r1, 800ba40 <__swsetup_r+0x4c>
 800ba2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba32:	4299      	cmp	r1, r3
 800ba34:	d002      	beq.n	800ba3c <__swsetup_r+0x48>
 800ba36:	4628      	mov	r0, r5
 800ba38:	f7fe ff24 	bl	800a884 <_free_r>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	6363      	str	r3, [r4, #52]	; 0x34
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6063      	str	r3, [r4, #4]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f043 0308 	orr.w	r3, r3, #8
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	b94b      	cbnz	r3, 800ba70 <__swsetup_r+0x7c>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba66:	d003      	beq.n	800ba70 <__swsetup_r+0x7c>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 f88c 	bl	800bb88 <__smakebuf_r>
 800ba70:	89a0      	ldrh	r0, [r4, #12]
 800ba72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba76:	f010 0301 	ands.w	r3, r0, #1
 800ba7a:	d00a      	beq.n	800ba92 <__swsetup_r+0x9e>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60a3      	str	r3, [r4, #8]
 800ba80:	6963      	ldr	r3, [r4, #20]
 800ba82:	425b      	negs	r3, r3
 800ba84:	61a3      	str	r3, [r4, #24]
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	b943      	cbnz	r3, 800ba9c <__swsetup_r+0xa8>
 800ba8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba8e:	d1c4      	bne.n	800ba1a <__swsetup_r+0x26>
 800ba90:	bd38      	pop	{r3, r4, r5, pc}
 800ba92:	0781      	lsls	r1, r0, #30
 800ba94:	bf58      	it	pl
 800ba96:	6963      	ldrpl	r3, [r4, #20]
 800ba98:	60a3      	str	r3, [r4, #8]
 800ba9a:	e7f4      	b.n	800ba86 <__swsetup_r+0x92>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e7f7      	b.n	800ba90 <__swsetup_r+0x9c>
 800baa0:	20000098 	.word	0x20000098

0800baa4 <_raise_r>:
 800baa4:	291f      	cmp	r1, #31
 800baa6:	b538      	push	{r3, r4, r5, lr}
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	d904      	bls.n	800bab8 <_raise_r+0x14>
 800baae:	2316      	movs	r3, #22
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800baba:	b112      	cbz	r2, 800bac2 <_raise_r+0x1e>
 800babc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bac0:	b94b      	cbnz	r3, 800bad6 <_raise_r+0x32>
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 f830 	bl	800bb28 <_getpid_r>
 800bac8:	462a      	mov	r2, r5
 800baca:	4601      	mov	r1, r0
 800bacc:	4620      	mov	r0, r4
 800bace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad2:	f000 b817 	b.w	800bb04 <_kill_r>
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d00a      	beq.n	800baf0 <_raise_r+0x4c>
 800bada:	1c59      	adds	r1, r3, #1
 800badc:	d103      	bne.n	800bae6 <_raise_r+0x42>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	2001      	movs	r0, #1
 800bae4:	e7e7      	b.n	800bab6 <_raise_r+0x12>
 800bae6:	2400      	movs	r4, #0
 800bae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baec:	4628      	mov	r0, r5
 800baee:	4798      	blx	r3
 800baf0:	2000      	movs	r0, #0
 800baf2:	e7e0      	b.n	800bab6 <_raise_r+0x12>

0800baf4 <raise>:
 800baf4:	4b02      	ldr	r3, [pc, #8]	; (800bb00 <raise+0xc>)
 800baf6:	4601      	mov	r1, r0
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	f7ff bfd3 	b.w	800baa4 <_raise_r>
 800bafe:	bf00      	nop
 800bb00:	20000098 	.word	0x20000098

0800bb04 <_kill_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d07      	ldr	r5, [pc, #28]	; (800bb24 <_kill_r+0x20>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	f7f6 fd99 	bl	8002648 <_kill>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	d102      	bne.n	800bb20 <_kill_r+0x1c>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	b103      	cbz	r3, 800bb20 <_kill_r+0x1c>
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	bd38      	pop	{r3, r4, r5, pc}
 800bb22:	bf00      	nop
 800bb24:	200007bc 	.word	0x200007bc

0800bb28 <_getpid_r>:
 800bb28:	f7f6 bd86 	b.w	8002638 <_getpid>

0800bb2c <_malloc_usable_size_r>:
 800bb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb30:	1f18      	subs	r0, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbc      	itt	lt
 800bb36:	580b      	ldrlt	r3, [r1, r0]
 800bb38:	18c0      	addlt	r0, r0, r3
 800bb3a:	4770      	bx	lr

0800bb3c <__swhatbuf_r>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb44:	2900      	cmp	r1, #0
 800bb46:	b096      	sub	sp, #88	; 0x58
 800bb48:	4615      	mov	r5, r2
 800bb4a:	461e      	mov	r6, r3
 800bb4c:	da0d      	bge.n	800bb6a <__swhatbuf_r+0x2e>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	bf0c      	ite	eq
 800bb5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb5e:	2340      	movne	r3, #64	; 0x40
 800bb60:	2000      	movs	r0, #0
 800bb62:	6031      	str	r1, [r6, #0]
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	b016      	add	sp, #88	; 0x58
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f000 f848 	bl	800bc00 <_fstat_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dbec      	blt.n	800bb4e <__swhatbuf_r+0x12>
 800bb74:	9901      	ldr	r1, [sp, #4]
 800bb76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb7e:	4259      	negs	r1, r3
 800bb80:	4159      	adcs	r1, r3
 800bb82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb86:	e7eb      	b.n	800bb60 <__swhatbuf_r+0x24>

0800bb88 <__smakebuf_r>:
 800bb88:	898b      	ldrh	r3, [r1, #12]
 800bb8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb8c:	079d      	lsls	r5, r3, #30
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	d507      	bpl.n	800bba4 <__smakebuf_r+0x1c>
 800bb94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	6163      	str	r3, [r4, #20]
 800bba0:	b002      	add	sp, #8
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	ab01      	add	r3, sp, #4
 800bba6:	466a      	mov	r2, sp
 800bba8:	f7ff ffc8 	bl	800bb3c <__swhatbuf_r>
 800bbac:	9900      	ldr	r1, [sp, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7fe fedb 	bl	800a96c <_malloc_r>
 800bbb6:	b948      	cbnz	r0, 800bbcc <__smakebuf_r+0x44>
 800bbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbc:	059a      	lsls	r2, r3, #22
 800bbbe:	d4ef      	bmi.n	800bba0 <__smakebuf_r+0x18>
 800bbc0:	f023 0303 	bic.w	r3, r3, #3
 800bbc4:	f043 0302 	orr.w	r3, r3, #2
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7e3      	b.n	800bb94 <__smakebuf_r+0xc>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	6020      	str	r0, [r4, #0]
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	6163      	str	r3, [r4, #20]
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	6120      	str	r0, [r4, #16]
 800bbde:	b15b      	cbz	r3, 800bbf8 <__smakebuf_r+0x70>
 800bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f81d 	bl	800bc24 <_isatty_r>
 800bbea:	b128      	cbz	r0, 800bbf8 <__smakebuf_r+0x70>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	431d      	orrs	r5, r3
 800bbfc:	81a5      	strh	r5, [r4, #12]
 800bbfe:	e7cf      	b.n	800bba0 <__smakebuf_r+0x18>

0800bc00 <_fstat_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	; (800bc20 <_fstat_r+0x20>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f6 fd7a 	bl	8002706 <_fstat>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_fstat_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_fstat_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	200007bc 	.word	0x200007bc

0800bc24 <_isatty_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	; (800bc40 <_isatty_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f6 fd79 	bl	8002726 <_isatty>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_isatty_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_isatty_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	200007bc 	.word	0x200007bc

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
