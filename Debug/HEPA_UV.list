
HEPA_UV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800ad78  0800ad78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1e4  0800b1e4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1e4  0800b1e4  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1ec  0800b1ec  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ec  0800b1ec  0001b1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000208  0800b3fc  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800b3fc  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cf5  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a2  00000000  00000000  00041f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  000453d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a60  00000000  00000000  00046f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070a8  00000000  00000000  000489d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f7dc  00000000  00000000  0004fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f25b1  00000000  00000000  0006f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016180d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b30  00000000  00000000  00161860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad60 	.word	0x0800ad60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800ad60 	.word	0x0800ad60

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <can_listen>:
			}
	HAL_Delay(500);
}

void can_listen()
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af06      	add	r7, sp, #24
	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	4825      	ldr	r0, [pc, #148]	; (8000f9c <can_listen+0xa0>)
 8000f06:	f003 f833 	bl	8003f70 <HAL_FDCAN_GetRxFifoFillLevel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d041      	beq.n	8000f94 <can_listen+0x98>
	{
		HAL_UART_Transmit(&hlpuart1, "Received:", 9, HAL_MAX_DELAY);
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	2209      	movs	r2, #9
 8000f16:	4922      	ldr	r1, [pc, #136]	; (8000fa0 <can_listen+0xa4>)
 8000f18:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <can_listen+0xa8>)
 8000f1a:	f006 f9c3 	bl	80072a4 <HAL_UART_Transmit>
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <can_listen+0xac>)
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <can_listen+0xb0>)
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <can_listen+0xa0>)
 8000f26:	f002 ff49 	bl	8003dbc <HAL_FDCAN_GetRxMessage>
		//HAL_Delay(500);
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <can_listen+0xac>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461e      	mov	r6, r3
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <can_listen+0xac>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	469c      	mov	ip, r3
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <can_listen+0xac>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <can_listen+0xac>)
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <can_listen+0xac>)
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <can_listen+0xac>)
 8000f4a:	795b      	ldrb	r3, [r3, #5]
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <can_listen+0xac>)
 8000f50:	799b      	ldrb	r3, [r3, #6]
 8000f52:	461d      	mov	r5, r3
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <can_listen+0xac>)
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	9305      	str	r3, [sp, #20]
 8000f5a:	9504      	str	r5, [sp, #16]
 8000f5c:	9403      	str	r4, [sp, #12]
 8000f5e:	9002      	str	r0, [sp, #8]
 8000f60:	9101      	str	r1, [sp, #4]
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	4663      	mov	r3, ip
 8000f66:	4632      	mov	r2, r6
 8000f68:	4911      	ldr	r1, [pc, #68]	; (8000fb0 <can_listen+0xb4>)
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <can_listen+0xb8>)
 8000f6c:	f007 fc80 	bl	8008870 <siprintf>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)debug_str), HAL_MAX_DELAY);
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <can_listen+0xb8>)
 8000f72:	f7ff f955 	bl	8000220 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <can_listen+0xb8>)
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <can_listen+0xa8>)
 8000f82:	f006 f98f 	bl	80072a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, NL, sizeof(NL), HAL_MAX_DELAY);
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	2226      	movs	r2, #38	; 0x26
 8000f8c:	490a      	ldr	r1, [pc, #40]	; (8000fb8 <can_listen+0xbc>)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <can_listen+0xa8>)
 8000f90:	f006 f988 	bl	80072a4 <HAL_UART_Transmit>
	}
}
 8000f94:	bf00      	nop
 8000f96:	3704      	adds	r7, #4
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9c:	200002fc 	.word	0x200002fc
 8000fa0:	0800ad78 	.word	0x0800ad78
 8000fa4:	200003f8 	.word	0x200003f8
 8000fa8:	200005a4 	.word	0x200005a4
 8000fac:	200005ac 	.word	0x200005ac
 8000fb0:	0800ad84 	.word	0x0800ad84
 8000fb4:	20000584 	.word	0x20000584
 8000fb8:	20000000 	.word	0x20000000

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f001 f9fa 	bl	80023ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f8ab 	bl	8001120 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 fcf1 	bl	80019b0 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8000fce:	f000 f9ff 	bl	80013d0 <_ZL14MX_FDCAN1_Initv>
  MX_I2C2_Init();
 8000fd2:	f000 fa93 	bl	80014fc <_ZL12MX_I2C2_Initv>
  MX_LPUART1_UART_Init();
 8000fd6:	f000 fb2d 	bl	8001634 <_ZL20MX_LPUART1_UART_Initv>
  MX_TIM2_Init();
 8000fda:	f000 fbcb 	bl	8001774 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000fde:	f000 fc53 	bl	8001888 <_ZL12MX_TIM3_Initv>
  MX_ADC1_Init();
 8000fe2:	f000 f8f1 	bl	80011c8 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000fe6:	f000 f97d 	bl	80012e4 <_ZL12MX_ADC2_Initv>
  MX_I2C3_Init();
 8000fea:	f000 fad5 	bl	8001598 <_ZL12MX_I2C3_Initv>
  MX_SPI2_Init();
 8000fee:	f000 fb7f 	bl	80016f0 <_ZL12MX_SPI2_Initv>
//	  	HAL_GPIO_TogglePin(LED_DRIVE_GPIO_Port, LED_DRIVE_Pin);
//	  	HAL_Delay(100);

	  /* CAN FD Test */
	  //test_can_bus();
	  uint8_t msg[4] = { 0x1, 0x2, 0x3, 0x4 };
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <main+0x154>)
 8000ff4:	607b      	str	r3, [r7, #4]
	  //send_msg(msg, 4);
	  can_listen();
 8000ff6:	f7ff ff81 	bl	8000efc <can_listen>



	  if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	4845      	ldr	r0, [pc, #276]	; (8001114 <main+0x158>)
 8000ffe:	f003 f9b9 	bl	8004374 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00e      	beq.n	8001030 <main+0x74>
	  {
		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f003 f9c3 	bl	80043a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	483c      	ldr	r0, [pc, #240]	; (8001114 <main+0x158>)
 8001024:	f003 f9be 	bl	80043a4 <HAL_GPIO_WritePin>
		  ready = 1;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <main+0x15c>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e01e      	b.n	800106e <main+0xb2>
	  }
	  else if (HAL_GPIO_ReadPin(POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	4837      	ldr	r0, [pc, #220]	; (8001114 <main+0x158>)
 8001036:	f003 f99d 	bl	8004374 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00e      	beq.n	8001068 <main+0xac>
	  	  {
	  		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2110      	movs	r1, #16
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f003 f9a7 	bl	80043a4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	482e      	ldr	r0, [pc, #184]	; (8001114 <main+0x158>)
 800105c:	f003 f9a2 	bl	80043a4 <HAL_GPIO_WritePin>
	  		  ready = 1;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <main+0x15c>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e002      	b.n	800106e <main+0xb2>
	  	  }
	  else ready = 0;
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <main+0x15c>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

	  /* Test UV ON/OFF Pin */
	  if (ready == 0)
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <main+0x15c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d12c      	bne.n	80010d0 <main+0x114>
	  {
		  if (!HAL_GPIO_ReadPin(UV_NO_GPIO_Port, UV_NO_Pin))
 8001076:	2104      	movs	r1, #4
 8001078:	4826      	ldr	r0, [pc, #152]	; (8001114 <main+0x158>)
 800107a:	f003 f97b 	bl	8004374 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d020      	beq.n	80010d0 <main+0x114>
	    {
	  	  HAL_GPIO_TogglePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin);
 800108e:	2110      	movs	r1, #16
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f003 f99e 	bl	80043d4 <HAL_GPIO_TogglePin>
	  	  if(!HAL_GPIO_ReadPin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin))
 8001098:	2110      	movs	r1, #16
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f003 f969 	bl	8004374 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <main+0x102>
	  	  {
	  		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <main+0x158>)
 80010b8:	f003 f974 	bl	80043a4 <HAL_GPIO_WritePin>
 80010bc:	e004      	b.n	80010c8 <main+0x10c>
	  	  }
	  	  else HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	4814      	ldr	r0, [pc, #80]	; (8001114 <main+0x158>)
 80010c4:	f003 f96e 	bl	80043a4 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 80010c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010cc:	f001 f9e6 	bl	800249c <HAL_Delay>
	    }
	  }

	  /* Test HEPA ON/OFF Pin */
		if (!HAL_GPIO_ReadPin(HEPA_NO_GPIO_Port, HEPA_NO_Pin))
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4811      	ldr	r0, [pc, #68]	; (800111c <main+0x160>)
 80010d6:	f003 f94d 	bl	8004374 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00d      	beq.n	8001106 <main+0x14a>
		{
		  HAL_GPIO_TogglePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin);
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f003 f970 	bl	80043d4 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(HEPA_B_CTRL_GPIO_Port, HEPA_B_CTRL_Pin);
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <main+0x160>)
 80010fa:	f003 f96b 	bl	80043d4 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f001 f9cb 	bl	800249c <HAL_Delay>
		}
	   HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f001 f9c8 	bl	800249c <HAL_Delay>
//	    HEPALEDTest();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800110c:	e771      	b.n	8000ff2 <main+0x36>
 800110e:	bf00      	nop
 8001110:	04030201 	.word	0x04030201
 8001114:	48000800 	.word	0x48000800
 8001118:	20000028 	.word	0x20000028
 800111c:	48000400 	.word	0x48000400

08001120 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	2238      	movs	r2, #56	; 0x38
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f006 ff2c 	bl	8007f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001142:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001146:	f003 fa85 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001158:	2303      	movs	r3, #3
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800115c:	2301      	movs	r3, #1
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001160:	2308      	movs	r3, #8
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fb21 	bl	80047bc <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf14      	ite	ne
 8001180:	2301      	movne	r3, #1
 8001182:	2300      	moveq	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <_Z18SystemClock_Configv+0x6e>
  {
    Error_Handler();
 800118a:	f000 fcd5 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
 8001190:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	2303      	movs	r3, #3
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fe20 	bl	8004dec <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80011bc:	f000 fcbc 	bl	8001b38 <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fed3 	bl	8007f8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80011e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80011f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001210:	2204      	movs	r2, #4
 8001212:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001216:	2200      	movs	r2, #0
 8001218:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 800121c:	2200      	movs	r2, #0
 800121e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001222:	2201      	movs	r2, #1
 8001224:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001230:	2200      	movs	r2, #0
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001252:	f001 fb45 	bl	80028e0 <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001266:	f000 fc67 	bl	8001b38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 8001276:	f002 fa27 	bl	80036c8 <HAL_ADCEx_MultiModeConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800128a:	f000 fc55 	bl	8001b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <_ZL12MX_ADC1_Initv+0x118>)
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	2306      	movs	r3, #6
 8001294:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001296:	2302      	movs	r3, #2
 8001298:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129a:	237f      	movs	r3, #127	; 0x7f
 800129c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129e:	2304      	movs	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80012ac:	f001 fccc 	bl	8002c48 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80012c0:	f000 fc3a 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012c4:	217f      	movs	r1, #127	; 0x7f
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <_ZL12MX_ADC1_Initv+0x114>)
 80012c8:	f002 f99c 	bl	8003604 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f001 f8e5 	bl	800249c <HAL_Delay>

  /* USER CODE END ADC1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000224 	.word	0x20000224
 80012e0:	19200040 	.word	0x19200040

080012e4 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fe4b 	bl	8007f8c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 80012f8:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <_ZL12MX_ADC2_Initv+0xe4>)
 80012fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 80012fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001302:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 800131e:	2204      	movs	r2, #4
 8001320:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001324:	2200      	movs	r2, #0
 8001326:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 800132a:	2200      	movs	r2, #0
 800132c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001330:	2201      	movs	r2, #1
 8001332:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001352:	2200      	movs	r2, #0
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800135e:	4819      	ldr	r0, [pc, #100]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001360:	f001 fabe 	bl	80028e0 <HAL_ADC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8001374:	f000 fbe0 	bl	8001b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <_ZL12MX_ADC2_Initv+0xe8>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2306      	movs	r3, #6
 800137e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001384:	237f      	movs	r3, #127	; 0x7f
 8001386:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 8001396:	f001 fc57 	bl	8002c48 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80013aa:	f000 fbc5 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80013ae:	217f      	movs	r1, #127	; 0x7f
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <_ZL12MX_ADC2_Initv+0xe0>)
 80013b2:	f002 f927 	bl	8003604 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f001 f870 	bl	800249c <HAL_Delay>

  /* USER CODE END ADC2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000290 	.word	0x20000290
 80013c8:	50000100 	.word	0x50000100
 80013cc:	1d500080 	.word	0x1d500080

080013d0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	//Change TxHeader.Identifier, RxHeader.Identifier
	/* AUX1 ID */
	TxHeader.Identifier = 0x23; //0x555;
 80013d6:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013d8:	2223      	movs	r2, #35	; 0x23
 80013da:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//TxHeader.Identifier = 0xFAAA;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013f0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001404:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001406:	4b39      	ldr	r3, [pc, #228]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <_ZL14MX_FDCAN1_Initv+0x11c>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]

	/* AUX1 ID */
	RxHeader.Identifier = 0x23; //0x555;
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001414:	2223      	movs	r2, #35	; 0x23
 8001416:	601a      	str	r2, [r3, #0]
	/* AUX2 ID */
	//RxHeader.Identifier = 0xFAAA; //0x555;
	RxHeader.IdType = FDCAN_EXTENDED_ID;
 8001418:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 800141a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141e:	605a      	str	r2, [r3, #4]
	RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
	RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001428:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800142c:	60da      	str	r2, [r3, #12]
	RxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
	RxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
	RxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <_ZL14MX_FDCAN1_Initv+0x120>)
 800143c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001440:	619a      	str	r2, [r3, #24]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001444:	4a2c      	ldr	r2, [pc, #176]	; (80014f8 <_ZL14MX_FDCAN1_Initv+0x128>)
 8001446:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800145c:	2200      	movs	r2, #0
 800145e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001462:	2200      	movs	r2, #0
 8001464:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001468:	2200      	movs	r2, #0
 800146a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800146e:	2201      	movs	r2, #1
 8001470:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001474:	2201      	movs	r2, #1
 8001476:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 110;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800147a:	226e      	movs	r2, #110	; 0x6e
 800147c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 17;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001480:	2211      	movs	r2, #17
 8001482:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001486:	2201      	movs	r2, #1
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800148c:	2201      	movs	r2, #1
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001492:	2220      	movs	r2, #32
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 8001498:	2201      	movs	r2, #1
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 800149e:	2200      	movs	r2, #0
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 80014b0:	f002 fb02 	bl	8003ab8 <HAL_FDCAN_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZL14MX_FDCAN1_Initv+0xf8>
  {
    Error_Handler();
 80014c4:	f000 fb38 	bl	8001b38 <Error_Handler>
*/
/* Configure global filter to reject all non-matching frames */
    //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

/* Start CAN */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <_ZL14MX_FDCAN1_Initv+0x124>)
 80014ca:	f002 fc4f 	bl	8003d6c <HAL_FDCAN_Start>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_ZL14MX_FDCAN1_Initv+0x112>
	{
		// Couldn't start FDCAN
		Error_Handler();
 80014de:	f000 fb2b 	bl	8001b38 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200005d4 	.word	0x200005d4
 80014f0:	200005ac 	.word	0x200005ac
 80014f4:	200002fc 	.word	0x200002fc
 80014f8:	40006400 	.word	0x40006400

080014fc <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <_ZL12MX_I2C2_Initv+0x94>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <_ZL12MX_I2C2_Initv+0x98>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001514:	2201      	movs	r2, #1
 8001516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001538:	f002 ff66 	bl	8004408 <HAL_I2C_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf14      	ite	ne
 8001542:	2301      	movne	r3, #1
 8001544:	2300      	moveq	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 800154c:	f000 faf4 	bl	8001b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001554:	f002 ffe7 	bl	8004526 <HAL_I2CEx_ConfigAnalogFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8001568:	f000 fae6 	bl	8001b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <_ZL12MX_I2C2_Initv+0x90>)
 8001570:	f003 f824 	bl	80045bc <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8001584:	f000 fad8 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000360 	.word	0x20000360
 8001590:	40005800 	.word	0x40005800
 8001594:	00602173 	.word	0x00602173

08001598 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <_ZL12MX_I2C3_Initv+0x94>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <_ZL12MX_I2C3_Initv+0x98>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015d4:	f002 ff18 	bl	8004408 <HAL_I2C_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80015e8:	f000 faa6 	bl	8001b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 80015f0:	f002 ff99 	bl	8004526 <HAL_I2CEx_ConfigAnalogFilter>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001604:	f000 fa98 	bl	8001b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <_ZL12MX_I2C3_Initv+0x90>)
 800160c:	f002 ffd6 	bl	80045bc <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001620:	f000 fa8a 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200003ac 	.word	0x200003ac
 800162c:	40007800 	.word	0x40007800
 8001630:	00602173 	.word	0x00602173

08001634 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800163c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001678:	f005 fdc4 	bl	8007204 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf14      	ite	ne
 8001682:	2301      	movne	r3, #1
 8001684:	2300      	moveq	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 800168c:	f000 fa54 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8001694:	f006 fb86 	bl	8007da4 <HAL_UARTEx_SetTxFifoThreshold>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 80016a8:	f000 fa46 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	480e      	ldr	r0, [pc, #56]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80016b0:	f006 fbb6 	bl	8007e20 <HAL_UARTEx_SetRxFifoThreshold>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 80016c4:	f000 fa38 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80016ca:	f006 fb32 	bl	8007d32 <HAL_UARTEx_DisableFifoMode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 80016de:	f000 fa2b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003f8 	.word	0x200003f8
 80016ec:	40008000 	.word	0x40008000

080016f0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <_ZL12MX_SPI2_Initv+0x80>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 80016fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 800170a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800170e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 800171e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001722:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 800173e:	2207      	movs	r2, #7
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 800174a:	2208      	movs	r2, #8
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <_ZL12MX_SPI2_Initv+0x7c>)
 8001750:	f003 ffa0 	bl	8005694 <HAL_SPI_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001764:	f000 f9e8 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000488 	.word	0x20000488
 8001770:	40003800 	.word	0x40003800

08001774 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017aa:	223f      	movs	r2, #63	; 0x3f
 80017ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c8:	482e      	ldr	r0, [pc, #184]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017ca:	f004 f80e 	bl	80057ea <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 80017de:	f000 f9ab 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 80017f0:	f004 fd50 	bl	8006294 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 8001804:	f000 f998 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 800180a:	f004 f9b3 	bl	8005b74 <HAL_TIM_IC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800181e:	f000 f98b 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4814      	ldr	r0, [pc, #80]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 8001832:	f005 fc13 	bl	800705c <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 8001846:	f000 f977 	bl	8001b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800184a:	230a      	movs	r3, #10
 800184c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800184e:	2301      	movs	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <_ZL12MX_TIM2_Initv+0x110>)
 8001862:	f004 fb67 	bl	8005f34 <HAL_TIM_IC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 8001876:	f000 f95f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	; 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200004ec 	.word	0x200004ec

08001888 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018bc:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <_ZL12MX_TIM3_Initv+0x124>)
 80018be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018ce:	2227      	movs	r2, #39	; 0x27
 80018d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018de:	4832      	ldr	r0, [pc, #200]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 80018e0:	f003 ff83 	bl	80057ea <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80018f4:	f000 f920 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001902:	4619      	mov	r1, r3
 8001904:	4828      	ldr	r0, [pc, #160]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 8001906:	f004 fcc5 	bl	8006294 <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800191a:	f000 f90d 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800191e:	4822      	ldr	r0, [pc, #136]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 8001920:	f003 ffba 	bl	8005898 <HAL_TIM_PWM_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001934:	f000 f900 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4818      	ldr	r0, [pc, #96]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 8001948:	f005 fb88 	bl	800705c <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 800195c:	f000 f8ec 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001964:	231e      	movs	r3, #30
 8001966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 8001978:	f004 fb78 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 800198c:	f000 f8d4 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start pwm generation
 8001990:	2100      	movs	r1, #0
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 8001994:	f003 ffe2 	bl	800595c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <_ZL12MX_TIM3_Initv+0x120>)
 800199a:	f000 fba3 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000538 	.word	0x20000538
 80019ac:	40000400 	.word	0x40000400

080019b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019cc:	f043 0320 	orr.w	r3, r3, #32
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <_ZL12MX_GPIO_Initv+0x17c>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DRIVE_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin
 8001a26:	2200      	movs	r2, #0
 8001a28:	f240 6182 	movw	r1, #1666	; 0x682
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f002 fcb8 	bl	80043a4 <HAL_GPIO_WritePin>
                          |HEPA_W_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_B_CTRL_Pin|HEPA_G_CTRL_Pin|nEEPROM_WP_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001a3a:	483d      	ldr	r0, [pc, #244]	; (8001b30 <_ZL12MX_GPIO_Initv+0x180>)
 8001a3c:	f002 fcb2 	bl	80043a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f640 0107 	movw	r1, #2055	; 0x807
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <_ZL12MX_GPIO_Initv+0x184>)
 8001a48:	f002 fcac 	bl	80043a4 <HAL_GPIO_WritePin>

  /*UV_ON_OFF is set by default to keep UV bulb off */
  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2110      	movs	r1, #16
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f002 fca6 	bl	80043a4 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : UV_NO_Pin DOOR_OPEN_MCU_Pin POS_SW__MCU_Pin */
  GPIO_InitStruct.Pin = UV_NO_Pin|DOOR_OPEN_MCU_Pin|POS_SW_MCU_Pin;
 8001a58:	f640 0384 	movw	r3, #2180	; 0x884
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4830      	ldr	r0, [pc, #192]	; (8001b30 <_ZL12MX_GPIO_Initv+0x180>)
 8001a6e:	f002 faff 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DRIVE_Pin */
  GPIO_InitStruct.Pin = LED_DRIVE_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a76:	2311      	movs	r3, #17
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8c:	f002 faf0 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_ON_OFF_MCU_Pin HEPA_ON_OFF_Pin HEPA_R_CTRL_Pin HEPA_W_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin|HEPA_R_CTRL_Pin|HEPA_W_CTRL_Pin;
 8001a90:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f002 fae0 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_B_CTRL_Pin HEPA_G_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_B_CTRL_Pin|HEPA_G_CTRL_Pin;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481a      	ldr	r0, [pc, #104]	; (8001b30 <_ZL12MX_GPIO_Initv+0x180>)
 8001ac8:	f002 fad2 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_G_CTRL_Pin UV_R_CTRL_Pin UV_W_CTRL_Pin HEPA_B_CTRL_Pin */
  GPIO_InitStruct.Pin = UV_G_CTRL_Pin|UV_R_CTRL_Pin|UV_W_CTRL_Pin|HEPA_B_CTRL_Pin;
 8001acc:	f640 0307 	movw	r3, #2055	; 0x807
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <_ZL12MX_GPIO_Initv+0x184>)
 8001ae6:	f002 fac3 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_NO_Pin */
  GPIO_InitStruct.Pin = HEPA_NO_Pin;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEPA_NO_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <_ZL12MX_GPIO_Initv+0x184>)
 8001b00:	f002 fab6 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : nEEPROM_WP_Pin */
  GPIO_InitStruct.Pin = nEEPROM_WP_Pin;
 8001b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b0a:	2311      	movs	r3, #17
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nEEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <_ZL12MX_GPIO_Initv+0x180>)
 8001b1e:	f002 faa7 	bl	8004070 <HAL_GPIO_Init>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000400 	.word	0x48000400

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_MspInit+0x44>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_MspInit+0x44>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6613      	str	r3, [r2, #96]	; 0x60
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_MspInit+0x44>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_MspInit+0x44>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_MspInit+0x44>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_MspInit+0x44>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b7a:	f002 fe0f 	bl	800479c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a0      	sub	sp, #128	; 0x80
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	2250      	movs	r2, #80	; 0x50
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f006 f9ed 	bl	8007f8c <memset>
  if(hadc->Instance==ADC1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bba:	d13d      	bne.n	8001c38 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001bc2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fb25 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001bd8:	f7ff ffae 	bl	8001b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001be4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10b      	bne.n	8001c06 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a35      	ldr	r2, [pc, #212]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001bf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = _24V_SCLD_Pin|_3V3_SCLD_Pin;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c22:	2303      	movs	r3, #3
 8001c24:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4826      	ldr	r0, [pc, #152]	; (8001ccc <HAL_ADC_MspInit+0x140>)
 8001c32:	f002 fa1d 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c36:	e041      	b.n	8001cbc <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_ADC_MspInit+0x144>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13c      	bne.n	8001cbc <HAL_ADC_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fae2 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8001c5e:	f7ff ff6b 	bl	8001b38 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001c6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_ADC_MspInit+0x138>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_ADC_MspInit+0x13c>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = _3V3_SCLD_Pin;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(_3V3_SCLD_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_ADC_MspInit+0x140>)
 8001cb8:	f002 f9da 	bl	8004070 <HAL_GPIO_Init>
}
 8001cbc:	bf00      	nop
 8001cbe:	3780      	adds	r7, #128	; 0x80
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200005f8 	.word	0x200005f8
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	50000100 	.word	0x50000100

08001cd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b09e      	sub	sp, #120	; 0x78
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2250      	movs	r2, #80	; 0x50
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 f949 	bl	8007f8c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_FDCAN_MspInit+0xac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d139      	bne.n	8001d78 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fa81 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d20:	f7ff ff0a 	bl	8001b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_FDCAN_MspInit+0xb0>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d66:	2309      	movs	r3, #9
 8001d68:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f002 f97c 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3778      	adds	r7, #120	; 0x78
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40006400 	.word	0x40006400
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0a0      	sub	sp, #128	; 0x80
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2250      	movs	r2, #80	; 0x50
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 f8ef 	bl	8007f8c <memset>
  if(hi2c->Instance==I2C2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_I2C_MspInit+0x15c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d154      	bne.n	8001e62 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fa29 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dd0:	f7ff feb2 	bl	8001b38 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	4a43      	ldr	r2, [pc, #268]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 8001e04:	2310      	movs	r3, #16
 8001e06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e14:	2304      	movs	r3, #4
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4833      	ldr	r0, [pc, #204]	; (8001eec <HAL_I2C_MspInit+0x164>)
 8001e20:	f002 f926 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EEPROM_SDA_Pin;
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2a:	2312      	movs	r3, #18
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e36:	2304      	movs	r3, #4
 8001e38:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e44:	f002 f914 	bl	8004070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e60:	e03c      	b.n	8001edc <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_I2C_MspInit+0x168>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d137      	bne.n	8001edc <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f9ce 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8001e86:	f7ff fe57 	bl	8001b38 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_I2C_MspInit+0x164>)
 8001ec0:	f002 f8d6 	bl	8004070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_I2C_MspInit+0x160>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
}
 8001edc:	bf00      	nop
 8001ede:	3780      	adds	r7, #128	; 0x80
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40005800 	.word	0x40005800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	40007800 	.word	0x40007800

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09e      	sub	sp, #120	; 0x78
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2250      	movs	r2, #80	; 0x50
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 f839 	bl	8007f8c <memset>
  if(huart->Instance==LPUART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_UART_MspInit+0xa8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d136      	bne.n	8001f92 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f24:	2320      	movs	r3, #32
 8001f26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f973 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f3c:	f7ff fdfc 	bl	8001b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_UART_MspInit+0xac>)
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f70:	230c      	movs	r3, #12
 8001f72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f80:	230c      	movs	r3, #12
 8001f82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f002 f86f 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3778      	adds	r7, #120	; 0x78
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40008000 	.word	0x40008000
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_SPI_MspInit+0x7c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d128      	bne.n	8002018 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_SPI_MspInit+0x80>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ff6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002008:	2305      	movs	r3, #5
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <HAL_SPI_MspInit+0x84>)
 8002014:	f002 f82c 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40003800 	.word	0x40003800
 8002024:	40021000 	.word	0x40021000
 8002028:	48000400 	.word	0x48000400

0800202c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d131      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HEPA_FG_Pin;
 800207e:	2320      	movs	r3, #32
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEPA_FG_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f001 ffe8 	bl	8004070 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	201c      	movs	r0, #28
 80020a6:	f001 fcd2 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020aa:	201c      	movs	r0, #28
 80020ac:	f001 fce9 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020b0:	e010      	b.n	80020d4 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_TIM_Base_MspInit+0xb4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10b      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	6593      	str	r3, [r2, #88]	; 0x58
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40000400 	.word	0x40000400

080020e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_TIM_MspPostInit+0x64>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d11c      	bne.n	8002140 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_TIM_MspPostInit+0x68>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_TIM_MspPostInit+0x68>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_TIM_MspPostInit+0x68>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HEPA_PWM_Pin;
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800212e:	2302      	movs	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEPA_PWM_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213c:	f001 ff98 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40000400 	.word	0x40000400
 800214c:	40021000 	.word	0x40021000

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 f960 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM2_IRQHandler+0x10>)
 80021aa:	f003 fd44 	bl	8005c36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004ec 	.word	0x200004ec

080021b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_kill>:

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021d2:	f005 feb1 	bl	8007f38 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
	return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021fa:	e7fe      	b.n	80021fa <_exit+0x12>

080021fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
	}

return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf1      	blt.n	8002248 <_write+0x12>
	}
	return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_close>:

int _close(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002296:	605a      	str	r2, [r3, #4]
	return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_sbrk+0x5c>)
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <_sbrk+0x60>)
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x64>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_sbrk+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002308:	f005 fe16 	bl	8007f38 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e009      	b.n	800232c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <_sbrk+0x64>)
 8002328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2001c000 	.word	0x2001c000
 8002338:	00000400 	.word	0x00000400
 800233c:	200005fc 	.word	0x200005fc
 8002340:	20000618 	.word	0x20000618

08002344 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800236a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0b      	ldr	r4, [pc, #44]	; (80023b4 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002392:	f7ff ffd7 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f005 fdd5 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239a:	f7fe fe0f 	bl	8000fbc <main>

0800239e <LoopForever>:

LoopForever:
    b LoopForever
 800239e:	e7fe      	b.n	800239e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80023a0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80023ac:	0800b1f4 	.word	0x0800b1f4
  ldr r2, =_sbss
 80023b0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80023b4:	20000614 	.word	0x20000614

080023b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_2_IRQHandler>

080023ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f001 fb37 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ca:	200f      	movs	r0, #15
 80023cc:	f000 f80e 	bl	80023ec <HAL_InitTick>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	71fb      	strb	r3, [r7, #7]
 80023da:	e001      	b.n	80023e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023dc:	f7ff fbb2 	bl	8001b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e0:	79fb      	ldrb	r3, [r7, #7]

}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_InitTick+0x68>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d022      	beq.n	8002446 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_InitTick+0x6c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_InitTick+0x68>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800240c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f001 fb42 	bl	8003a9e <HAL_SYSTICK_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d809      	bhi.n	800243a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002426:	2200      	movs	r2, #0
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	f04f 30ff 	mov.w	r0, #4294967295
 800242e:	f001 fb0e 	bl	8003a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_InitTick+0x70>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e007      	b.n	800244a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e004      	b.n	800244a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e001      	b.n	800244a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000034 	.word	0x20000034
 8002458:	2000002c 	.word	0x2000002c
 800245c:	20000030 	.word	0x20000030

08002460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_IncTick+0x1c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_IncTick+0x20>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_IncTick+0x1c>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20000600 	.word	0x20000600
 8002480:	20000034 	.word	0x20000034

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000600 	.word	0x20000600

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d004      	beq.n	80024c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_Delay+0x40>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c0:	bf00      	nop
 80024c2:	f7ff ffdf 	bl	8002484 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d8f7      	bhi.n	80024c2 <HAL_Delay+0x26>
  {
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000034 	.word	0x20000034

080024e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <LL_ADC_SetOffset+0x44>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	4313      	orrs	r3, r2
 8002578:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	03fff000 	.word	0x03fff000

08002590 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3360      	adds	r3, #96	; 0x60
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b087      	sub	sp, #28
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3360      	adds	r3, #96	; 0x60
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	615a      	str	r2, [r3, #20]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3330      	adds	r3, #48	; 0x30
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	211f      	movs	r1, #31
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	f003 011f 	and.w	r1, r3, #31
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	431a      	orrs	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3314      	adds	r3, #20
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0d1b      	lsrs	r3, r3, #20
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2107      	movs	r1, #7
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	401a      	ands	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0d1b      	lsrs	r3, r3, #20
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10a      	bne.n	800275e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	431a      	orrs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800275c:	e00a      	b.n	8002774 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	43db      	mvns	r3, r3
 800276c:	401a      	ands	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	407f0000 	.word	0x407f0000

08002784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6093      	str	r3, [r2, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <LL_ADC_IsEnabled+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_IsEnabled+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d101      	bne.n	8002886 <LL_ADC_IsDisableOngoing+0x18>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_ADC_IsDisableOngoing+0x1a>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d101      	bne.n	80028ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1a1      	b.n	8002c3e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff f93f 	bl	8001b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff41 	bl	80027a8 <LL_ADC_IsDeepPowerDownEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff27 	bl	8002784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff5c 	bl	80027f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff40 	bl	80027d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002950:	4b9a      	ldr	r3, [pc, #616]	; (8002bbc <HAL_ADC_Init+0x2dc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	4a9a      	ldr	r2, [pc, #616]	; (8002bc0 <HAL_ADC_Init+0x2e0>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002964:	e002      	b.n	800296c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff3e 	bl	80027f8 <LL_ADC_IsInternalRegulatorEnabled>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff76 	bl	8002894 <LL_ADC_REG_IsConversionOngoing>
 80029a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 813a 	bne.w	8002c2c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8136 	bne.w	8002c2c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff37 	bl	8002848 <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d137      	bne.n	8002a50 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_Init+0x114>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a75      	ldr	r2, [pc, #468]	; (8002bc4 <HAL_ADC_Init+0x2e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10f      	bne.n	8002a14 <HAL_ADC_Init+0x134>
 80029f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029f8:	f7ff ff26 	bl	8002848 <LL_ADC_IsEnabled>
 80029fc:	4604      	mov	r4, r0
 80029fe:	4871      	ldr	r0, [pc, #452]	; (8002bc4 <HAL_ADC_Init+0x2e4>)
 8002a00:	f7ff ff22 	bl	8002848 <LL_ADC_IsEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4323      	orrs	r3, r4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e008      	b.n	8002a26 <HAL_ADC_Init+0x146>
 8002a14:	486c      	ldr	r0, [pc, #432]	; (8002bc8 <HAL_ADC_Init+0x2e8>)
 8002a16:	f7ff ff17 	bl	8002848 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_Init+0x15e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_ADC_Init+0x2e4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_Init+0x162>
 8002a3e:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_ADC_Init+0x2ec>)
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_Init+0x164>
 8002a42:	4a63      	ldr	r2, [pc, #396]	; (8002bd0 <HAL_ADC_Init+0x2f0>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff fd48 	bl	80024e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7f5b      	ldrb	r3, [r3, #29]
 8002a54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	3b01      	subs	r3, #1
 8002a84:	045b      	lsls	r3, r3, #17
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_ADC_Init+0x2f4>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	69b9      	ldr	r1, [r7, #24]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fedc 	bl	8002894 <LL_ADC_REG_IsConversionOngoing>
 8002adc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fee9 	bl	80028ba <LL_ADC_INJ_IsConversionOngoing>
 8002ae8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d17b      	bne.n	8002be8 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d178      	bne.n	8002be8 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002afa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b12:	f023 0302 	bic.w	r3, r3, #2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6911      	ldr	r1, [r2, #16]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b56:	e013      	b.n	8002b80 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d126      	bne.n	8002bd8 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bac:	430a      	orrs	r2, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	e015      	b.n	8002be8 <HAL_ADC_Init+0x308>
 8002bbc:	2000002c 	.word	0x2000002c
 8002bc0:	053e2d63 	.word	0x053e2d63
 8002bc4:	50000100 	.word	0x50000100
 8002bc8:	50000400 	.word	0x50000400
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	50000700 	.word	0x50000700
 8002bd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f023 010f 	bic.w	r1, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	e007      	b.n	8002c1a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020f 	bic.w	r2, r2, #15
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c2a:	e007      	b.n	8002c3c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	f043 0210 	orr.w	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop

08002c48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0b6      	sub	sp, #216	; 0xd8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x24>
 8002c66:	2302      	movs	r3, #2
 8002c68:	f000 bc04 	b.w	8003474 <HAL_ADC_ConfigChannel+0x82c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe0b 	bl	8002894 <LL_ADC_REG_IsConversionOngoing>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 83e8 	bne.w	8003456 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7ff fcf6 	bl	8002684 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fdf9 	bl	8002894 <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe05 	bl	80028ba <LL_ADC_INJ_IsConversionOngoing>
 8002cb0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 81d9 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 81d4 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7ff fcfd 	bl	80026dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fcb7 	bl	800265e <LL_ADC_SetSamplingTimeCommonConfig>
 8002cf0:	e00e      	b.n	8002d10 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fcec 	bl	80026dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fca7 	bl	800265e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d022      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6919      	ldr	r1, [r3, #16]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d42:	f7ff fc01 	bl	8002548 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6919      	ldr	r1, [r3, #16]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7ff fc4d 	bl	80025f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6919      	ldr	r1, [r3, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7f1b      	ldrb	r3, [r3, #28]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x126>
 8002d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x128>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	461a      	mov	r2, r3
 8002d72:	f7ff fc59 	bl	8002628 <LL_ADC_SetOffsetSaturation>
 8002d76:	e17b      	b.n	8003070 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fc06 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x15c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fbfb 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	e01e      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x19a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fbf0 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e004      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x1b2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	e018      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1e4>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e1e:	2320      	movs	r3, #32
 8002e20:	e004      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d106      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fbbf 	bl	80025bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fba3 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x222>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fb98 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	e01e      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x260>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fb8d 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e004      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002e9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x278>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	e018      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x2aa>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e004      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb5c 	bl	80025bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fb40 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x2e8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fb35 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	e01e      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x326>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fb2a 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e004      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x33e>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	e016      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x36c>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fafb 	bl	80025bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2103      	movs	r1, #3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fadf 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x3aa>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fad4 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	e017      	b.n	8003022 <HAL_ADC_ConfigChannel+0x3da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fac9 	bl	8002590 <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800300a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800300e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_ADC_ConfigChannel+0x3f2>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	e011      	b.n	800305e <HAL_ADC_ConfigChannel+0x416>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e003      	b.n	800305e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	2103      	movs	r1, #3
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff faa6 	bl	80025bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fbe7 	bl	8002848 <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 813d 	bne.w	80032fc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f7ff fb50 	bl	8002734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4aa2      	ldr	r2, [pc, #648]	; (8003324 <HAL_ADC_ConfigChannel+0x6dc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	f040 812e 	bne.w	80032fc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x480>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	3301      	adds	r3, #1
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b09      	cmp	r3, #9
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e019      	b.n	80030fc <HAL_ADC_ConfigChannel+0x4b4>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e003      	b.n	80030ec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80030e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	bf94      	ite	ls
 80030f6:	2301      	movls	r3, #1
 80030f8:	2300      	movhi	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d079      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_ADC_ConfigChannel+0x4d4>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	069b      	lsls	r3, r3, #26
 8003116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311a:	e015      	b.n	8003148 <HAL_ADC_ConfigChannel+0x500>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800312e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	069b      	lsls	r3, r3, #26
 8003144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x520>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	e017      	b.n	8003198 <HAL_ADC_ConfigChannel+0x550>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <HAL_ADC_ConfigChannel+0x576>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	051b      	lsls	r3, r3, #20
 80031bc:	e018      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x5a8>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f0:	430b      	orrs	r3, r1
 80031f2:	e07e      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x5c8>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	069b      	lsls	r3, r3, #26
 800320a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320e:	e015      	b.n	800323c <HAL_ADC_ConfigChannel+0x5f4>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	069b      	lsls	r3, r3, #26
 8003238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_ConfigChannel+0x614>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	e017      	b.n	800328c <HAL_ADC_ConfigChannel+0x644>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	61fb      	str	r3, [r7, #28]
  return result;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e003      	b.n	8003280 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	ea42 0103 	orr.w	r1, r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10d      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x670>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	3b1e      	subs	r3, #30
 80032b0:	051b      	lsls	r3, r3, #20
 80032b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b6:	e01b      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x6a8>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	613b      	str	r3, [r7, #16]
  return result;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e003      	b.n	80032dc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 021f 	and.w	r2, r3, #31
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	3b1e      	subs	r3, #30
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f0:	430b      	orrs	r3, r1
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7ff f9f0 	bl	80026dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_ADC_ConfigChannel+0x6e0>)
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80af 	beq.w	8003468 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003312:	d004      	beq.n	800331e <HAL_ADC_ConfigChannel+0x6d6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_ADC_ConfigChannel+0x6e4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10a      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x6ec>
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_ADC_ConfigChannel+0x6e8>)
 8003320:	e009      	b.n	8003336 <HAL_ADC_ConfigChannel+0x6ee>
 8003322:	bf00      	nop
 8003324:	407f0000 	.word	0x407f0000
 8003328:	80080000 	.word	0x80080000
 800332c:	50000100 	.word	0x50000100
 8003330:	50000300 	.word	0x50000300
 8003334:	4b51      	ldr	r3, [pc, #324]	; (800347c <HAL_ADC_ConfigChannel+0x834>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f8f8 	bl	800252c <LL_ADC_GetCommonPathInternalCh>
 800333c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <HAL_ADC_ConfigChannel+0x838>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x70c>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <HAL_ADC_ConfigChannel+0x83c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d134      	bne.n	80033be <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d12e      	bne.n	80033be <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003368:	d17e      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003372:	d004      	beq.n	800337e <HAL_ADC_ConfigChannel+0x736>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a43      	ldr	r2, [pc, #268]	; (8003488 <HAL_ADC_ConfigChannel+0x840>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x73a>
 800337e:	4a43      	ldr	r2, [pc, #268]	; (800348c <HAL_ADC_ConfigChannel+0x844>)
 8003380:	e000      	b.n	8003384 <HAL_ADC_ConfigChannel+0x73c>
 8003382:	4a3e      	ldr	r2, [pc, #248]	; (800347c <HAL_ADC_ConfigChannel+0x834>)
 8003384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f7ff f8b9 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <HAL_ADC_ConfigChannel+0x848>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	4a3e      	ldr	r2, [pc, #248]	; (8003494 <HAL_ADC_ConfigChannel+0x84c>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033bc:	e054      	b.n	8003468 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a35      	ldr	r2, [pc, #212]	; (8003498 <HAL_ADC_ConfigChannel+0x850>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d120      	bne.n	800340a <HAL_ADC_ConfigChannel+0x7c2>
 80033c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11a      	bne.n	800340a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d144      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e6:	d004      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x7aa>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <HAL_ADC_ConfigChannel+0x840>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x7ae>
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <HAL_ADC_ConfigChannel+0x844>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x7b0>
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_ADC_ConfigChannel+0x834>)
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7ff f87f 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003408:	e02e      	b.n	8003468 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a23      	ldr	r2, [pc, #140]	; (800349c <HAL_ADC_ConfigChannel+0x854>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d129      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d123      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_ADC_ConfigChannel+0x840>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01e      	beq.n	8003468 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003432:	d004      	beq.n	800343e <HAL_ADC_ConfigChannel+0x7f6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_ADC_ConfigChannel+0x840>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7fa>
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_ADC_ConfigChannel+0x844>)
 8003440:	e000      	b.n	8003444 <HAL_ADC_ConfigChannel+0x7fc>
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <HAL_ADC_ConfigChannel+0x834>)
 8003444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f7ff f859 	bl	8002506 <LL_ADC_SetCommonPathInternalCh>
 8003454:	e008      	b.n	8003468 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003470:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003474:	4618      	mov	r0, r3
 8003476:	37d8      	adds	r7, #216	; 0xd8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	50000700 	.word	0x50000700
 8003480:	c3210000 	.word	0xc3210000
 8003484:	90c00010 	.word	0x90c00010
 8003488:	50000100 	.word	0x50000100
 800348c:	50000300 	.word	0x50000300
 8003490:	2000002c 	.word	0x2000002c
 8003494:	053e2d63 	.word	0x053e2d63
 8003498:	c7520000 	.word	0xc7520000
 800349c:	cb840000 	.word	0xcb840000

080034a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f9de 	bl	800286e <LL_ADC_IsDisableOngoing>
 80034b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f9c5 	bl	8002848 <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d047      	beq.n	8003554 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d144      	bne.n	8003554 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030d 	and.w	r3, r3, #13
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10c      	bne.n	80034f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f99f 	bl	8002820 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2203      	movs	r2, #3
 80034e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ea:	f7fe ffcb 	bl	8002484 <HAL_GetTick>
 80034ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f0:	e029      	b.n	8003546 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e023      	b.n	8003556 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800350e:	f7fe ffb9 	bl	8002484 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1dc      	bne.n	800350e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <LL_ADC_IsEnabled>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <LL_ADC_IsEnabled+0x18>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <LL_ADC_IsEnabled+0x1a>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_StartCalibration>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003596:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_ADC_IsCalibrationOnGoing>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ca:	d101      	bne.n	80035d0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_ADC_REG_IsConversionOngoing>:
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d101      	bne.n	80035f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_ADCEx_Calibration_Start+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e04d      	b.n	80036bc <HAL_ADCEx_Calibration_Start+0xb8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff39 	bl	80034a0 <ADC_Disable>
 800362e:	4603      	mov	r3, r0
 8003630:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d136      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	f043 0202 	orr.w	r2, r3, #2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6839      	ldr	r1, [r7, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff96 	bl	8003584 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003658:	e014      	b.n	8003684 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d90d      	bls.n	8003684 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f023 0312 	bic.w	r3, r3, #18
 8003670:	f043 0210 	orr.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e01b      	b.n	80036bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff94 	bl	80035b6 <LL_ADC_IsCalibrationOnGoing>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e2      	bne.n	800365a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	f023 0303 	bic.w	r3, r3, #3
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036a4:	e005      	b.n	80036b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	0004de01 	.word	0x0004de01

080036c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b0a1      	sub	sp, #132	; 0x84
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0cb      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80036ee:	2300      	movs	r3, #0
 80036f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80036f2:	2300      	movs	r3, #0
 80036f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036fe:	d102      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003700:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e001      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0aa      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff57 	bl	80035de <LL_ADC_REG_IsConversionOngoing>
 8003730:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff51 	bl	80035de <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 808c 	bne.w	800385c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 8088 	bne.w	800385c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d004      	beq.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4b      	ldr	r2, [pc, #300]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003760:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003762:	e000      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003764:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003766:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d041      	beq.n	80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003782:	035b      	lsls	r3, r3, #13
 8003784:	430b      	orrs	r3, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d004      	beq.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10f      	bne.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80037a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037a4:	f7ff fedb 	bl	800355e <LL_ADC_IsEnabled>
 80037a8:	4604      	mov	r4, r0
 80037aa:	4837      	ldr	r0, [pc, #220]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80037ac:	f7ff fed7 	bl	800355e <LL_ADC_IsEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4323      	orrs	r3, r4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e008      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80037c2:	f7ff fecc 	bl	800355e <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04c      	beq.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037de:	f023 030f 	bic.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6811      	ldr	r1, [r2, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037f2:	e03d      	b.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003808:	d004      	beq.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10f      	bne.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003814:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003818:	f7ff fea1 	bl	800355e <LL_ADC_IsEnabled>
 800381c:	4604      	mov	r4, r0
 800381e:	481a      	ldr	r0, [pc, #104]	; (8003888 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003820:	f7ff fe9d 	bl	800355e <LL_ADC_IsEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	4323      	orrs	r3, r4
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e008      	b.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003834:	4817      	ldr	r0, [pc, #92]	; (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003836:	f7ff fe92 	bl	800355e <LL_ADC_IsEnabled>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800384a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003858:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385a:	e009      	b.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800386e:	e000      	b.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003870:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800387a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800387e:	4618      	mov	r0, r3
 8003880:	3784      	adds	r7, #132	; 0x84
 8003882:	46bd      	mov	sp, r7
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	bf00      	nop
 8003888:	50000100 	.word	0x50000100
 800388c:	50000300 	.word	0x50000300
 8003890:	50000700 	.word	0x50000700
 8003894:	50000400 	.word	0x50000400

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff40 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff90 	bl	800398c <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5f 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff33 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffa4 	bl	80039f4 <SysTick_Config>
 8003aac:	4603      	mov	r3, r0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e147      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe f8f8 	bl	8001cd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0210 	bic.w	r2, r2, #16
 8003af2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af4:	f7fe fcc6 	bl	8002484 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003afa:	e012      	b.n	8003b22 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003afc:	f7fe fcc2 	bl	8002484 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b0a      	cmp	r3, #10
 8003b08:	d90b      	bls.n	8003b22 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e11b      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d0e5      	beq.n	8003afc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b40:	f7fe fca0 	bl	8002484 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b46:	e012      	b.n	8003b6e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b48:	f7fe fc9c 	bl	8002484 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b0a      	cmp	r3, #10
 8003b54:	d90b      	bls.n	8003b6e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0f5      	b.n	8003d5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0e5      	beq.n	8003b48 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0202 	orr.w	r2, r2, #2
 8003b8a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a74      	ldr	r2, [pc, #464]	; (8003d64 <HAL_FDCAN_Init+0x2ac>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d103      	bne.n	8003b9e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b96:	4a74      	ldr	r2, [pc, #464]	; (8003d68 <HAL_FDCAN_Init+0x2b0>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7c1b      	ldrb	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d108      	bne.n	8003bb8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	619a      	str	r2, [r3, #24]
 8003bb6:	e007      	b.n	8003bc8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7c5b      	ldrb	r3, [r3, #17]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d108      	bne.n	8003be2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	619a      	str	r2, [r3, #24]
 8003be0:	e007      	b.n	8003bf2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7c9b      	ldrb	r3, [r3, #18]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e007      	b.n	8003c1c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c1a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003c40:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0210 	bic.w	r2, r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	619a      	str	r2, [r3, #24]
 8003c6a:	e02c      	b.n	8003cc6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d028      	beq.n	8003cc6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d01c      	beq.n	8003cb6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0210 	orr.w	r2, r2, #16
 8003c9a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d110      	bne.n	8003cc6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0220 	orr.w	r2, r2, #32
 8003cb2:	619a      	str	r2, [r3, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cd6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cde:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cf0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d115      	bne.n	8003d28 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	3b01      	subs	r3, #1
 8003d08:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d0a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	3b01      	subs	r3, #1
 8003d12:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d24:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d26:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f934 	bl	8003fac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40006400 	.word	0x40006400
 8003d68:	40006500 	.word	0x40006500

08003d6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d110      	bne.n	8003da2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e006      	b.n	8003db0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b08b      	sub	sp, #44	; 0x2c
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dd0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003dd2:	7efb      	ldrb	r3, [r7, #27]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f040 80bc 	bne.w	8003f52 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d121      	bne.n	8003e24 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0af      	b.n	8003f60 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	440b      	add	r3, r1
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
 8003e22:	e020      	b.n	8003e66 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e08d      	b.n	8003f60 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e005      	b.n	8003e96 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0fda      	lsrs	r2, r3, #31
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3304      	adds	r3, #4
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	e00a      	b.n	8003f20 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	441a      	add	r2, r3
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	440b      	add	r3, r1
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d3eb      	bcc.n	8003f0a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d105      	bne.n	8003f44 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003f42:	e004      	b.n	8003f4e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e006      	b.n	8003f60 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	372c      	adds	r7, #44	; 0x2c
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	0800add4 	.word	0x0800add4

08003f70 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d107      	bne.n	8003f90 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e006      	b.n	8003f9e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003fb6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d103      	bne.n	8003fca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003fc8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd8:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	041a      	lsls	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	061a      	lsls	r2, r3, #24
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e005      	b.n	800404c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d3f3      	bcc.n	8004040 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	4000a400 	.word	0x4000a400
 800406c:	40006800 	.word	0x40006800

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800407e:	e15a      	b.n	8004336 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 814c 	beq.w	8004330 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d005      	beq.n	80040b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d130      	bne.n	8004112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	2203      	movs	r2, #3
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e6:	2201      	movs	r2, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0201 	and.w	r2, r3, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b03      	cmp	r3, #3
 800411c:	d017      	beq.n	800414e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d123      	bne.n	80041a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80a6 	beq.w	8004330 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_GPIO_Init+0x2e4>)
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	4a5a      	ldr	r2, [pc, #360]	; (8004354 <HAL_GPIO_Init+0x2e4>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6613      	str	r3, [r2, #96]	; 0x60
 80041f0:	4b58      	ldr	r3, [pc, #352]	; (8004354 <HAL_GPIO_Init+0x2e4>)
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041fc:	4a56      	ldr	r2, [pc, #344]	; (8004358 <HAL_GPIO_Init+0x2e8>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	220f      	movs	r2, #15
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004226:	d01f      	beq.n	8004268 <HAL_GPIO_Init+0x1f8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a4c      	ldr	r2, [pc, #304]	; (800435c <HAL_GPIO_Init+0x2ec>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d019      	beq.n	8004264 <HAL_GPIO_Init+0x1f4>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <HAL_GPIO_Init+0x2f0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_GPIO_Init+0x1f0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a4a      	ldr	r2, [pc, #296]	; (8004364 <HAL_GPIO_Init+0x2f4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00d      	beq.n	800425c <HAL_GPIO_Init+0x1ec>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a49      	ldr	r2, [pc, #292]	; (8004368 <HAL_GPIO_Init+0x2f8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <HAL_GPIO_Init+0x1e8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a48      	ldr	r2, [pc, #288]	; (800436c <HAL_GPIO_Init+0x2fc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_GPIO_Init+0x1e4>
 8004250:	2305      	movs	r3, #5
 8004252:	e00a      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 8004254:	2306      	movs	r3, #6
 8004256:	e008      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 8004258:	2304      	movs	r3, #4
 800425a:	e006      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 800425c:	2303      	movs	r3, #3
 800425e:	e004      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 8004260:	2302      	movs	r3, #2
 8004262:	e002      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_GPIO_Init+0x1fa>
 8004268:	2300      	movs	r3, #0
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	f002 0203 	and.w	r2, r2, #3
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	4093      	lsls	r3, r2
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800427a:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_GPIO_Init+0x2e8>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <HAL_GPIO_Init+0x300>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042ac:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_GPIO_Init+0x300>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042b2:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <HAL_GPIO_Init+0x300>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_GPIO_Init+0x300>)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_GPIO_Init+0x300>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_GPIO_Init+0x300>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_GPIO_Init+0x300>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_GPIO_Init+0x300>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3301      	adds	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f ae9d 	bne.w	8004080 <HAL_GPIO_Init+0x10>
  }
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40021000 	.word	0x40021000
 8004358:	40010000 	.word	0x40010000
 800435c:	48000400 	.word	0x48000400
 8004360:	48000800 	.word	0x48000800
 8004364:	48000c00 	.word	0x48000c00
 8004368:	48001000 	.word	0x48001000
 800436c:	48001400 	.word	0x48001400
 8004370:	40010400 	.word	0x40010400

08004374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e001      	b.n	8004396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
 80043b0:	4613      	mov	r3, r2
 80043b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b4:	787b      	ldrb	r3, [r7, #1]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	041a      	lsls	r2, r3, #16
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	43d9      	mvns	r1, r3
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	400b      	ands	r3, r1
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e081      	b.n	800451e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fcaa 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e006      	b.n	8004490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800448e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d104      	bne.n	80044a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b20      	cmp	r3, #32
 800453a:	d138      	bne.n	80045ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004546:	2302      	movs	r3, #2
 8004548:	e032      	b.n	80045b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2224      	movs	r2, #36	; 0x24
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004578:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d139      	bne.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045dc:	2302      	movs	r3, #2
 80045de:	e033      	b.n	8004648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800460e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d141      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004662:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d131      	bne.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004670:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004676:	4a46      	ldr	r2, [pc, #280]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004688:	4a41      	ldr	r2, [pc, #260]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800468e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2232      	movs	r2, #50	; 0x32
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	0c9b      	lsrs	r3, r3, #18
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a6:	e002      	b.n	80046ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d102      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f2      	bne.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046c2:	4b33      	ldr	r3, [pc, #204]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d158      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e057      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d4:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046da:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046e4:	e04d      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ec:	d141      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d131      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004702:	4a23      	ldr	r2, [pc, #140]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2232      	movs	r2, #50	; 0x32
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0c9b      	lsrs	r3, r3, #18
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004732:	e002      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d102      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f2      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d112      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e011      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004770:	e007      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800477a:	4a05      	ldr	r2, [pc, #20]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40007000 	.word	0x40007000
 8004794:	2000002c 	.word	0x2000002c
 8004798:	431bde83 	.word	0x431bde83

0800479c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047aa:	6093      	str	r3, [r2, #8]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40007000 	.word	0x40007000

080047bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e306      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047da:	4b97      	ldr	r3, [pc, #604]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e4:	4b94      	ldr	r3, [pc, #592]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d102      	bne.n	80047fa <HAL_RCC_OscConfig+0x3e>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_OscConfig+0x44>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05b      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e2e1      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x74>
 8004822:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a84      	ldr	r2, [pc, #528]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483a:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7e      	ldr	r2, [pc, #504]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b7c      	ldr	r3, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7b      	ldr	r2, [pc, #492]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a77      	ldr	r2, [pc, #476]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b75      	ldr	r3, [pc, #468]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a74      	ldr	r2, [pc, #464]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd fe06 	bl	8002484 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fd fe02 	bl	8002484 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e2a6      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xc0>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd fdf2 	bl	8002484 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fd fdee 	bl	8002484 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e292      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048b6:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048dc:	4b56      	ldr	r3, [pc, #344]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0x136>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_OscConfig+0x13c>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11f      	bne.n	8004938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x154>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e265      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b49      	ldr	r3, [pc, #292]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	4946      	ldr	r1, [pc, #280]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004924:	4b45      	ldr	r3, [pc, #276]	; (8004a3c <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fd5f 	bl	80023ec <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d043      	beq.n	80049bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e251      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d023      	beq.n	8004988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b3d      	ldr	r3, [pc, #244]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3c      	ldr	r2, [pc, #240]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd fd9a 	bl	8002484 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004954:	f7fd fd96 	bl	8002484 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e23a      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004966:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	492d      	ldr	r1, [pc, #180]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e01a      	b.n	80049be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 800498e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fd76 	bl	8002484 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499c:	f7fd fd72 	bl	8002484 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e216      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1e0>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d041      	beq.n	8004a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d8:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fd fd4f 	bl	8002484 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fd fd4b 	bl	8002484 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1ef      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ef      	beq.n	80049ea <HAL_RCC_OscConfig+0x22e>
 8004a0a:	e020      	b.n	8004a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fd32 	bl	8002484 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a22:	e00d      	b.n	8004a40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fd fd2e 	bl	8002484 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d906      	bls.n	8004a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1d2      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a40:	4b8c      	ldr	r3, [pc, #560]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ea      	bne.n	8004a24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80a6 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2b4>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x2b6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	4b7f      	ldr	r3, [pc, #508]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6593      	str	r3, [r2, #88]	; 0x58
 8004a82:	4b7c      	ldr	r3, [pc, #496]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	4b79      	ldr	r3, [pc, #484]	; (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d118      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9e:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a75      	ldr	r2, [pc, #468]	; (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fceb 	bl	8002484 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab2:	f7fd fce7 	bl	8002484 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e18b      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac4:	4b6c      	ldr	r3, [pc, #432]	; (8004c78 <HAL_RCC_OscConfig+0x4bc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d108      	bne.n	8004aea <HAL_RCC_OscConfig+0x32e>
 8004ad8:	4b66      	ldr	r3, [pc, #408]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	4a65      	ldr	r2, [pc, #404]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae8:	e024      	b.n	8004b34 <HAL_RCC_OscConfig+0x378>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d110      	bne.n	8004b14 <HAL_RCC_OscConfig+0x358>
 8004af2:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	4a5e      	ldr	r2, [pc, #376]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b02:	4b5c      	ldr	r3, [pc, #368]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	4a5a      	ldr	r2, [pc, #360]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b12:	e00f      	b.n	8004b34 <HAL_RCC_OscConfig+0x378>
 8004b14:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	4a56      	ldr	r2, [pc, #344]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b24:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	4a52      	ldr	r2, [pc, #328]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d016      	beq.n	8004b6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fd fca2 	bl	8002484 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fd fc9e 	bl	8002484 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e140      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5a:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ed      	beq.n	8004b44 <HAL_RCC_OscConfig+0x388>
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fc8b 	bl	8002484 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd fc87 	bl	8002484 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e129      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ed      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b96:	7ffb      	ldrb	r3, [r7, #31]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9c:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01c      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bbc:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc2:	4a2c      	ldr	r2, [pc, #176]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fc5a 	bl	8002484 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd4:	f7fd fc56 	bl	8002484 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0fa      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004be6:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x418>
 8004bf4:	e01b      	b.n	8004c2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fd fc3d 	bl	8002484 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c0e:	f7fd fc39 	bl	8002484 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0dd      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ef      	bne.n	8004c0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80d1 	beq.w	8004dda <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	f000 808b 	beq.w	8004d5c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d15e      	bne.n	8004d0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fc13 	bl	8002484 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	e00c      	b.n	8004c7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fd fc0f 	bl	8002484 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d905      	bls.n	8004c7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0b3      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ec      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c88:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <HAL_RCC_OscConfig+0x62c>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6a11      	ldr	r1, [r2, #32]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0112      	lsls	r2, r2, #4
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ca2:	0212      	lsls	r2, r2, #8
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004caa:	0852      	lsrs	r2, r2, #1
 8004cac:	3a01      	subs	r2, #1
 8004cae:	0552      	lsls	r2, r2, #21
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cb6:	0852      	lsrs	r2, r2, #1
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0652      	lsls	r2, r2, #25
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cc2:	06d2      	lsls	r2, r2, #27
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4947      	ldr	r1, [pc, #284]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a44      	ldr	r2, [pc, #272]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fbce 	bl	8002484 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd fbca 	bl	8002484 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e06e      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x530>
 8004d0a:	e066      	b.n	8004dda <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b35      	ldr	r3, [pc, #212]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a34      	ldr	r2, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d18:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d24:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fba6 	bl	8002484 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fd fba2 	bl	8002484 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e046      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4e:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x580>
 8004d5a:	e03e      	b.n	8004dda <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e039      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCC_OscConfig+0x628>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0203 	and.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d12c      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	3b01      	subs	r3, #1
 8004d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d123      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d113      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	019f800c 	.word	0x019f800c

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e11e      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b91      	ldr	r3, [pc, #580]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d910      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b8e      	ldr	r3, [pc, #568]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 020f 	bic.w	r2, r3, #15
 8004e1a:	498c      	ldr	r1, [pc, #560]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b8a      	ldr	r3, [pc, #552]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e106      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d073      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d129      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e48:	4b81      	ldr	r3, [pc, #516]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0f4      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e58:	f000 f99c 	bl	8005194 <RCC_GetSysClockFreqFromPLLSource>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4a7c      	ldr	r2, [pc, #496]	; (8005054 <HAL_RCC_ClockConfig+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d93f      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e66:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d033      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d12f      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e86:	4b72      	ldr	r3, [pc, #456]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8e:	4a70      	ldr	r2, [pc, #448]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e024      	b.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0c6      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb4:	4b66      	ldr	r3, [pc, #408]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0be      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ec4:	f000 f8ce 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4a61      	ldr	r2, [pc, #388]	; (8005054 <HAL_RCC_ClockConfig+0x268>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d909      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ed2:	4b5f      	ldr	r3, [pc, #380]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eda:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4957      	ldr	r1, [pc, #348]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fd fac4 	bl	8002484 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fd fac0 	bl	8002484 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e095      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f40:	4b43      	ldr	r3, [pc, #268]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a42      	ldr	r2, [pc, #264]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f58:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f60:	4a3b      	ldr	r2, [pc, #236]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4936      	ldr	r1, [pc, #216]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d105      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f82:	4b33      	ldr	r3, [pc, #204]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4a32      	ldr	r2, [pc, #200]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f8e:	4b2f      	ldr	r3, [pc, #188]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d21d      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 020f 	bic.w	r2, r3, #15
 8004fa4:	4929      	ldr	r1, [pc, #164]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fac:	f7fd fa6a 	bl	8002484 <HAL_GetTick>
 8004fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb4:	f7fd fa66 	bl	8002484 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e03b      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1ed      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4917      	ldr	r1, [pc, #92]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	490f      	ldr	r1, [pc, #60]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005016:	f000 f825 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800501a:	4602      	mov	r2, r0
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	490c      	ldr	r1, [pc, #48]	; (8005058 <HAL_RCC_ClockConfig+0x26c>)
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x270>)
 8005034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd f9d6 	bl	80023ec <HAL_InitTick>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40022000 	.word	0x40022000
 8005050:	40021000 	.word	0x40021000
 8005054:	04c4b400 	.word	0x04c4b400
 8005058:	0800adbc 	.word	0x0800adbc
 800505c:	2000002c 	.word	0x2000002c
 8005060:	20000030 	.word	0x20000030

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b04      	cmp	r3, #4
 8005074:	d102      	bne.n	800507c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e047      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d102      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e03e      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b0c      	cmp	r3, #12
 8005098:	d136      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	3301      	adds	r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d10c      	bne.n	80050d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b8:	4a19      	ldr	r2, [pc, #100]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68d2      	ldr	r2, [r2, #12]
 80050c4:	0a12      	lsrs	r2, r2, #8
 80050c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	617b      	str	r3, [r7, #20]
      break;
 80050d0:	e00c      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050dc:	68d2      	ldr	r2, [r2, #12]
 80050de:	0a12      	lsrs	r2, r2, #8
 80050e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
      break;
 80050ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	0e5b      	lsrs	r3, r3, #25
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e001      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800510c:	693b      	ldr	r3, [r7, #16]
}
 800510e:	4618      	mov	r0, r3
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	00f42400 	.word	0x00f42400

08005124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <HAL_RCC_GetHCLKFreq+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	2000002c 	.word	0x2000002c

0800513c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005140:	f7ff fff0 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	0800adcc 	.word	0x0800adcc

08005168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800516c:	f7ff ffda 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	0adb      	lsrs	r3, r3, #11
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4904      	ldr	r1, [pc, #16]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40021000 	.word	0x40021000
 8005190:	0800adcc 	.word	0x0800adcc

08005194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d10c      	bne.n	80051d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c2:	68d2      	ldr	r2, [r2, #12]
 80051c4:	0a12      	lsrs	r2, r2, #8
 80051c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	617b      	str	r3, [r7, #20]
    break;
 80051d0:	e00c      	b.n	80051ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051d2:	4a11      	ldr	r2, [pc, #68]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051dc:	68d2      	ldr	r2, [r2, #12]
 80051de:	0a12      	lsrs	r2, r2, #8
 80051e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
    break;
 80051ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0e5b      	lsrs	r3, r3, #25
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	3301      	adds	r3, #1
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005206:	687b      	ldr	r3, [r7, #4]
}
 8005208:	4618      	mov	r0, r3
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40021000 	.word	0x40021000
 8005218:	00f42400 	.word	0x00f42400

0800521c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005224:	2300      	movs	r3, #0
 8005226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005228:	2300      	movs	r3, #0
 800522a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8098 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523e:	4b43      	ldr	r3, [pc, #268]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4b40      	ldr	r3, [pc, #256]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4a3f      	ldr	r2, [pc, #252]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005266:	4b3a      	ldr	r3, [pc, #232]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a39      	ldr	r2, [pc, #228]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005272:	f7fd f907 	bl	8002484 <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005278:	e009      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fd f903 	bl	8002484 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d902      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	74fb      	strb	r3, [r7, #19]
        break;
 800528c:	e005      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528e:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ef      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d159      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d019      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	4a1f      	ldr	r2, [pc, #124]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b1c      	ldr	r3, [pc, #112]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fd f8c3 	bl	8002484 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	e00b      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fd f8bf 	bl	8002484 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d902      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	74fb      	strb	r3, [r7, #19]
            break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ec      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	74bb      	strb	r3, [r7, #18]
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4ba7      	ldr	r3, [pc, #668]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	4aa6      	ldr	r2, [pc, #664]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005376:	4ba1      	ldr	r3, [pc, #644]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 0203 	bic.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	499d      	ldr	r1, [pc, #628]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4b98      	ldr	r3, [pc, #608]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4995      	ldr	r1, [pc, #596]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ba:	4b90      	ldr	r3, [pc, #576]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	498c      	ldr	r1, [pc, #560]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b87      	ldr	r3, [pc, #540]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4984      	ldr	r1, [pc, #528]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fe:	4b7f      	ldr	r3, [pc, #508]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	497b      	ldr	r1, [pc, #492]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	4973      	ldr	r1, [pc, #460]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005442:	4b6e      	ldr	r3, [pc, #440]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	496a      	ldr	r1, [pc, #424]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005464:	4b65      	ldr	r3, [pc, #404]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	4962      	ldr	r1, [pc, #392]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005486:	4b5d      	ldr	r3, [pc, #372]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	4959      	ldr	r1, [pc, #356]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a8:	4b54      	ldr	r3, [pc, #336]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4951      	ldr	r1, [pc, #324]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ca:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4948      	ldr	r1, [pc, #288]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e8:	d105      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ea:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a43      	ldr	r2, [pc, #268]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d015      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	493a      	ldr	r1, [pc, #232]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005520:	d105      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a35      	ldr	r2, [pc, #212]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d015      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800553a:	4b30      	ldr	r3, [pc, #192]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	492c      	ldr	r1, [pc, #176]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005558:	d105      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800555a:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005564:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d015      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	491e      	ldr	r1, [pc, #120]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005590:	d105      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	4910      	ldr	r1, [pc, #64]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c8:	d105      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ca:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4a0b      	ldr	r2, [pc, #44]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	4902      	ldr	r1, [pc, #8]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	e001      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055fc:	40021000 	.word	0x40021000
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005608:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a20      	ldr	r2, [pc, #128]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	4918      	ldr	r1, [pc, #96]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a12      	ldr	r2, [pc, #72]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800565a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a04      	ldr	r2, [pc, #16]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005684:	7cbb      	ldrb	r3, [r7, #18]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e09d      	b.n	80057e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fc5c 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570c:	d902      	bls.n	8005714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e002      	b.n	800571a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005722:	d007      	beq.n	8005734 <HAL_SPI_Init+0xa0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	f003 0204 	and.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057b0:	ea42 0103 	orr.w	r1, r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e049      	b.n	8005890 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fc fc0b 	bl	800202c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f000 fe69 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e049      	b.n	800593e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f841 	bl	8005946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fe12 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x24>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e03c      	b.n	80059fa <HAL_TIM_PWM_Start+0x9e>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d109      	bne.n	800599a <HAL_TIM_PWM_Start+0x3e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e02f      	b.n	80059fa <HAL_TIM_PWM_Start+0x9e>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x58>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e022      	b.n	80059fa <HAL_TIM_PWM_Start+0x9e>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d109      	bne.n	80059ce <HAL_TIM_PWM_Start+0x72>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e015      	b.n	80059fa <HAL_TIM_PWM_Start+0x9e>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x8c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e008      	b.n	80059fa <HAL_TIM_PWM_Start+0x9e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0a1      	b.n	8005b46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xb6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a10:	e023      	b.n	8005a5a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0xc6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a20:	e01b      	b.n	8005a5a <HAL_TIM_PWM_Start+0xfe>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0xd6>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a30:	e013      	b.n	8005a5a <HAL_TIM_PWM_Start+0xfe>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0xe6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a40:	e00b      	b.n	8005a5a <HAL_TIM_PWM_Start+0xfe>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0xf6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a50:	e003      	b.n	8005a5a <HAL_TIM_PWM_Start+0xfe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fad4 	bl	8007010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a38      	ldr	r2, [pc, #224]	; (8005b50 <HAL_TIM_PWM_Start+0x1f4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x148>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a37      	ldr	r2, [pc, #220]	; (8005b54 <HAL_TIM_PWM_Start+0x1f8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x148>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a35      	ldr	r2, [pc, #212]	; (8005b58 <HAL_TIM_PWM_Start+0x1fc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x148>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a34      	ldr	r2, [pc, #208]	; (8005b5c <HAL_TIM_PWM_Start+0x200>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x148>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a32      	ldr	r2, [pc, #200]	; (8005b60 <HAL_TIM_PWM_Start+0x204>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_PWM_Start+0x148>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a31      	ldr	r2, [pc, #196]	; (8005b64 <HAL_TIM_PWM_Start+0x208>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_PWM_Start+0x14c>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_TIM_PWM_Start+0x14e>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a23      	ldr	r2, [pc, #140]	; (8005b50 <HAL_TIM_PWM_Start+0x1f4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01d      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d018      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <HAL_TIM_PWM_Start+0x20c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <HAL_TIM_PWM_Start+0x210>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <HAL_TIM_PWM_Start+0x1f8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_TIM_PWM_Start+0x1fc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x1a8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_TIM_PWM_Start+0x208>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d115      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_TIM_PWM_Start+0x214>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d015      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x1e6>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d011      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e008      	b.n	8005b42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	40015000 	.word	0x40015000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	00010007 	.word	0x00010007

08005b74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e049      	b.n	8005c1a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f841 	bl	8005c22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 fca4 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d122      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d11b      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f06f 0202 	mvn.w	r2, #2
 8005c62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fc23 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8005c7e:	e005      	b.n	8005c8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fc15 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fc26 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d122      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d11b      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0204 	mvn.w	r2, #4
 8005cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fbf9 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8005cd2:	e005      	b.n	8005ce0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fbeb 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fbfc 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d122      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d11b      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0208 	mvn.w	r2, #8
 8005d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fbcf 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8005d26:	e005      	b.n	8005d34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fbc1 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fbd2 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d122      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d11b      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0210 	mvn.w	r2, #16
 8005d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2208      	movs	r2, #8
 8005d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fba5 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8005d7a:	e005      	b.n	8005d88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fb97 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fba8 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d10e      	bne.n	8005dba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0201 	mvn.w	r2, #1
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb71 	bl	800649c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d10e      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d107      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 f9d3 	bl	800718c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df4:	d10e      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f9c6 	bl	80071a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d10e      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d107      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb56 	bl	80064ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0220 	mvn.w	r2, #32
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f986 	bl	8007178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7a:	d10f      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 f98c 	bl	80071b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eaa:	d10f      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 f97e 	bl	80071c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eda:	d10f      	bne.n	8005efc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f970 	bl	80071dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f0a:	d10f      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f962 	bl	80071f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e088      	b.n	8006064 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f000 fe8e 	bl	8006c90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 020c 	bic.w	r2, r2, #12
 8005f82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	619a      	str	r2, [r3, #24]
 8005f96:	e060      	b.n	800605a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d11c      	bne.n	8005fd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6819      	ldr	r1, [r3, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f000 ff0c 	bl	8006dca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6999      	ldr	r1, [r3, #24]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	619a      	str	r2, [r3, #24]
 8005fd6:	e040      	b.n	800605a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d11b      	bne.n	8006016 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6819      	ldr	r1, [r3, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f000 ff59 	bl	8006ea4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 020c 	bic.w	r2, r2, #12
 8006000:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69d9      	ldr	r1, [r3, #28]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	61da      	str	r2, [r3, #28]
 8006014:	e021      	b.n	800605a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d11c      	bne.n	8006056 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f000 ff76 	bl	8006f1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69da      	ldr	r2, [r3, #28]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800603e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69d9      	ldr	r1, [r3, #28]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
 8006054:	e001      	b.n	800605a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ff      	b.n	800628a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b14      	cmp	r3, #20
 8006096:	f200 80f0 	bhi.w	800627a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	0800627b 	.word	0x0800627b
 80060a8:	0800627b 	.word	0x0800627b
 80060ac:	0800627b 	.word	0x0800627b
 80060b0:	08006135 	.word	0x08006135
 80060b4:	0800627b 	.word	0x0800627b
 80060b8:	0800627b 	.word	0x0800627b
 80060bc:	0800627b 	.word	0x0800627b
 80060c0:	08006177 	.word	0x08006177
 80060c4:	0800627b 	.word	0x0800627b
 80060c8:	0800627b 	.word	0x0800627b
 80060cc:	0800627b 	.word	0x0800627b
 80060d0:	080061b7 	.word	0x080061b7
 80060d4:	0800627b 	.word	0x0800627b
 80060d8:	0800627b 	.word	0x0800627b
 80060dc:	0800627b 	.word	0x0800627b
 80060e0:	080061f9 	.word	0x080061f9
 80060e4:	0800627b 	.word	0x0800627b
 80060e8:	0800627b 	.word	0x0800627b
 80060ec:	0800627b 	.word	0x0800627b
 80060f0:	08006239 	.word	0x08006239
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa9e 	bl	800663c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	619a      	str	r2, [r3, #24]
      break;
 8006132:	e0a5      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fb18 	bl	8006770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e084      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fb8b 	bl	8006898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	61da      	str	r2, [r3, #28]
      break;
 80061b4:	e064      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fbfd 	bl	80069bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
      break;
 80061f6:	e043      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fc70 	bl	8006ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0208 	orr.w	r2, r2, #8
 8006212:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0204 	bic.w	r2, r2, #4
 8006222:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006236:	e023      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fcba 	bl	8006bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006252:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006278:	e002      	b.n	8006280 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
      break;
 800627e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIM_ConfigClockSource+0x1c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0e6      	b.n	800647e <HAL_TIM_ConfigClockSource+0x1ea>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a67      	ldr	r2, [pc, #412]	; (8006488 <HAL_TIM_ConfigClockSource+0x1f4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f000 80b1 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 80062f0:	4a65      	ldr	r2, [pc, #404]	; (8006488 <HAL_TIM_ConfigClockSource+0x1f4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f200 80b6 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 80062f8:	4a64      	ldr	r2, [pc, #400]	; (800648c <HAL_TIM_ConfigClockSource+0x1f8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f000 80a9 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006300:	4a62      	ldr	r2, [pc, #392]	; (800648c <HAL_TIM_ConfigClockSource+0x1f8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f200 80ae 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006308:	4a61      	ldr	r2, [pc, #388]	; (8006490 <HAL_TIM_ConfigClockSource+0x1fc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 80a1 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006310:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 80a6 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006318:	4a5e      	ldr	r2, [pc, #376]	; (8006494 <HAL_TIM_ConfigClockSource+0x200>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 8099 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006320:	4a5c      	ldr	r2, [pc, #368]	; (8006494 <HAL_TIM_ConfigClockSource+0x200>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f200 809e 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006328:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_TIM_ConfigClockSource+0x204>)
 800632a:	4293      	cmp	r3, r2
 800632c:	f000 8091 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006330:	4a59      	ldr	r2, [pc, #356]	; (8006498 <HAL_TIM_ConfigClockSource+0x204>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f200 8096 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006338:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800633c:	f000 8089 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006340:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006344:	f200 808e 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d03e      	beq.n	80063cc <HAL_TIM_ConfigClockSource+0x138>
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	f200 8087 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	f000 8086 	beq.w	800646a <HAL_TIM_ConfigClockSource+0x1d6>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d87f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d01a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x10a>
 8006368:	2b70      	cmp	r3, #112	; 0x70
 800636a:	d87b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d050      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x17e>
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d877      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d03c      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006378:	2b50      	cmp	r3, #80	; 0x50
 800637a:	d873      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d058      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x19e>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d86f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d064      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d86b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d060      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d867      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05c      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d05a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1be>
 800639c:	e062      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f000 fe0f 	bl	8006fd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	609a      	str	r2, [r3, #8]
      break;
 80063ca:	e04f      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f000 fdf8 	bl	8006fd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e03c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 fcb4 	bl	8006d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fdc3 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006410:	e02c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	461a      	mov	r2, r3
 8006420:	f000 fd10 	bl	8006e44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2160      	movs	r1, #96	; 0x60
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fdb3 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006430:	e01c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f000 fc94 	bl	8006d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fda3 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006450:	e00c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 fd9a 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006462:	e003      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	e000      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800646a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	00100070 	.word	0x00100070
 800648c:	00100050 	.word	0x00100050
 8006490:	00100040 	.word	0x00100040
 8006494:	00100030 	.word	0x00100030
 8006498:	00100020 	.word	0x00100020

0800649c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a42      	ldr	r2, [pc, #264]	; (800661c <TIM_Base_SetConfig+0x11c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d00f      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3f      	ldr	r2, [pc, #252]	; (8006620 <TIM_Base_SetConfig+0x120>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3e      	ldr	r2, [pc, #248]	; (8006624 <TIM_Base_SetConfig+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a3d      	ldr	r2, [pc, #244]	; (8006628 <TIM_Base_SetConfig+0x128>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a3c      	ldr	r2, [pc, #240]	; (800662c <TIM_Base_SetConfig+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d108      	bne.n	8006552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a31      	ldr	r2, [pc, #196]	; (800661c <TIM_Base_SetConfig+0x11c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01f      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d01b      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2e      	ldr	r2, [pc, #184]	; (8006620 <TIM_Base_SetConfig+0x120>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d017      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <TIM_Base_SetConfig+0x124>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <TIM_Base_SetConfig+0x128>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00f      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <TIM_Base_SetConfig+0x130>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00b      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <TIM_Base_SetConfig+0x134>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d007      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <TIM_Base_SetConfig+0x138>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a25      	ldr	r2, [pc, #148]	; (800662c <TIM_Base_SetConfig+0x12c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d108      	bne.n	80065ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <TIM_Base_SetConfig+0x11c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <TIM_Base_SetConfig+0x100>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <TIM_Base_SetConfig+0x128>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00f      	beq.n	8006600 <TIM_Base_SetConfig+0x100>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <TIM_Base_SetConfig+0x130>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_Base_SetConfig+0x100>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a12      	ldr	r2, [pc, #72]	; (8006634 <TIM_Base_SetConfig+0x134>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_Base_SetConfig+0x100>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a11      	ldr	r2, [pc, #68]	; (8006638 <TIM_Base_SetConfig+0x138>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_Base_SetConfig+0x100>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a0c      	ldr	r2, [pc, #48]	; (800662c <TIM_Base_SetConfig+0x12c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d103      	bne.n	8006608 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	615a      	str	r2, [r3, #20]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40013400 	.word	0x40013400
 800662c:	40015000 	.word	0x40015000
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800

0800663c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0302 	bic.w	r3, r3, #2
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a30      	ldr	r2, [pc, #192]	; (8006758 <TIM_OC1_SetConfig+0x11c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <TIM_OC1_SetConfig+0x88>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a2f      	ldr	r2, [pc, #188]	; (800675c <TIM_OC1_SetConfig+0x120>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_OC1_SetConfig+0x88>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2e      	ldr	r2, [pc, #184]	; (8006760 <TIM_OC1_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC1_SetConfig+0x88>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2d      	ldr	r2, [pc, #180]	; (8006764 <TIM_OC1_SetConfig+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC1_SetConfig+0x88>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2c      	ldr	r2, [pc, #176]	; (8006768 <TIM_OC1_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC1_SetConfig+0x88>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2b      	ldr	r2, [pc, #172]	; (800676c <TIM_OC1_SetConfig+0x130>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10c      	bne.n	80066de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0308 	bic.w	r3, r3, #8
 80066ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 0304 	bic.w	r3, r3, #4
 80066dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <TIM_OC1_SetConfig+0x11c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <TIM_OC1_SetConfig+0xd2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <TIM_OC1_SetConfig+0x120>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00f      	beq.n	800670e <TIM_OC1_SetConfig+0xd2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <TIM_OC1_SetConfig+0x124>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00b      	beq.n	800670e <TIM_OC1_SetConfig+0xd2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1a      	ldr	r2, [pc, #104]	; (8006764 <TIM_OC1_SetConfig+0x128>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d007      	beq.n	800670e <TIM_OC1_SetConfig+0xd2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a19      	ldr	r2, [pc, #100]	; (8006768 <TIM_OC1_SetConfig+0x12c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC1_SetConfig+0xd2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a18      	ldr	r2, [pc, #96]	; (800676c <TIM_OC1_SetConfig+0x130>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800
 800676c:	40015000 	.word	0x40015000

08006770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f023 0210 	bic.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0320 	bic.w	r3, r3, #32
 80067be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a2c      	ldr	r2, [pc, #176]	; (8006880 <TIM_OC2_SetConfig+0x110>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_OC2_SetConfig+0x74>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2b      	ldr	r2, [pc, #172]	; (8006884 <TIM_OC2_SetConfig+0x114>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC2_SetConfig+0x74>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2a      	ldr	r2, [pc, #168]	; (8006888 <TIM_OC2_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10d      	bne.n	8006800 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <TIM_OC2_SetConfig+0x110>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <TIM_OC2_SetConfig+0xc0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1e      	ldr	r2, [pc, #120]	; (8006884 <TIM_OC2_SetConfig+0x114>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00f      	beq.n	8006830 <TIM_OC2_SetConfig+0xc0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a1e      	ldr	r2, [pc, #120]	; (800688c <TIM_OC2_SetConfig+0x11c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00b      	beq.n	8006830 <TIM_OC2_SetConfig+0xc0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <TIM_OC2_SetConfig+0x120>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <TIM_OC2_SetConfig+0xc0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <TIM_OC2_SetConfig+0x124>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_OC2_SetConfig+0xc0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <TIM_OC2_SetConfig+0x118>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d113      	bne.n	8006858 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40015000 	.word	0x40015000
 800688c:	40014000 	.word	0x40014000
 8006890:	40014400 	.word	0x40014400
 8006894:	40014800 	.word	0x40014800

08006898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2b      	ldr	r2, [pc, #172]	; (80069a4 <TIM_OC3_SetConfig+0x10c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_OC3_SetConfig+0x72>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2a      	ldr	r2, [pc, #168]	; (80069a8 <TIM_OC3_SetConfig+0x110>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC3_SetConfig+0x72>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a29      	ldr	r2, [pc, #164]	; (80069ac <TIM_OC3_SetConfig+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10d      	bne.n	8006926 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <TIM_OC3_SetConfig+0x10c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <TIM_OC3_SetConfig+0xbe>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <TIM_OC3_SetConfig+0x110>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00f      	beq.n	8006956 <TIM_OC3_SetConfig+0xbe>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <TIM_OC3_SetConfig+0x118>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00b      	beq.n	8006956 <TIM_OC3_SetConfig+0xbe>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <TIM_OC3_SetConfig+0x11c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <TIM_OC3_SetConfig+0xbe>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <TIM_OC3_SetConfig+0x120>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC3_SetConfig+0xbe>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a16      	ldr	r2, [pc, #88]	; (80069ac <TIM_OC3_SetConfig+0x114>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d113      	bne.n	800697e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40013400 	.word	0x40013400
 80069ac:	40015000 	.word	0x40015000
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	031b      	lsls	r3, r3, #12
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2c      	ldr	r2, [pc, #176]	; (8006acc <TIM_OC4_SetConfig+0x110>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC4_SetConfig+0x74>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <TIM_OC4_SetConfig+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC4_SetConfig+0x74>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <TIM_OC4_SetConfig+0x118>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10d      	bne.n	8006a4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	031b      	lsls	r3, r3, #12
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <TIM_OC4_SetConfig+0x110>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d013      	beq.n	8006a7c <TIM_OC4_SetConfig+0xc0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <TIM_OC4_SetConfig+0x114>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00f      	beq.n	8006a7c <TIM_OC4_SetConfig+0xc0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <TIM_OC4_SetConfig+0x11c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00b      	beq.n	8006a7c <TIM_OC4_SetConfig+0xc0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <TIM_OC4_SetConfig+0x120>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d007      	beq.n	8006a7c <TIM_OC4_SetConfig+0xc0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ae0 <TIM_OC4_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_OC4_SetConfig+0xc0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <TIM_OC4_SetConfig+0x118>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d113      	bne.n	8006aa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	019b      	lsls	r3, r3, #6
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40015000 	.word	0x40015000
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800

08006ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <TIM_OC5_SetConfig+0xbc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_OC5_SetConfig+0x82>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a18      	ldr	r2, [pc, #96]	; (8006ba4 <TIM_OC5_SetConfig+0xc0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_OC5_SetConfig+0x82>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <TIM_OC5_SetConfig+0xc4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_OC5_SetConfig+0x82>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <TIM_OC5_SetConfig+0xc8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_OC5_SetConfig+0x82>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <TIM_OC5_SetConfig+0xcc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC5_SetConfig+0x82>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC5_SetConfig+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d109      	bne.n	8006b7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	40015000 	.word	0x40015000

08006bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	051b      	lsls	r3, r3, #20
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <TIM_OC6_SetConfig+0xc0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_OC6_SetConfig+0x84>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <TIM_OC6_SetConfig+0xc4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00f      	beq.n	8006c3c <TIM_OC6_SetConfig+0x84>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <TIM_OC6_SetConfig+0xc8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_OC6_SetConfig+0x84>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <TIM_OC6_SetConfig+0xcc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_OC6_SetConfig+0x84>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <TIM_OC6_SetConfig+0xd0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC6_SetConfig+0x84>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <TIM_OC6_SetConfig+0xd4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	40015000 	.word	0x40015000

08006c90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	; (8006d54 <TIM_TI1_SetConfig+0xc4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d017      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d013      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a23      	ldr	r2, [pc, #140]	; (8006d58 <TIM_TI1_SetConfig+0xc8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00f      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a22      	ldr	r2, [pc, #136]	; (8006d5c <TIM_TI1_SetConfig+0xcc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a21      	ldr	r2, [pc, #132]	; (8006d60 <TIM_TI1_SetConfig+0xd0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <TIM_TI1_SetConfig+0xd4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_TI1_SetConfig+0x5e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <TIM_TI1_SetConfig+0xd8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <TIM_TI1_SetConfig+0x62>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <TIM_TI1_SetConfig+0x64>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e003      	b.n	8006d12 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f023 030a 	bic.w	r3, r3, #10
 8006d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f003 030a 	and.w	r3, r3, #10
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40013400 	.word	0x40013400
 8006d64:	40014000 	.word	0x40014000
 8006d68:	40015000 	.word	0x40015000

08006d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0201 	bic.w	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f023 030a 	bic.w	r3, r3, #10
 8006da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f023 0210 	bic.w	r2, r3, #16
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	031b      	lsls	r3, r3, #12
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f023 0210 	bic.w	r2, r3, #16
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	031b      	lsls	r3, r3, #12
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 0303 	bic.w	r3, r3, #3
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	031b      	lsls	r3, r3, #12
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	031b      	lsls	r3, r3, #12
 8006f74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	621a      	str	r2, [r3, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f043 0307 	orr.w	r3, r3, #7
 8006fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	021a      	lsls	r2, r3, #8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f003 031f 	and.w	r3, r3, #31
 8007022:	2201      	movs	r2, #1
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a1a      	ldr	r2, [r3, #32]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	431a      	orrs	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007070:	2302      	movs	r3, #2
 8007072:	e06f      	b.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a31      	ldr	r2, [pc, #196]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a30      	ldr	r2, [pc, #192]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2e      	ldr	r2, [pc, #184]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d108      	bne.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d018      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a11      	ldr	r2, [pc, #68]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d10c      	bne.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800712e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40013400 	.word	0x40013400
 8007168:	40015000 	.word	0x40015000
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40014000 	.word	0x40014000

08007178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e042      	b.n	800729c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fa fe63 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2224      	movs	r2, #36	; 0x24
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8c2 	bl	80073d0 <UART_SetConfig>
 800724c:	4603      	mov	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e022      	b.n	800729c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fbb2 	bl	80079c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc39 	bl	8007b0c <UART_CheckIdleState>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	f040 8083 	bne.w	80073c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_UART_Transmit+0x28>
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e07b      	b.n	80073c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_UART_Transmit+0x3a>
 80072da:	2302      	movs	r3, #2
 80072dc:	e074      	b.n	80073c8 <HAL_UART_Transmit+0x124>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2221      	movs	r2, #33	; 0x21
 80072f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072f6:	f7fb f8c5 	bl	8002484 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007314:	d108      	bne.n	8007328 <HAL_UART_Transmit+0x84>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e003      	b.n	8007330 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007338:	e02c      	b.n	8007394 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2200      	movs	r2, #0
 8007342:	2180      	movs	r1, #128	; 0x80
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fc2c 	bl	8007ba2 <UART_WaitOnFlagUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e039      	b.n	80073c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3302      	adds	r3, #2
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	e007      	b.n	8007382 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1cc      	bne.n	800733a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 fbf9 	bl	8007ba2 <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e006      	b.n	80073c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e000      	b.n	80073c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80073c6:	2302      	movs	r3, #2
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d4:	b08c      	sub	sp, #48	; 0x30
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4baa      	ldr	r3, [pc, #680]	; (80076a8 <UART_SetConfig+0x2d8>)
 8007400:	4013      	ands	r3, r2
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007408:	430b      	orrs	r3, r1
 800740a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a9f      	ldr	r2, [pc, #636]	; (80076ac <UART_SetConfig+0x2dc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007438:	4313      	orrs	r3, r2
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007450:	430b      	orrs	r3, r1
 8007452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	f023 010f 	bic.w	r1, r3, #15
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a90      	ldr	r2, [pc, #576]	; (80076b0 <UART_SetConfig+0x2e0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d125      	bne.n	80074c0 <UART_SetConfig+0xf0>
 8007474:	4b8f      	ldr	r3, [pc, #572]	; (80076b4 <UART_SetConfig+0x2e4>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d81a      	bhi.n	80074b8 <UART_SetConfig+0xe8>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <UART_SetConfig+0xb8>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	08007499 	.word	0x08007499
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074b1 	.word	0x080074b1
 8007498:	2301      	movs	r3, #1
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749e:	e116      	b.n	80076ce <UART_SetConfig+0x2fe>
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e112      	b.n	80076ce <UART_SetConfig+0x2fe>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e10e      	b.n	80076ce <UART_SetConfig+0x2fe>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e10a      	b.n	80076ce <UART_SetConfig+0x2fe>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e106      	b.n	80076ce <UART_SetConfig+0x2fe>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a7c      	ldr	r2, [pc, #496]	; (80076b8 <UART_SetConfig+0x2e8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d138      	bne.n	800753c <UART_SetConfig+0x16c>
 80074ca:	4b7a      	ldr	r3, [pc, #488]	; (80076b4 <UART_SetConfig+0x2e4>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d82d      	bhi.n	8007534 <UART_SetConfig+0x164>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x110>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007515 	.word	0x08007515
 80074e4:	08007535 	.word	0x08007535
 80074e8:	08007535 	.word	0x08007535
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007525 	.word	0x08007525
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007535 	.word	0x08007535
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007535 	.word	0x08007535
 8007508:	08007535 	.word	0x08007535
 800750c:	08007535 	.word	0x08007535
 8007510:	0800752d 	.word	0x0800752d
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e0d8      	b.n	80076ce <UART_SetConfig+0x2fe>
 800751c:	2302      	movs	r3, #2
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e0d4      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e0d0      	b.n	80076ce <UART_SetConfig+0x2fe>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007532:	e0cc      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753a:	e0c8      	b.n	80076ce <UART_SetConfig+0x2fe>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a5e      	ldr	r2, [pc, #376]	; (80076bc <UART_SetConfig+0x2ec>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d125      	bne.n	8007592 <UART_SetConfig+0x1c2>
 8007546:	4b5b      	ldr	r3, [pc, #364]	; (80076b4 <UART_SetConfig+0x2e4>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007550:	2b30      	cmp	r3, #48	; 0x30
 8007552:	d016      	beq.n	8007582 <UART_SetConfig+0x1b2>
 8007554:	2b30      	cmp	r3, #48	; 0x30
 8007556:	d818      	bhi.n	800758a <UART_SetConfig+0x1ba>
 8007558:	2b20      	cmp	r3, #32
 800755a:	d00a      	beq.n	8007572 <UART_SetConfig+0x1a2>
 800755c:	2b20      	cmp	r3, #32
 800755e:	d814      	bhi.n	800758a <UART_SetConfig+0x1ba>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <UART_SetConfig+0x19a>
 8007564:	2b10      	cmp	r3, #16
 8007566:	d008      	beq.n	800757a <UART_SetConfig+0x1aa>
 8007568:	e00f      	b.n	800758a <UART_SetConfig+0x1ba>
 800756a:	2300      	movs	r3, #0
 800756c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007570:	e0ad      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007572:	2302      	movs	r3, #2
 8007574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007578:	e0a9      	b.n	80076ce <UART_SetConfig+0x2fe>
 800757a:	2304      	movs	r3, #4
 800757c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007580:	e0a5      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007582:	2308      	movs	r3, #8
 8007584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007588:	e0a1      	b.n	80076ce <UART_SetConfig+0x2fe>
 800758a:	2310      	movs	r3, #16
 800758c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007590:	e09d      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4a      	ldr	r2, [pc, #296]	; (80076c0 <UART_SetConfig+0x2f0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d125      	bne.n	80075e8 <UART_SetConfig+0x218>
 800759c:	4b45      	ldr	r3, [pc, #276]	; (80076b4 <UART_SetConfig+0x2e4>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075a6:	2bc0      	cmp	r3, #192	; 0xc0
 80075a8:	d016      	beq.n	80075d8 <UART_SetConfig+0x208>
 80075aa:	2bc0      	cmp	r3, #192	; 0xc0
 80075ac:	d818      	bhi.n	80075e0 <UART_SetConfig+0x210>
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d00a      	beq.n	80075c8 <UART_SetConfig+0x1f8>
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d814      	bhi.n	80075e0 <UART_SetConfig+0x210>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <UART_SetConfig+0x1f0>
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d008      	beq.n	80075d0 <UART_SetConfig+0x200>
 80075be:	e00f      	b.n	80075e0 <UART_SetConfig+0x210>
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e082      	b.n	80076ce <UART_SetConfig+0x2fe>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e07e      	b.n	80076ce <UART_SetConfig+0x2fe>
 80075d0:	2304      	movs	r3, #4
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075d6:	e07a      	b.n	80076ce <UART_SetConfig+0x2fe>
 80075d8:	2308      	movs	r3, #8
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e076      	b.n	80076ce <UART_SetConfig+0x2fe>
 80075e0:	2310      	movs	r3, #16
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e072      	b.n	80076ce <UART_SetConfig+0x2fe>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a35      	ldr	r2, [pc, #212]	; (80076c4 <UART_SetConfig+0x2f4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d12a      	bne.n	8007648 <UART_SetConfig+0x278>
 80075f2:	4b30      	ldr	r3, [pc, #192]	; (80076b4 <UART_SetConfig+0x2e4>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007600:	d01a      	beq.n	8007638 <UART_SetConfig+0x268>
 8007602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007606:	d81b      	bhi.n	8007640 <UART_SetConfig+0x270>
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d00c      	beq.n	8007628 <UART_SetConfig+0x258>
 800760e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007612:	d815      	bhi.n	8007640 <UART_SetConfig+0x270>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <UART_SetConfig+0x250>
 8007618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761c:	d008      	beq.n	8007630 <UART_SetConfig+0x260>
 800761e:	e00f      	b.n	8007640 <UART_SetConfig+0x270>
 8007620:	2300      	movs	r3, #0
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007626:	e052      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007628:	2302      	movs	r3, #2
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762e:	e04e      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007636:	e04a      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e046      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e042      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <UART_SetConfig+0x2dc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d13a      	bne.n	80076c8 <UART_SetConfig+0x2f8>
 8007652:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <UART_SetConfig+0x2e4>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800765c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007660:	d01a      	beq.n	8007698 <UART_SetConfig+0x2c8>
 8007662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007666:	d81b      	bhi.n	80076a0 <UART_SetConfig+0x2d0>
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766c:	d00c      	beq.n	8007688 <UART_SetConfig+0x2b8>
 800766e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007672:	d815      	bhi.n	80076a0 <UART_SetConfig+0x2d0>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <UART_SetConfig+0x2b0>
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767c:	d008      	beq.n	8007690 <UART_SetConfig+0x2c0>
 800767e:	e00f      	b.n	80076a0 <UART_SetConfig+0x2d0>
 8007680:	2300      	movs	r3, #0
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007686:	e022      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007688:	2302      	movs	r3, #2
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	e01e      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007696:	e01a      	b.n	80076ce <UART_SetConfig+0x2fe>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800769e:	e016      	b.n	80076ce <UART_SetConfig+0x2fe>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a6:	e012      	b.n	80076ce <UART_SetConfig+0x2fe>
 80076a8:	cfff69f3 	.word	0xcfff69f3
 80076ac:	40008000 	.word	0x40008000
 80076b0:	40013800 	.word	0x40013800
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40004400 	.word	0x40004400
 80076bc:	40004800 	.word	0x40004800
 80076c0:	40004c00 	.word	0x40004c00
 80076c4:	40005000 	.word	0x40005000
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4aae      	ldr	r2, [pc, #696]	; (800798c <UART_SetConfig+0x5bc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	f040 8097 	bne.w	8007808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d823      	bhi.n	800772a <UART_SetConfig+0x35a>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x318>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	0800772b 	.word	0x0800772b
 80076f0:	08007715 	.word	0x08007715
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800771b 	.word	0x0800771b
 80076fc:	0800772b 	.word	0x0800772b
 8007700:	0800772b 	.word	0x0800772b
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007723 	.word	0x08007723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fd fd16 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007712:	e010      	b.n	8007736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b9e      	ldr	r3, [pc, #632]	; (8007990 <UART_SetConfig+0x5c0>)
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007718:	e00d      	b.n	8007736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fd fca3 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007720:	e009      	b.n	8007736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007728:	e005      	b.n	8007736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8130 	beq.w	800799e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	4a94      	ldr	r2, [pc, #592]	; (8007994 <UART_SetConfig+0x5c4>)
 8007744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007748:	461a      	mov	r2, r3
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	4413      	add	r3, r2
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	429a      	cmp	r2, r3
 8007760:	d305      	bcc.n	800776e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	429a      	cmp	r2, r3
 800776c:	d903      	bls.n	8007776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007774:	e113      	b.n	800799e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2200      	movs	r2, #0
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	60fa      	str	r2, [r7, #12]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	4a84      	ldr	r2, [pc, #528]	; (8007994 <UART_SetConfig+0x5c4>)
 8007784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007788:	b29b      	uxth	r3, r3
 800778a:	2200      	movs	r2, #0
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007798:	f7f9 fa2e 	bl	8000bf8 <__aeabi_uldivmod>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4610      	mov	r0, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	020b      	lsls	r3, r1, #8
 80077ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077b2:	0202      	lsls	r2, r0, #8
 80077b4:	6979      	ldr	r1, [r7, #20]
 80077b6:	6849      	ldr	r1, [r1, #4]
 80077b8:	0849      	lsrs	r1, r1, #1
 80077ba:	2000      	movs	r0, #0
 80077bc:	460c      	mov	r4, r1
 80077be:	4605      	mov	r5, r0
 80077c0:	eb12 0804 	adds.w	r8, r2, r4
 80077c4:	eb43 0905 	adc.w	r9, r3, r5
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	469a      	mov	sl, r3
 80077d0:	4693      	mov	fp, r2
 80077d2:	4652      	mov	r2, sl
 80077d4:	465b      	mov	r3, fp
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	f7f9 fa0d 	bl	8000bf8 <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4613      	mov	r3, r2
 80077e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ec:	d308      	bcc.n	8007800 <UART_SetConfig+0x430>
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f4:	d204      	bcs.n	8007800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	e0ce      	b.n	800799e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007806:	e0ca      	b.n	800799e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007810:	d166      	bne.n	80078e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007816:	2b08      	cmp	r3, #8
 8007818:	d827      	bhi.n	800786a <UART_SetConfig+0x49a>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x450>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007845 	.word	0x08007845
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007855 	.word	0x08007855
 800782c:	0800786b 	.word	0x0800786b
 8007830:	0800785b 	.word	0x0800785b
 8007834:	0800786b 	.word	0x0800786b
 8007838:	0800786b 	.word	0x0800786b
 800783c:	0800786b 	.word	0x0800786b
 8007840:	08007863 	.word	0x08007863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007844:	f7fd fc7a 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 8007848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800784a:	e014      	b.n	8007876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784c:	f7fd fc8c 	bl	8005168 <HAL_RCC_GetPCLK2Freq>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007852:	e010      	b.n	8007876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007854:	4b4e      	ldr	r3, [pc, #312]	; (8007990 <UART_SetConfig+0x5c0>)
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007858:	e00d      	b.n	8007876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785a:	f7fd fc03 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800785e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007860:	e009      	b.n	8007876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007868:	e005      	b.n	8007876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8090 	beq.w	800799e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	4a44      	ldr	r2, [pc, #272]	; (8007994 <UART_SetConfig+0x5c4>)
 8007884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007888:	461a      	mov	r2, r3
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007890:	005a      	lsls	r2, r3, #1
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	441a      	add	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d916      	bls.n	80078d8 <UART_SetConfig+0x508>
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d212      	bcs.n	80078d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f023 030f 	bic.w	r3, r3, #15
 80078ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	8bfb      	ldrh	r3, [r7, #30]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	8bfa      	ldrh	r2, [r7, #30]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e062      	b.n	800799e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078de:	e05e      	b.n	800799e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d828      	bhi.n	800793a <UART_SetConfig+0x56a>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <UART_SetConfig+0x520>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007915 	.word	0x08007915
 80078f4:	0800791d 	.word	0x0800791d
 80078f8:	08007925 	.word	0x08007925
 80078fc:	0800793b 	.word	0x0800793b
 8007900:	0800792b 	.word	0x0800792b
 8007904:	0800793b 	.word	0x0800793b
 8007908:	0800793b 	.word	0x0800793b
 800790c:	0800793b 	.word	0x0800793b
 8007910:	08007933 	.word	0x08007933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007914:	f7fd fc12 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 8007918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800791a:	e014      	b.n	8007946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800791c:	f7fd fc24 	bl	8005168 <HAL_RCC_GetPCLK2Freq>
 8007920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007922:	e010      	b.n	8007946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007924:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <UART_SetConfig+0x5c0>)
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007928:	e00d      	b.n	8007946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800792a:	f7fd fb9b 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007930:	e009      	b.n	8007946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007938:	e005      	b.n	8007946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007944:	bf00      	nop
    }

    if (pclk != 0U)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d028      	beq.n	800799e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	4a10      	ldr	r2, [pc, #64]	; (8007994 <UART_SetConfig+0x5c4>)
 8007952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007956:	461a      	mov	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	fbb3 f2f2 	udiv	r2, r3, r2
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	441a      	add	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b0f      	cmp	r3, #15
 8007974:	d910      	bls.n	8007998 <UART_SetConfig+0x5c8>
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797c:	d20c      	bcs.n	8007998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	b29a      	uxth	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	e009      	b.n	800799e <UART_SetConfig+0x5ce>
 800798a:	bf00      	nop
 800798c:	40008000 	.word	0x40008000
 8007990:	00f42400 	.word	0x00f42400
 8007994:	0800ade4 	.word	0x0800ade4
      }
      else
      {
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2200      	movs	r2, #0
 80079b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3730      	adds	r7, #48	; 0x30
 80079c2:	46bd      	mov	sp, r7
 80079c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac6:	d10a      	bne.n	8007ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b1c:	f7fa fcb2 	bl	8002484 <HAL_GetTick>
 8007b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d10e      	bne.n	8007b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f82f 	bl	8007ba2 <UART_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e025      	b.n	8007b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d10e      	bne.n	8007b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f819 	bl	8007ba2 <UART_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e00f      	b.n	8007b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b09c      	sub	sp, #112	; 0x70
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb2:	e0a9      	b.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	f000 80a5 	beq.w	8007d08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7fa fc61 	bl	8002484 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d140      	bne.n	8007c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007be8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e069      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d051      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c72:	d149      	bne.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cd0:	623a      	str	r2, [r7, #32]
 8007cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69f9      	ldr	r1, [r7, #28]
 8007cd6:	6a3a      	ldr	r2, [r7, #32]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e5      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e010      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69da      	ldr	r2, [r3, #28]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	f43f af46 	beq.w	8007bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3770      	adds	r7, #112	; 0x70
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e027      	b.n	8007d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2224      	movs	r2, #36	; 0x24
 8007d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e02d      	b.n	8007e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2224      	movs	r2, #36	; 0x24
 8007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0201 	bic.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f84f 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e02d      	b.n	8007e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2224      	movs	r2, #36	; 0x24
 8007e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0201 	bic.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f811 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ebc:	e031      	b.n	8007f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ebe:	2308      	movs	r3, #8
 8007ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ec2:	2308      	movs	r3, #8
 8007ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	0e5b      	lsrs	r3, r3, #25
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	0f5b      	lsrs	r3, r3, #29
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	7b3a      	ldrb	r2, [r7, #12]
 8007eea:	4911      	ldr	r1, [pc, #68]	; (8007f30 <UARTEx_SetNbDataToProcess+0x94>)
 8007eec:	5c8a      	ldrb	r2, [r1, r2]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ef2:	7b3a      	ldrb	r2, [r7, #12]
 8007ef4:	490f      	ldr	r1, [pc, #60]	; (8007f34 <UARTEx_SetNbDataToProcess+0x98>)
 8007ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	7b7a      	ldrb	r2, [r7, #13]
 8007f08:	4909      	ldr	r1, [pc, #36]	; (8007f30 <UARTEx_SetNbDataToProcess+0x94>)
 8007f0a:	5c8a      	ldrb	r2, [r1, r2]
 8007f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f10:	7b7a      	ldrb	r2, [r7, #13]
 8007f12:	4908      	ldr	r1, [pc, #32]	; (8007f34 <UARTEx_SetNbDataToProcess+0x98>)
 8007f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	0800adfc 	.word	0x0800adfc
 8007f34:	0800ae04 	.word	0x0800ae04

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	; (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000038 	.word	0x20000038

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	; (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	; (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	; (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	; (8007f88 <__libc_init_array+0x44>)
 8007f58:	f002 ff02 	bl	800ad60 <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	0800b1ec 	.word	0x0800b1ec
 8007f80:	0800b1ec 	.word	0x0800b1ec
 8007f84:	0800b1ec 	.word	0x0800b1ec
 8007f88:	0800b1f0 	.word	0x0800b1f0

08007f8c <memset>:
 8007f8c:	4402      	add	r2, r0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d100      	bne.n	8007f96 <memset+0xa>
 8007f94:	4770      	bx	lr
 8007f96:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9a:	e7f9      	b.n	8007f90 <memset+0x4>

08007f9c <__cvt>:
 8007f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	ec55 4b10 	vmov	r4, r5, d0
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	460e      	mov	r6, r1
 8007fa8:	4619      	mov	r1, r3
 8007faa:	462b      	mov	r3, r5
 8007fac:	bfbb      	ittet	lt
 8007fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fb2:	461d      	movlt	r5, r3
 8007fb4:	2300      	movge	r3, #0
 8007fb6:	232d      	movlt	r3, #45	; 0x2d
 8007fb8:	700b      	strb	r3, [r1, #0]
 8007fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fc0:	4691      	mov	r9, r2
 8007fc2:	f023 0820 	bic.w	r8, r3, #32
 8007fc6:	bfbc      	itt	lt
 8007fc8:	4622      	movlt	r2, r4
 8007fca:	4614      	movlt	r4, r2
 8007fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fd0:	d005      	beq.n	8007fde <__cvt+0x42>
 8007fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fd6:	d100      	bne.n	8007fda <__cvt+0x3e>
 8007fd8:	3601      	adds	r6, #1
 8007fda:	2102      	movs	r1, #2
 8007fdc:	e000      	b.n	8007fe0 <__cvt+0x44>
 8007fde:	2103      	movs	r1, #3
 8007fe0:	ab03      	add	r3, sp, #12
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	ab02      	add	r3, sp, #8
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	ec45 4b10 	vmov	d0, r4, r5
 8007fec:	4653      	mov	r3, sl
 8007fee:	4632      	mov	r2, r6
 8007ff0:	f000 fcea 	bl	80089c8 <_dtoa_r>
 8007ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	d102      	bne.n	8008002 <__cvt+0x66>
 8007ffc:	f019 0f01 	tst.w	r9, #1
 8008000:	d022      	beq.n	8008048 <__cvt+0xac>
 8008002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008006:	eb07 0906 	add.w	r9, r7, r6
 800800a:	d110      	bne.n	800802e <__cvt+0x92>
 800800c:	783b      	ldrb	r3, [r7, #0]
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d10a      	bne.n	8008028 <__cvt+0x8c>
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fd7d 	bl	8000b18 <__aeabi_dcmpeq>
 800801e:	b918      	cbnz	r0, 8008028 <__cvt+0x8c>
 8008020:	f1c6 0601 	rsb	r6, r6, #1
 8008024:	f8ca 6000 	str.w	r6, [sl]
 8008028:	f8da 3000 	ldr.w	r3, [sl]
 800802c:	4499      	add	r9, r3
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 800803a:	b108      	cbz	r0, 8008040 <__cvt+0xa4>
 800803c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008040:	2230      	movs	r2, #48	; 0x30
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	454b      	cmp	r3, r9
 8008046:	d307      	bcc.n	8008058 <__cvt+0xbc>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800804c:	1bdb      	subs	r3, r3, r7
 800804e:	4638      	mov	r0, r7
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	b004      	add	sp, #16
 8008054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008058:	1c59      	adds	r1, r3, #1
 800805a:	9103      	str	r1, [sp, #12]
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e7f0      	b.n	8008042 <__cvt+0xa6>

08008060 <__exponent>:
 8008060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008062:	4603      	mov	r3, r0
 8008064:	2900      	cmp	r1, #0
 8008066:	bfb8      	it	lt
 8008068:	4249      	neglt	r1, r1
 800806a:	f803 2b02 	strb.w	r2, [r3], #2
 800806e:	bfb4      	ite	lt
 8008070:	222d      	movlt	r2, #45	; 0x2d
 8008072:	222b      	movge	r2, #43	; 0x2b
 8008074:	2909      	cmp	r1, #9
 8008076:	7042      	strb	r2, [r0, #1]
 8008078:	dd2a      	ble.n	80080d0 <__exponent+0x70>
 800807a:	f10d 0407 	add.w	r4, sp, #7
 800807e:	46a4      	mov	ip, r4
 8008080:	270a      	movs	r7, #10
 8008082:	46a6      	mov	lr, r4
 8008084:	460a      	mov	r2, r1
 8008086:	fb91 f6f7 	sdiv	r6, r1, r7
 800808a:	fb07 1516 	mls	r5, r7, r6, r1
 800808e:	3530      	adds	r5, #48	; 0x30
 8008090:	2a63      	cmp	r2, #99	; 0x63
 8008092:	f104 34ff 	add.w	r4, r4, #4294967295
 8008096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800809a:	4631      	mov	r1, r6
 800809c:	dcf1      	bgt.n	8008082 <__exponent+0x22>
 800809e:	3130      	adds	r1, #48	; 0x30
 80080a0:	f1ae 0502 	sub.w	r5, lr, #2
 80080a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080a8:	1c44      	adds	r4, r0, #1
 80080aa:	4629      	mov	r1, r5
 80080ac:	4561      	cmp	r1, ip
 80080ae:	d30a      	bcc.n	80080c6 <__exponent+0x66>
 80080b0:	f10d 0209 	add.w	r2, sp, #9
 80080b4:	eba2 020e 	sub.w	r2, r2, lr
 80080b8:	4565      	cmp	r5, ip
 80080ba:	bf88      	it	hi
 80080bc:	2200      	movhi	r2, #0
 80080be:	4413      	add	r3, r2
 80080c0:	1a18      	subs	r0, r3, r0
 80080c2:	b003      	add	sp, #12
 80080c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080ce:	e7ed      	b.n	80080ac <__exponent+0x4c>
 80080d0:	2330      	movs	r3, #48	; 0x30
 80080d2:	3130      	adds	r1, #48	; 0x30
 80080d4:	7083      	strb	r3, [r0, #2]
 80080d6:	70c1      	strb	r1, [r0, #3]
 80080d8:	1d03      	adds	r3, r0, #4
 80080da:	e7f1      	b.n	80080c0 <__exponent+0x60>

080080dc <_printf_float>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	ed2d 8b02 	vpush	{d8}
 80080e4:	b08d      	sub	sp, #52	; 0x34
 80080e6:	460c      	mov	r4, r1
 80080e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080ec:	4616      	mov	r6, r2
 80080ee:	461f      	mov	r7, r3
 80080f0:	4605      	mov	r5, r0
 80080f2:	f001 fa57 	bl	80095a4 <_localeconv_r>
 80080f6:	f8d0 a000 	ldr.w	sl, [r0]
 80080fa:	4650      	mov	r0, sl
 80080fc:	f7f8 f890 	bl	8000220 <strlen>
 8008100:	2300      	movs	r3, #0
 8008102:	930a      	str	r3, [sp, #40]	; 0x28
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	f8d8 3000 	ldr.w	r3, [r8]
 800810c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008110:	3307      	adds	r3, #7
 8008112:	f023 0307 	bic.w	r3, r3, #7
 8008116:	f103 0208 	add.w	r2, r3, #8
 800811a:	f8c8 2000 	str.w	r2, [r8]
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800812a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800812e:	9307      	str	r3, [sp, #28]
 8008130:	f8cd 8018 	str.w	r8, [sp, #24]
 8008134:	ee08 0a10 	vmov	s16, r0
 8008138:	4b9f      	ldr	r3, [pc, #636]	; (80083b8 <_printf_float+0x2dc>)
 800813a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	f7f8 fd1b 	bl	8000b7c <__aeabi_dcmpun>
 8008146:	bb88      	cbnz	r0, 80081ac <_printf_float+0xd0>
 8008148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800814c:	4b9a      	ldr	r3, [pc, #616]	; (80083b8 <_printf_float+0x2dc>)
 800814e:	f04f 32ff 	mov.w	r2, #4294967295
 8008152:	f7f8 fcf5 	bl	8000b40 <__aeabi_dcmple>
 8008156:	bb48      	cbnz	r0, 80081ac <_printf_float+0xd0>
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fce4 	bl	8000b2c <__aeabi_dcmplt>
 8008164:	b110      	cbz	r0, 800816c <_printf_float+0x90>
 8008166:	232d      	movs	r3, #45	; 0x2d
 8008168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800816c:	4b93      	ldr	r3, [pc, #588]	; (80083bc <_printf_float+0x2e0>)
 800816e:	4894      	ldr	r0, [pc, #592]	; (80083c0 <_printf_float+0x2e4>)
 8008170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008174:	bf94      	ite	ls
 8008176:	4698      	movls	r8, r3
 8008178:	4680      	movhi	r8, r0
 800817a:	2303      	movs	r3, #3
 800817c:	6123      	str	r3, [r4, #16]
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	f023 0204 	bic.w	r2, r3, #4
 8008184:	6022      	str	r2, [r4, #0]
 8008186:	f04f 0900 	mov.w	r9, #0
 800818a:	9700      	str	r7, [sp, #0]
 800818c:	4633      	mov	r3, r6
 800818e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f9d8 	bl	8008548 <_printf_common>
 8008198:	3001      	adds	r0, #1
 800819a:	f040 8090 	bne.w	80082be <_printf_float+0x1e2>
 800819e:	f04f 30ff 	mov.w	r0, #4294967295
 80081a2:	b00d      	add	sp, #52	; 0x34
 80081a4:	ecbd 8b02 	vpop	{d8}
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	4642      	mov	r2, r8
 80081ae:	464b      	mov	r3, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f8 fce2 	bl	8000b7c <__aeabi_dcmpun>
 80081b8:	b140      	cbz	r0, 80081cc <_printf_float+0xf0>
 80081ba:	464b      	mov	r3, r9
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfbc      	itt	lt
 80081c0:	232d      	movlt	r3, #45	; 0x2d
 80081c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081c6:	487f      	ldr	r0, [pc, #508]	; (80083c4 <_printf_float+0x2e8>)
 80081c8:	4b7f      	ldr	r3, [pc, #508]	; (80083c8 <_printf_float+0x2ec>)
 80081ca:	e7d1      	b.n	8008170 <_printf_float+0x94>
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081d2:	9206      	str	r2, [sp, #24]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	d13f      	bne.n	8008258 <_printf_float+0x17c>
 80081d8:	2306      	movs	r3, #6
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	9b05      	ldr	r3, [sp, #20]
 80081de:	6861      	ldr	r1, [r4, #4]
 80081e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081e4:	2300      	movs	r3, #0
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	ab0a      	add	r3, sp, #40	; 0x28
 80081ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081ee:	ab09      	add	r3, sp, #36	; 0x24
 80081f0:	ec49 8b10 	vmov	d0, r8, r9
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081fc:	4628      	mov	r0, r5
 80081fe:	f7ff fecd 	bl	8007f9c <__cvt>
 8008202:	9b06      	ldr	r3, [sp, #24]
 8008204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008206:	2b47      	cmp	r3, #71	; 0x47
 8008208:	4680      	mov	r8, r0
 800820a:	d108      	bne.n	800821e <_printf_float+0x142>
 800820c:	1cc8      	adds	r0, r1, #3
 800820e:	db02      	blt.n	8008216 <_printf_float+0x13a>
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	4299      	cmp	r1, r3
 8008214:	dd41      	ble.n	800829a <_printf_float+0x1be>
 8008216:	f1ab 0b02 	sub.w	fp, fp, #2
 800821a:	fa5f fb8b 	uxtb.w	fp, fp
 800821e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008222:	d820      	bhi.n	8008266 <_printf_float+0x18a>
 8008224:	3901      	subs	r1, #1
 8008226:	465a      	mov	r2, fp
 8008228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800822c:	9109      	str	r1, [sp, #36]	; 0x24
 800822e:	f7ff ff17 	bl	8008060 <__exponent>
 8008232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008234:	1813      	adds	r3, r2, r0
 8008236:	2a01      	cmp	r2, #1
 8008238:	4681      	mov	r9, r0
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	dc02      	bgt.n	8008244 <_printf_float+0x168>
 800823e:	6822      	ldr	r2, [r4, #0]
 8008240:	07d2      	lsls	r2, r2, #31
 8008242:	d501      	bpl.n	8008248 <_printf_float+0x16c>
 8008244:	3301      	adds	r3, #1
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800824c:	2b00      	cmp	r3, #0
 800824e:	d09c      	beq.n	800818a <_printf_float+0xae>
 8008250:	232d      	movs	r3, #45	; 0x2d
 8008252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008256:	e798      	b.n	800818a <_printf_float+0xae>
 8008258:	9a06      	ldr	r2, [sp, #24]
 800825a:	2a47      	cmp	r2, #71	; 0x47
 800825c:	d1be      	bne.n	80081dc <_printf_float+0x100>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1bc      	bne.n	80081dc <_printf_float+0x100>
 8008262:	2301      	movs	r3, #1
 8008264:	e7b9      	b.n	80081da <_printf_float+0xfe>
 8008266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800826a:	d118      	bne.n	800829e <_printf_float+0x1c2>
 800826c:	2900      	cmp	r1, #0
 800826e:	6863      	ldr	r3, [r4, #4]
 8008270:	dd0b      	ble.n	800828a <_printf_float+0x1ae>
 8008272:	6121      	str	r1, [r4, #16]
 8008274:	b913      	cbnz	r3, 800827c <_printf_float+0x1a0>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	07d0      	lsls	r0, r2, #31
 800827a:	d502      	bpl.n	8008282 <_printf_float+0x1a6>
 800827c:	3301      	adds	r3, #1
 800827e:	440b      	add	r3, r1
 8008280:	6123      	str	r3, [r4, #16]
 8008282:	65a1      	str	r1, [r4, #88]	; 0x58
 8008284:	f04f 0900 	mov.w	r9, #0
 8008288:	e7de      	b.n	8008248 <_printf_float+0x16c>
 800828a:	b913      	cbnz	r3, 8008292 <_printf_float+0x1b6>
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	07d2      	lsls	r2, r2, #31
 8008290:	d501      	bpl.n	8008296 <_printf_float+0x1ba>
 8008292:	3302      	adds	r3, #2
 8008294:	e7f4      	b.n	8008280 <_printf_float+0x1a4>
 8008296:	2301      	movs	r3, #1
 8008298:	e7f2      	b.n	8008280 <_printf_float+0x1a4>
 800829a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a0:	4299      	cmp	r1, r3
 80082a2:	db05      	blt.n	80082b0 <_printf_float+0x1d4>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	6121      	str	r1, [r4, #16]
 80082a8:	07d8      	lsls	r0, r3, #31
 80082aa:	d5ea      	bpl.n	8008282 <_printf_float+0x1a6>
 80082ac:	1c4b      	adds	r3, r1, #1
 80082ae:	e7e7      	b.n	8008280 <_printf_float+0x1a4>
 80082b0:	2900      	cmp	r1, #0
 80082b2:	bfd4      	ite	le
 80082b4:	f1c1 0202 	rsble	r2, r1, #2
 80082b8:	2201      	movgt	r2, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	e7e0      	b.n	8008280 <_printf_float+0x1a4>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	055a      	lsls	r2, r3, #21
 80082c2:	d407      	bmi.n	80082d4 <_printf_float+0x1f8>
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	4642      	mov	r2, r8
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	d12c      	bne.n	800832c <_printf_float+0x250>
 80082d2:	e764      	b.n	800819e <_printf_float+0xc2>
 80082d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082d8:	f240 80e0 	bls.w	800849c <_printf_float+0x3c0>
 80082dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fc18 	bl	8000b18 <__aeabi_dcmpeq>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d034      	beq.n	8008356 <_printf_float+0x27a>
 80082ec:	4a37      	ldr	r2, [pc, #220]	; (80083cc <_printf_float+0x2f0>)
 80082ee:	2301      	movs	r3, #1
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af51 	beq.w	800819e <_printf_float+0xc2>
 80082fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008300:	429a      	cmp	r2, r3
 8008302:	db02      	blt.n	800830a <_printf_float+0x22e>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	07d8      	lsls	r0, r3, #31
 8008308:	d510      	bpl.n	800832c <_printf_float+0x250>
 800830a:	ee18 3a10 	vmov	r3, s16
 800830e:	4652      	mov	r2, sl
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f af41 	beq.w	800819e <_printf_float+0xc2>
 800831c:	f04f 0800 	mov.w	r8, #0
 8008320:	f104 091a 	add.w	r9, r4, #26
 8008324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008326:	3b01      	subs	r3, #1
 8008328:	4543      	cmp	r3, r8
 800832a:	dc09      	bgt.n	8008340 <_printf_float+0x264>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	079b      	lsls	r3, r3, #30
 8008330:	f100 8105 	bmi.w	800853e <_printf_float+0x462>
 8008334:	68e0      	ldr	r0, [r4, #12]
 8008336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008338:	4298      	cmp	r0, r3
 800833a:	bfb8      	it	lt
 800833c:	4618      	movlt	r0, r3
 800833e:	e730      	b.n	80081a2 <_printf_float+0xc6>
 8008340:	2301      	movs	r3, #1
 8008342:	464a      	mov	r2, r9
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	f43f af27 	beq.w	800819e <_printf_float+0xc2>
 8008350:	f108 0801 	add.w	r8, r8, #1
 8008354:	e7e6      	b.n	8008324 <_printf_float+0x248>
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc39      	bgt.n	80083d0 <_printf_float+0x2f4>
 800835c:	4a1b      	ldr	r2, [pc, #108]	; (80083cc <_printf_float+0x2f0>)
 800835e:	2301      	movs	r3, #1
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af19 	beq.w	800819e <_printf_float+0xc2>
 800836c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008370:	4313      	orrs	r3, r2
 8008372:	d102      	bne.n	800837a <_printf_float+0x29e>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	07d9      	lsls	r1, r3, #31
 8008378:	d5d8      	bpl.n	800832c <_printf_float+0x250>
 800837a:	ee18 3a10 	vmov	r3, s16
 800837e:	4652      	mov	r2, sl
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af09 	beq.w	800819e <_printf_float+0xc2>
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	f104 0a1a 	add.w	sl, r4, #26
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	425b      	negs	r3, r3
 8008398:	454b      	cmp	r3, r9
 800839a:	dc01      	bgt.n	80083a0 <_printf_float+0x2c4>
 800839c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839e:	e792      	b.n	80082c6 <_printf_float+0x1ea>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4652      	mov	r2, sl
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f aef7 	beq.w	800819e <_printf_float+0xc2>
 80083b0:	f109 0901 	add.w	r9, r9, #1
 80083b4:	e7ee      	b.n	8008394 <_printf_float+0x2b8>
 80083b6:	bf00      	nop
 80083b8:	7fefffff 	.word	0x7fefffff
 80083bc:	0800ae10 	.word	0x0800ae10
 80083c0:	0800ae14 	.word	0x0800ae14
 80083c4:	0800ae1c 	.word	0x0800ae1c
 80083c8:	0800ae18 	.word	0x0800ae18
 80083cc:	0800ae20 	.word	0x0800ae20
 80083d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083d4:	429a      	cmp	r2, r3
 80083d6:	bfa8      	it	ge
 80083d8:	461a      	movge	r2, r3
 80083da:	2a00      	cmp	r2, #0
 80083dc:	4691      	mov	r9, r2
 80083de:	dc37      	bgt.n	8008450 <_printf_float+0x374>
 80083e0:	f04f 0b00 	mov.w	fp, #0
 80083e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e8:	f104 021a 	add.w	r2, r4, #26
 80083ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	eba3 0309 	sub.w	r3, r3, r9
 80083f4:	455b      	cmp	r3, fp
 80083f6:	dc33      	bgt.n	8008460 <_printf_float+0x384>
 80083f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083fc:	429a      	cmp	r2, r3
 80083fe:	db3b      	blt.n	8008478 <_printf_float+0x39c>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d438      	bmi.n	8008478 <_printf_float+0x39c>
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	9a05      	ldr	r2, [sp, #20]
 800840a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840c:	1a9a      	subs	r2, r3, r2
 800840e:	eba3 0901 	sub.w	r9, r3, r1
 8008412:	4591      	cmp	r9, r2
 8008414:	bfa8      	it	ge
 8008416:	4691      	movge	r9, r2
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	dc35      	bgt.n	800848a <_printf_float+0x3ae>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008426:	f104 0a1a 	add.w	sl, r4, #26
 800842a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	eba3 0309 	sub.w	r3, r3, r9
 8008434:	4543      	cmp	r3, r8
 8008436:	f77f af79 	ble.w	800832c <_printf_float+0x250>
 800843a:	2301      	movs	r3, #1
 800843c:	4652      	mov	r2, sl
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	f43f aeaa 	beq.w	800819e <_printf_float+0xc2>
 800844a:	f108 0801 	add.w	r8, r8, #1
 800844e:	e7ec      	b.n	800842a <_printf_float+0x34e>
 8008450:	4613      	mov	r3, r2
 8008452:	4631      	mov	r1, r6
 8008454:	4642      	mov	r2, r8
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	d1c0      	bne.n	80083e0 <_printf_float+0x304>
 800845e:	e69e      	b.n	800819e <_printf_float+0xc2>
 8008460:	2301      	movs	r3, #1
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	9205      	str	r2, [sp, #20]
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f ae97 	beq.w	800819e <_printf_float+0xc2>
 8008470:	9a05      	ldr	r2, [sp, #20]
 8008472:	f10b 0b01 	add.w	fp, fp, #1
 8008476:	e7b9      	b.n	80083ec <_printf_float+0x310>
 8008478:	ee18 3a10 	vmov	r3, s16
 800847c:	4652      	mov	r2, sl
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	d1be      	bne.n	8008406 <_printf_float+0x32a>
 8008488:	e689      	b.n	800819e <_printf_float+0xc2>
 800848a:	9a05      	ldr	r2, [sp, #20]
 800848c:	464b      	mov	r3, r9
 800848e:	4442      	add	r2, r8
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	d1c1      	bne.n	800841e <_printf_float+0x342>
 800849a:	e680      	b.n	800819e <_printf_float+0xc2>
 800849c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849e:	2a01      	cmp	r2, #1
 80084a0:	dc01      	bgt.n	80084a6 <_printf_float+0x3ca>
 80084a2:	07db      	lsls	r3, r3, #31
 80084a4:	d538      	bpl.n	8008518 <_printf_float+0x43c>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4642      	mov	r2, r8
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae74 	beq.w	800819e <_printf_float+0xc2>
 80084b6:	ee18 3a10 	vmov	r3, s16
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f ae6b 	beq.w	800819e <_printf_float+0xc2>
 80084c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084cc:	2200      	movs	r2, #0
 80084ce:	2300      	movs	r3, #0
 80084d0:	f7f8 fb22 	bl	8000b18 <__aeabi_dcmpeq>
 80084d4:	b9d8      	cbnz	r0, 800850e <_printf_float+0x432>
 80084d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d8:	f108 0201 	add.w	r2, r8, #1
 80084dc:	3b01      	subs	r3, #1
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	d10e      	bne.n	8008506 <_printf_float+0x42a>
 80084e8:	e659      	b.n	800819e <_printf_float+0xc2>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4652      	mov	r2, sl
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	f43f ae52 	beq.w	800819e <_printf_float+0xc2>
 80084fa:	f108 0801 	add.w	r8, r8, #1
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	3b01      	subs	r3, #1
 8008502:	4543      	cmp	r3, r8
 8008504:	dcf1      	bgt.n	80084ea <_printf_float+0x40e>
 8008506:	464b      	mov	r3, r9
 8008508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800850c:	e6dc      	b.n	80082c8 <_printf_float+0x1ec>
 800850e:	f04f 0800 	mov.w	r8, #0
 8008512:	f104 0a1a 	add.w	sl, r4, #26
 8008516:	e7f2      	b.n	80084fe <_printf_float+0x422>
 8008518:	2301      	movs	r3, #1
 800851a:	4642      	mov	r2, r8
 800851c:	e7df      	b.n	80084de <_printf_float+0x402>
 800851e:	2301      	movs	r3, #1
 8008520:	464a      	mov	r2, r9
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	f43f ae38 	beq.w	800819e <_printf_float+0xc2>
 800852e:	f108 0801 	add.w	r8, r8, #1
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008536:	1a5b      	subs	r3, r3, r1
 8008538:	4543      	cmp	r3, r8
 800853a:	dcf0      	bgt.n	800851e <_printf_float+0x442>
 800853c:	e6fa      	b.n	8008334 <_printf_float+0x258>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	f104 0919 	add.w	r9, r4, #25
 8008546:	e7f4      	b.n	8008532 <_printf_float+0x456>

08008548 <_printf_common>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	4616      	mov	r6, r2
 800854e:	4699      	mov	r9, r3
 8008550:	688a      	ldr	r2, [r1, #8]
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008558:	4293      	cmp	r3, r2
 800855a:	bfb8      	it	lt
 800855c:	4613      	movlt	r3, r2
 800855e:	6033      	str	r3, [r6, #0]
 8008560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008564:	4607      	mov	r7, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b10a      	cbz	r2, 800856e <_printf_common+0x26>
 800856a:	3301      	adds	r3, #1
 800856c:	6033      	str	r3, [r6, #0]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	0699      	lsls	r1, r3, #26
 8008572:	bf42      	ittt	mi
 8008574:	6833      	ldrmi	r3, [r6, #0]
 8008576:	3302      	addmi	r3, #2
 8008578:	6033      	strmi	r3, [r6, #0]
 800857a:	6825      	ldr	r5, [r4, #0]
 800857c:	f015 0506 	ands.w	r5, r5, #6
 8008580:	d106      	bne.n	8008590 <_printf_common+0x48>
 8008582:	f104 0a19 	add.w	sl, r4, #25
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	6832      	ldr	r2, [r6, #0]
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	42ab      	cmp	r3, r5
 800858e:	dc26      	bgt.n	80085de <_printf_common+0x96>
 8008590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008594:	1e13      	subs	r3, r2, #0
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	bf18      	it	ne
 800859a:	2301      	movne	r3, #1
 800859c:	0692      	lsls	r2, r2, #26
 800859e:	d42b      	bmi.n	80085f8 <_printf_common+0xb0>
 80085a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a4:	4649      	mov	r1, r9
 80085a6:	4638      	mov	r0, r7
 80085a8:	47c0      	blx	r8
 80085aa:	3001      	adds	r0, #1
 80085ac:	d01e      	beq.n	80085ec <_printf_common+0xa4>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	68e5      	ldr	r5, [r4, #12]
 80085b2:	6832      	ldr	r2, [r6, #0]
 80085b4:	f003 0306 	and.w	r3, r3, #6
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	bf08      	it	eq
 80085bc:	1aad      	subeq	r5, r5, r2
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	bf0c      	ite	eq
 80085c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c8:	2500      	movne	r5, #0
 80085ca:	4293      	cmp	r3, r2
 80085cc:	bfc4      	itt	gt
 80085ce:	1a9b      	subgt	r3, r3, r2
 80085d0:	18ed      	addgt	r5, r5, r3
 80085d2:	2600      	movs	r6, #0
 80085d4:	341a      	adds	r4, #26
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d11a      	bne.n	8008610 <_printf_common+0xc8>
 80085da:	2000      	movs	r0, #0
 80085dc:	e008      	b.n	80085f0 <_printf_common+0xa8>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4649      	mov	r1, r9
 80085e4:	4638      	mov	r0, r7
 80085e6:	47c0      	blx	r8
 80085e8:	3001      	adds	r0, #1
 80085ea:	d103      	bne.n	80085f4 <_printf_common+0xac>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	3501      	adds	r5, #1
 80085f6:	e7c6      	b.n	8008586 <_printf_common+0x3e>
 80085f8:	18e1      	adds	r1, r4, r3
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	2030      	movs	r0, #48	; 0x30
 80085fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008602:	4422      	add	r2, r4
 8008604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800860c:	3302      	adds	r3, #2
 800860e:	e7c7      	b.n	80085a0 <_printf_common+0x58>
 8008610:	2301      	movs	r3, #1
 8008612:	4622      	mov	r2, r4
 8008614:	4649      	mov	r1, r9
 8008616:	4638      	mov	r0, r7
 8008618:	47c0      	blx	r8
 800861a:	3001      	adds	r0, #1
 800861c:	d0e6      	beq.n	80085ec <_printf_common+0xa4>
 800861e:	3601      	adds	r6, #1
 8008620:	e7d9      	b.n	80085d6 <_printf_common+0x8e>
	...

08008624 <_printf_i>:
 8008624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	7e0f      	ldrb	r7, [r1, #24]
 800862a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800862c:	2f78      	cmp	r7, #120	; 0x78
 800862e:	4691      	mov	r9, r2
 8008630:	4680      	mov	r8, r0
 8008632:	460c      	mov	r4, r1
 8008634:	469a      	mov	sl, r3
 8008636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800863a:	d807      	bhi.n	800864c <_printf_i+0x28>
 800863c:	2f62      	cmp	r7, #98	; 0x62
 800863e:	d80a      	bhi.n	8008656 <_printf_i+0x32>
 8008640:	2f00      	cmp	r7, #0
 8008642:	f000 80d8 	beq.w	80087f6 <_printf_i+0x1d2>
 8008646:	2f58      	cmp	r7, #88	; 0x58
 8008648:	f000 80a3 	beq.w	8008792 <_printf_i+0x16e>
 800864c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008654:	e03a      	b.n	80086cc <_printf_i+0xa8>
 8008656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800865a:	2b15      	cmp	r3, #21
 800865c:	d8f6      	bhi.n	800864c <_printf_i+0x28>
 800865e:	a101      	add	r1, pc, #4	; (adr r1, 8008664 <_printf_i+0x40>)
 8008660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086d1 	.word	0x080086d1
 800866c:	0800864d 	.word	0x0800864d
 8008670:	0800864d 	.word	0x0800864d
 8008674:	0800864d 	.word	0x0800864d
 8008678:	0800864d 	.word	0x0800864d
 800867c:	080086d1 	.word	0x080086d1
 8008680:	0800864d 	.word	0x0800864d
 8008684:	0800864d 	.word	0x0800864d
 8008688:	0800864d 	.word	0x0800864d
 800868c:	0800864d 	.word	0x0800864d
 8008690:	080087dd 	.word	0x080087dd
 8008694:	08008701 	.word	0x08008701
 8008698:	080087bf 	.word	0x080087bf
 800869c:	0800864d 	.word	0x0800864d
 80086a0:	0800864d 	.word	0x0800864d
 80086a4:	080087ff 	.word	0x080087ff
 80086a8:	0800864d 	.word	0x0800864d
 80086ac:	08008701 	.word	0x08008701
 80086b0:	0800864d 	.word	0x0800864d
 80086b4:	0800864d 	.word	0x0800864d
 80086b8:	080087c7 	.word	0x080087c7
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	602a      	str	r2, [r5, #0]
 80086c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0a3      	b.n	8008818 <_printf_i+0x1f4>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	6829      	ldr	r1, [r5, #0]
 80086d4:	0606      	lsls	r6, r0, #24
 80086d6:	f101 0304 	add.w	r3, r1, #4
 80086da:	d50a      	bpl.n	80086f2 <_printf_i+0xce>
 80086dc:	680e      	ldr	r6, [r1, #0]
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	da03      	bge.n	80086ec <_printf_i+0xc8>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	4276      	negs	r6, r6
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	485e      	ldr	r0, [pc, #376]	; (8008868 <_printf_i+0x244>)
 80086ee:	230a      	movs	r3, #10
 80086f0:	e019      	b.n	8008726 <_printf_i+0x102>
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	602b      	str	r3, [r5, #0]
 80086f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086fa:	bf18      	it	ne
 80086fc:	b236      	sxthne	r6, r6
 80086fe:	e7ef      	b.n	80086e0 <_printf_i+0xbc>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1d19      	adds	r1, r3, #4
 8008706:	6029      	str	r1, [r5, #0]
 8008708:	0601      	lsls	r1, r0, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0xec>
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0xf2>
 8008710:	0646      	lsls	r6, r0, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0xe8>
 8008714:	881e      	ldrh	r6, [r3, #0]
 8008716:	4854      	ldr	r0, [pc, #336]	; (8008868 <_printf_i+0x244>)
 8008718:	2f6f      	cmp	r7, #111	; 0x6f
 800871a:	bf0c      	ite	eq
 800871c:	2308      	moveq	r3, #8
 800871e:	230a      	movne	r3, #10
 8008720:	2100      	movs	r1, #0
 8008722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008726:	6865      	ldr	r5, [r4, #4]
 8008728:	60a5      	str	r5, [r4, #8]
 800872a:	2d00      	cmp	r5, #0
 800872c:	bfa2      	ittt	ge
 800872e:	6821      	ldrge	r1, [r4, #0]
 8008730:	f021 0104 	bicge.w	r1, r1, #4
 8008734:	6021      	strge	r1, [r4, #0]
 8008736:	b90e      	cbnz	r6, 800873c <_printf_i+0x118>
 8008738:	2d00      	cmp	r5, #0
 800873a:	d04d      	beq.n	80087d8 <_printf_i+0x1b4>
 800873c:	4615      	mov	r5, r2
 800873e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008742:	fb03 6711 	mls	r7, r3, r1, r6
 8008746:	5dc7      	ldrb	r7, [r0, r7]
 8008748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800874c:	4637      	mov	r7, r6
 800874e:	42bb      	cmp	r3, r7
 8008750:	460e      	mov	r6, r1
 8008752:	d9f4      	bls.n	800873e <_printf_i+0x11a>
 8008754:	2b08      	cmp	r3, #8
 8008756:	d10b      	bne.n	8008770 <_printf_i+0x14c>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	07de      	lsls	r6, r3, #31
 800875c:	d508      	bpl.n	8008770 <_printf_i+0x14c>
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	6861      	ldr	r1, [r4, #4]
 8008762:	4299      	cmp	r1, r3
 8008764:	bfde      	ittt	le
 8008766:	2330      	movle	r3, #48	; 0x30
 8008768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800876c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008770:	1b52      	subs	r2, r2, r5
 8008772:	6122      	str	r2, [r4, #16]
 8008774:	f8cd a000 	str.w	sl, [sp]
 8008778:	464b      	mov	r3, r9
 800877a:	aa03      	add	r2, sp, #12
 800877c:	4621      	mov	r1, r4
 800877e:	4640      	mov	r0, r8
 8008780:	f7ff fee2 	bl	8008548 <_printf_common>
 8008784:	3001      	adds	r0, #1
 8008786:	d14c      	bne.n	8008822 <_printf_i+0x1fe>
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	b004      	add	sp, #16
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	4835      	ldr	r0, [pc, #212]	; (8008868 <_printf_i+0x244>)
 8008794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008798:	6829      	ldr	r1, [r5, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	f851 6b04 	ldr.w	r6, [r1], #4
 80087a0:	6029      	str	r1, [r5, #0]
 80087a2:	061d      	lsls	r5, r3, #24
 80087a4:	d514      	bpl.n	80087d0 <_printf_i+0x1ac>
 80087a6:	07df      	lsls	r7, r3, #31
 80087a8:	bf44      	itt	mi
 80087aa:	f043 0320 	orrmi.w	r3, r3, #32
 80087ae:	6023      	strmi	r3, [r4, #0]
 80087b0:	b91e      	cbnz	r6, 80087ba <_printf_i+0x196>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	f023 0320 	bic.w	r3, r3, #32
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	2310      	movs	r3, #16
 80087bc:	e7b0      	b.n	8008720 <_printf_i+0xfc>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f043 0320 	orr.w	r3, r3, #32
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	2378      	movs	r3, #120	; 0x78
 80087c8:	4828      	ldr	r0, [pc, #160]	; (800886c <_printf_i+0x248>)
 80087ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ce:	e7e3      	b.n	8008798 <_printf_i+0x174>
 80087d0:	0659      	lsls	r1, r3, #25
 80087d2:	bf48      	it	mi
 80087d4:	b2b6      	uxthmi	r6, r6
 80087d6:	e7e6      	b.n	80087a6 <_printf_i+0x182>
 80087d8:	4615      	mov	r5, r2
 80087da:	e7bb      	b.n	8008754 <_printf_i+0x130>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	6826      	ldr	r6, [r4, #0]
 80087e0:	6961      	ldr	r1, [r4, #20]
 80087e2:	1d18      	adds	r0, r3, #4
 80087e4:	6028      	str	r0, [r5, #0]
 80087e6:	0635      	lsls	r5, r6, #24
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	d501      	bpl.n	80087f0 <_printf_i+0x1cc>
 80087ec:	6019      	str	r1, [r3, #0]
 80087ee:	e002      	b.n	80087f6 <_printf_i+0x1d2>
 80087f0:	0670      	lsls	r0, r6, #25
 80087f2:	d5fb      	bpl.n	80087ec <_printf_i+0x1c8>
 80087f4:	8019      	strh	r1, [r3, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	4615      	mov	r5, r2
 80087fc:	e7ba      	b.n	8008774 <_printf_i+0x150>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	602a      	str	r2, [r5, #0]
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	6862      	ldr	r2, [r4, #4]
 8008808:	2100      	movs	r1, #0
 800880a:	4628      	mov	r0, r5
 800880c:	f7f7 fd10 	bl	8000230 <memchr>
 8008810:	b108      	cbz	r0, 8008816 <_printf_i+0x1f2>
 8008812:	1b40      	subs	r0, r0, r5
 8008814:	6060      	str	r0, [r4, #4]
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	2300      	movs	r3, #0
 800881c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008820:	e7a8      	b.n	8008774 <_printf_i+0x150>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	462a      	mov	r2, r5
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	47d0      	blx	sl
 800882c:	3001      	adds	r0, #1
 800882e:	d0ab      	beq.n	8008788 <_printf_i+0x164>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	079b      	lsls	r3, r3, #30
 8008834:	d413      	bmi.n	800885e <_printf_i+0x23a>
 8008836:	68e0      	ldr	r0, [r4, #12]
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	4298      	cmp	r0, r3
 800883c:	bfb8      	it	lt
 800883e:	4618      	movlt	r0, r3
 8008840:	e7a4      	b.n	800878c <_printf_i+0x168>
 8008842:	2301      	movs	r3, #1
 8008844:	4632      	mov	r2, r6
 8008846:	4649      	mov	r1, r9
 8008848:	4640      	mov	r0, r8
 800884a:	47d0      	blx	sl
 800884c:	3001      	adds	r0, #1
 800884e:	d09b      	beq.n	8008788 <_printf_i+0x164>
 8008850:	3501      	adds	r5, #1
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	9903      	ldr	r1, [sp, #12]
 8008856:	1a5b      	subs	r3, r3, r1
 8008858:	42ab      	cmp	r3, r5
 800885a:	dcf2      	bgt.n	8008842 <_printf_i+0x21e>
 800885c:	e7eb      	b.n	8008836 <_printf_i+0x212>
 800885e:	2500      	movs	r5, #0
 8008860:	f104 0619 	add.w	r6, r4, #25
 8008864:	e7f5      	b.n	8008852 <_printf_i+0x22e>
 8008866:	bf00      	nop
 8008868:	0800ae22 	.word	0x0800ae22
 800886c:	0800ae33 	.word	0x0800ae33

08008870 <siprintf>:
 8008870:	b40e      	push	{r1, r2, r3}
 8008872:	b500      	push	{lr}
 8008874:	b09c      	sub	sp, #112	; 0x70
 8008876:	ab1d      	add	r3, sp, #116	; 0x74
 8008878:	9002      	str	r0, [sp, #8]
 800887a:	9006      	str	r0, [sp, #24]
 800887c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008880:	4809      	ldr	r0, [pc, #36]	; (80088a8 <siprintf+0x38>)
 8008882:	9107      	str	r1, [sp, #28]
 8008884:	9104      	str	r1, [sp, #16]
 8008886:	4909      	ldr	r1, [pc, #36]	; (80088ac <siprintf+0x3c>)
 8008888:	f853 2b04 	ldr.w	r2, [r3], #4
 800888c:	9105      	str	r1, [sp, #20]
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	a902      	add	r1, sp, #8
 8008894:	f001 fb76 	bl	8009f84 <_svfiprintf_r>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
 800889e:	b01c      	add	sp, #112	; 0x70
 80088a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a4:	b003      	add	sp, #12
 80088a6:	4770      	bx	lr
 80088a8:	20000038 	.word	0x20000038
 80088ac:	ffff0208 	.word	0xffff0208

080088b0 <quorem>:
 80088b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	6903      	ldr	r3, [r0, #16]
 80088b6:	690c      	ldr	r4, [r1, #16]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	4607      	mov	r7, r0
 80088bc:	f2c0 8081 	blt.w	80089c2 <quorem+0x112>
 80088c0:	3c01      	subs	r4, #1
 80088c2:	f101 0814 	add.w	r8, r1, #20
 80088c6:	f100 0514 	add.w	r5, r0, #20
 80088ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d8:	3301      	adds	r3, #1
 80088da:	429a      	cmp	r2, r3
 80088dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80088e8:	d331      	bcc.n	800894e <quorem+0x9e>
 80088ea:	f04f 0e00 	mov.w	lr, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	46ac      	mov	ip, r5
 80088f2:	46f2      	mov	sl, lr
 80088f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80088f8:	b293      	uxth	r3, r2
 80088fa:	fb06 e303 	mla	r3, r6, r3, lr
 80088fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008902:	b29b      	uxth	r3, r3
 8008904:	ebaa 0303 	sub.w	r3, sl, r3
 8008908:	f8dc a000 	ldr.w	sl, [ip]
 800890c:	0c12      	lsrs	r2, r2, #16
 800890e:	fa13 f38a 	uxtah	r3, r3, sl
 8008912:	fb06 e202 	mla	r2, r6, r2, lr
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	9b00      	ldr	r3, [sp, #0]
 800891a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800891e:	b292      	uxth	r2, r2
 8008920:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008928:	f8bd 3000 	ldrh.w	r3, [sp]
 800892c:	4581      	cmp	r9, r0
 800892e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008932:	f84c 3b04 	str.w	r3, [ip], #4
 8008936:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800893a:	d2db      	bcs.n	80088f4 <quorem+0x44>
 800893c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008940:	b92b      	cbnz	r3, 800894e <quorem+0x9e>
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	3b04      	subs	r3, #4
 8008946:	429d      	cmp	r5, r3
 8008948:	461a      	mov	r2, r3
 800894a:	d32e      	bcc.n	80089aa <quorem+0xfa>
 800894c:	613c      	str	r4, [r7, #16]
 800894e:	4638      	mov	r0, r7
 8008950:	f001 f8c4 	bl	8009adc <__mcmp>
 8008954:	2800      	cmp	r0, #0
 8008956:	db24      	blt.n	80089a2 <quorem+0xf2>
 8008958:	3601      	adds	r6, #1
 800895a:	4628      	mov	r0, r5
 800895c:	f04f 0c00 	mov.w	ip, #0
 8008960:	f858 2b04 	ldr.w	r2, [r8], #4
 8008964:	f8d0 e000 	ldr.w	lr, [r0]
 8008968:	b293      	uxth	r3, r2
 800896a:	ebac 0303 	sub.w	r3, ip, r3
 800896e:	0c12      	lsrs	r2, r2, #16
 8008970:	fa13 f38e 	uxtah	r3, r3, lr
 8008974:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800897c:	b29b      	uxth	r3, r3
 800897e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008982:	45c1      	cmp	r9, r8
 8008984:	f840 3b04 	str.w	r3, [r0], #4
 8008988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800898c:	d2e8      	bcs.n	8008960 <quorem+0xb0>
 800898e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008996:	b922      	cbnz	r2, 80089a2 <quorem+0xf2>
 8008998:	3b04      	subs	r3, #4
 800899a:	429d      	cmp	r5, r3
 800899c:	461a      	mov	r2, r3
 800899e:	d30a      	bcc.n	80089b6 <quorem+0x106>
 80089a0:	613c      	str	r4, [r7, #16]
 80089a2:	4630      	mov	r0, r6
 80089a4:	b003      	add	sp, #12
 80089a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	3b04      	subs	r3, #4
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1cc      	bne.n	800894c <quorem+0x9c>
 80089b2:	3c01      	subs	r4, #1
 80089b4:	e7c7      	b.n	8008946 <quorem+0x96>
 80089b6:	6812      	ldr	r2, [r2, #0]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d1f0      	bne.n	80089a0 <quorem+0xf0>
 80089be:	3c01      	subs	r4, #1
 80089c0:	e7eb      	b.n	800899a <quorem+0xea>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7ee      	b.n	80089a4 <quorem+0xf4>
	...

080089c8 <_dtoa_r>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	ed2d 8b04 	vpush	{d8-d9}
 80089d0:	ec57 6b10 	vmov	r6, r7, d0
 80089d4:	b093      	sub	sp, #76	; 0x4c
 80089d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089dc:	9106      	str	r1, [sp, #24]
 80089de:	ee10 aa10 	vmov	sl, s0
 80089e2:	4604      	mov	r4, r0
 80089e4:	9209      	str	r2, [sp, #36]	; 0x24
 80089e6:	930c      	str	r3, [sp, #48]	; 0x30
 80089e8:	46bb      	mov	fp, r7
 80089ea:	b975      	cbnz	r5, 8008a0a <_dtoa_r+0x42>
 80089ec:	2010      	movs	r0, #16
 80089ee:	f000 fddd 	bl	80095ac <malloc>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6260      	str	r0, [r4, #36]	; 0x24
 80089f6:	b920      	cbnz	r0, 8008a02 <_dtoa_r+0x3a>
 80089f8:	4ba7      	ldr	r3, [pc, #668]	; (8008c98 <_dtoa_r+0x2d0>)
 80089fa:	21ea      	movs	r1, #234	; 0xea
 80089fc:	48a7      	ldr	r0, [pc, #668]	; (8008c9c <_dtoa_r+0x2d4>)
 80089fe:	f001 fbd1 	bl	800a1a4 <__assert_func>
 8008a02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a06:	6005      	str	r5, [r0, #0]
 8008a08:	60c5      	str	r5, [r0, #12]
 8008a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	b151      	cbz	r1, 8008a26 <_dtoa_r+0x5e>
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	604a      	str	r2, [r1, #4]
 8008a14:	2301      	movs	r3, #1
 8008a16:	4093      	lsls	r3, r2
 8008a18:	608b      	str	r3, [r1, #8]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fe1c 	bl	8009658 <_Bfree>
 8008a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	1e3b      	subs	r3, r7, #0
 8008a28:	bfaa      	itet	ge
 8008a2a:	2300      	movge	r3, #0
 8008a2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a30:	f8c8 3000 	strge.w	r3, [r8]
 8008a34:	4b9a      	ldr	r3, [pc, #616]	; (8008ca0 <_dtoa_r+0x2d8>)
 8008a36:	bfbc      	itt	lt
 8008a38:	2201      	movlt	r2, #1
 8008a3a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a3e:	ea33 030b 	bics.w	r3, r3, fp
 8008a42:	d11b      	bne.n	8008a7c <_dtoa_r+0xb4>
 8008a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a46:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a50:	4333      	orrs	r3, r6
 8008a52:	f000 8592 	beq.w	800957a <_dtoa_r+0xbb2>
 8008a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a58:	b963      	cbnz	r3, 8008a74 <_dtoa_r+0xac>
 8008a5a:	4b92      	ldr	r3, [pc, #584]	; (8008ca4 <_dtoa_r+0x2dc>)
 8008a5c:	e022      	b.n	8008aa4 <_dtoa_r+0xdc>
 8008a5e:	4b92      	ldr	r3, [pc, #584]	; (8008ca8 <_dtoa_r+0x2e0>)
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	3308      	adds	r3, #8
 8008a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	b013      	add	sp, #76	; 0x4c
 8008a6c:	ecbd 8b04 	vpop	{d8-d9}
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	4b8b      	ldr	r3, [pc, #556]	; (8008ca4 <_dtoa_r+0x2dc>)
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	3303      	adds	r3, #3
 8008a7a:	e7f3      	b.n	8008a64 <_dtoa_r+0x9c>
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f8 f848 	bl	8000b18 <__aeabi_dcmpeq>
 8008a88:	ec4b ab19 	vmov	d9, sl, fp
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	b158      	cbz	r0, 8008aa8 <_dtoa_r+0xe0>
 8008a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a92:	2301      	movs	r3, #1
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 856b 	beq.w	8009574 <_dtoa_r+0xbac>
 8008a9e:	4883      	ldr	r0, [pc, #524]	; (8008cac <_dtoa_r+0x2e4>)
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	1e43      	subs	r3, r0, #1
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	e7df      	b.n	8008a68 <_dtoa_r+0xa0>
 8008aa8:	ec4b ab10 	vmov	d0, sl, fp
 8008aac:	aa10      	add	r2, sp, #64	; 0x40
 8008aae:	a911      	add	r1, sp, #68	; 0x44
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 f8b9 	bl	8009c28 <__d2b>
 8008ab6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008aba:	ee08 0a10 	vmov	s16, r0
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	f000 8084 	beq.w	8008bcc <_dtoa_r+0x204>
 8008ac4:	ee19 3a90 	vmov	r3, s19
 8008ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008acc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ad0:	4656      	mov	r6, sl
 8008ad2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ada:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ade:	4b74      	ldr	r3, [pc, #464]	; (8008cb0 <_dtoa_r+0x2e8>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	f7f7 fbf7 	bl	80002d8 <__aeabi_dsub>
 8008aea:	a365      	add	r3, pc, #404	; (adr r3, 8008c80 <_dtoa_r+0x2b8>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fdaa 	bl	8000648 <__aeabi_dmul>
 8008af4:	a364      	add	r3, pc, #400	; (adr r3, 8008c88 <_dtoa_r+0x2c0>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fbef 	bl	80002dc <__adddf3>
 8008afe:	4606      	mov	r6, r0
 8008b00:	4628      	mov	r0, r5
 8008b02:	460f      	mov	r7, r1
 8008b04:	f7f7 fd36 	bl	8000574 <__aeabi_i2d>
 8008b08:	a361      	add	r3, pc, #388	; (adr r3, 8008c90 <_dtoa_r+0x2c8>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fd9b 	bl	8000648 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 fbdf 	bl	80002dc <__adddf3>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460f      	mov	r7, r1
 8008b22:	f7f8 f841 	bl	8000ba8 <__aeabi_d2iz>
 8008b26:	2200      	movs	r2, #0
 8008b28:	9000      	str	r0, [sp, #0]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	4639      	mov	r1, r7
 8008b30:	f7f7 fffc 	bl	8000b2c <__aeabi_dcmplt>
 8008b34:	b150      	cbz	r0, 8008b4c <_dtoa_r+0x184>
 8008b36:	9800      	ldr	r0, [sp, #0]
 8008b38:	f7f7 fd1c 	bl	8000574 <__aeabi_i2d>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8008b44:	b910      	cbnz	r0, 8008b4c <_dtoa_r+0x184>
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	2b16      	cmp	r3, #22
 8008b50:	d85a      	bhi.n	8008c08 <_dtoa_r+0x240>
 8008b52:	9a00      	ldr	r2, [sp, #0]
 8008b54:	4b57      	ldr	r3, [pc, #348]	; (8008cb4 <_dtoa_r+0x2ec>)
 8008b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	ec51 0b19 	vmov	r0, r1, d9
 8008b62:	f7f7 ffe3 	bl	8000b2c <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d050      	beq.n	8008c0c <_dtoa_r+0x244>
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b76:	1b5d      	subs	r5, r3, r5
 8008b78:	1e6b      	subs	r3, r5, #1
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	bf45      	ittet	mi
 8008b7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b82:	9304      	strmi	r3, [sp, #16]
 8008b84:	2300      	movpl	r3, #0
 8008b86:	2300      	movmi	r3, #0
 8008b88:	bf4c      	ite	mi
 8008b8a:	9305      	strmi	r3, [sp, #20]
 8008b8c:	9304      	strpl	r3, [sp, #16]
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db3d      	blt.n	8008c10 <_dtoa_r+0x248>
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	9a00      	ldr	r2, [sp, #0]
 8008b98:	920a      	str	r2, [sp, #40]	; 0x28
 8008b9a:	4413      	add	r3, r2
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	f200 8089 	bhi.w	8008cbc <_dtoa_r+0x2f4>
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	bfc4      	itt	gt
 8008bae:	3b04      	subgt	r3, #4
 8008bb0:	9306      	strgt	r3, [sp, #24]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bb8:	bfcc      	ite	gt
 8008bba:	2500      	movgt	r5, #0
 8008bbc:	2501      	movle	r5, #1
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	f200 8087 	bhi.w	8008cd2 <_dtoa_r+0x30a>
 8008bc4:	e8df f003 	tbb	[pc, r3]
 8008bc8:	59383a2d 	.word	0x59383a2d
 8008bcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bd0:	441d      	add	r5, r3
 8008bd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	bfc1      	itttt	gt
 8008bda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008be2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008be6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008bea:	bfda      	itte	le
 8008bec:	f1c3 0320 	rsble	r3, r3, #32
 8008bf0:	fa06 f003 	lslle.w	r0, r6, r3
 8008bf4:	4318      	orrgt	r0, r3
 8008bf6:	f7f7 fcad 	bl	8000554 <__aeabi_ui2d>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c02:	3d01      	subs	r5, #1
 8008c04:	930e      	str	r3, [sp, #56]	; 0x38
 8008c06:	e76a      	b.n	8008ade <_dtoa_r+0x116>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e7b2      	b.n	8008b72 <_dtoa_r+0x1aa>
 8008c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c0e:	e7b1      	b.n	8008b74 <_dtoa_r+0x1ac>
 8008c10:	9b04      	ldr	r3, [sp, #16]
 8008c12:	9a00      	ldr	r2, [sp, #0]
 8008c14:	1a9b      	subs	r3, r3, r2
 8008c16:	9304      	str	r3, [sp, #16]
 8008c18:	4253      	negs	r3, r2
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	e7bf      	b.n	8008ba2 <_dtoa_r+0x1da>
 8008c22:	2300      	movs	r3, #0
 8008c24:	9308      	str	r3, [sp, #32]
 8008c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc55      	bgt.n	8008cd8 <_dtoa_r+0x310>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c32:	461a      	mov	r2, r3
 8008c34:	9209      	str	r2, [sp, #36]	; 0x24
 8008c36:	e00c      	b.n	8008c52 <_dtoa_r+0x28a>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e7f3      	b.n	8008c24 <_dtoa_r+0x25c>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	9b00      	ldr	r3, [sp, #0]
 8008c44:	4413      	add	r3, r2
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	bfb8      	it	lt
 8008c50:	2301      	movlt	r3, #1
 8008c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c54:	2200      	movs	r2, #0
 8008c56:	6042      	str	r2, [r0, #4]
 8008c58:	2204      	movs	r2, #4
 8008c5a:	f102 0614 	add.w	r6, r2, #20
 8008c5e:	429e      	cmp	r6, r3
 8008c60:	6841      	ldr	r1, [r0, #4]
 8008c62:	d93d      	bls.n	8008ce0 <_dtoa_r+0x318>
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fcb7 	bl	80095d8 <_Balloc>
 8008c6a:	9001      	str	r0, [sp, #4]
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d13b      	bne.n	8008ce8 <_dtoa_r+0x320>
 8008c70:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <_dtoa_r+0x2f0>)
 8008c72:	4602      	mov	r2, r0
 8008c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c78:	e6c0      	b.n	80089fc <_dtoa_r+0x34>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e7df      	b.n	8008c3e <_dtoa_r+0x276>
 8008c7e:	bf00      	nop
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	0800ae51 	.word	0x0800ae51
 8008c9c:	0800ae68 	.word	0x0800ae68
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800ae4d 	.word	0x0800ae4d
 8008ca8:	0800ae44 	.word	0x0800ae44
 8008cac:	0800ae21 	.word	0x0800ae21
 8008cb0:	3ff80000 	.word	0x3ff80000
 8008cb4:	0800af58 	.word	0x0800af58
 8008cb8:	0800aec3 	.word	0x0800aec3
 8008cbc:	2501      	movs	r5, #1
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9306      	str	r3, [sp, #24]
 8008cc2:	9508      	str	r5, [sp, #32]
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2312      	movs	r3, #18
 8008cd0:	e7b0      	b.n	8008c34 <_dtoa_r+0x26c>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9308      	str	r3, [sp, #32]
 8008cd6:	e7f5      	b.n	8008cc4 <_dtoa_r+0x2fc>
 8008cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cde:	e7b8      	b.n	8008c52 <_dtoa_r+0x28a>
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	6041      	str	r1, [r0, #4]
 8008ce4:	0052      	lsls	r2, r2, #1
 8008ce6:	e7b8      	b.n	8008c5a <_dtoa_r+0x292>
 8008ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cea:	9a01      	ldr	r2, [sp, #4]
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	2b0e      	cmp	r3, #14
 8008cf2:	f200 809d 	bhi.w	8008e30 <_dtoa_r+0x468>
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	f000 809a 	beq.w	8008e30 <_dtoa_r+0x468>
 8008cfc:	9b00      	ldr	r3, [sp, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dd32      	ble.n	8008d68 <_dtoa_r+0x3a0>
 8008d02:	4ab7      	ldr	r2, [pc, #732]	; (8008fe0 <_dtoa_r+0x618>)
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	05d8      	lsls	r0, r3, #23
 8008d14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d18:	d516      	bpl.n	8008d48 <_dtoa_r+0x380>
 8008d1a:	4bb2      	ldr	r3, [pc, #712]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d1c:	ec51 0b19 	vmov	r0, r1, d9
 8008d20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d24:	f7f7 fdba 	bl	800089c <__aeabi_ddiv>
 8008d28:	f007 070f 	and.w	r7, r7, #15
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	2503      	movs	r5, #3
 8008d32:	4eac      	ldr	r6, [pc, #688]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d34:	b957      	cbnz	r7, 8008d4c <_dtoa_r+0x384>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	f7f7 fdad 	bl	800089c <__aeabi_ddiv>
 8008d42:	4682      	mov	sl, r0
 8008d44:	468b      	mov	fp, r1
 8008d46:	e028      	b.n	8008d9a <_dtoa_r+0x3d2>
 8008d48:	2502      	movs	r5, #2
 8008d4a:	e7f2      	b.n	8008d32 <_dtoa_r+0x36a>
 8008d4c:	07f9      	lsls	r1, r7, #31
 8008d4e:	d508      	bpl.n	8008d62 <_dtoa_r+0x39a>
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d58:	f7f7 fc76 	bl	8000648 <__aeabi_dmul>
 8008d5c:	3501      	adds	r5, #1
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4689      	mov	r9, r1
 8008d62:	107f      	asrs	r7, r7, #1
 8008d64:	3608      	adds	r6, #8
 8008d66:	e7e5      	b.n	8008d34 <_dtoa_r+0x36c>
 8008d68:	f000 809b 	beq.w	8008ea2 <_dtoa_r+0x4da>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	4f9d      	ldr	r7, [pc, #628]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d70:	425e      	negs	r6, r3
 8008d72:	4b9b      	ldr	r3, [pc, #620]	; (8008fe0 <_dtoa_r+0x618>)
 8008d74:	f006 020f 	and.w	r2, r6, #15
 8008d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	ec51 0b19 	vmov	r0, r1, d9
 8008d84:	f7f7 fc60 	bl	8000648 <__aeabi_dmul>
 8008d88:	1136      	asrs	r6, r6, #4
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2502      	movs	r5, #2
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d17a      	bne.n	8008e8c <_dtoa_r+0x4c4>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1d3      	bne.n	8008d42 <_dtoa_r+0x37a>
 8008d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8082 	beq.w	8008ea6 <_dtoa_r+0x4de>
 8008da2:	4b91      	ldr	r3, [pc, #580]	; (8008fe8 <_dtoa_r+0x620>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4650      	mov	r0, sl
 8008da8:	4659      	mov	r1, fp
 8008daa:	f7f7 febf 	bl	8000b2c <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d079      	beq.n	8008ea6 <_dtoa_r+0x4de>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d076      	beq.n	8008ea6 <_dtoa_r+0x4de>
 8008db8:	9b02      	ldr	r3, [sp, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd36      	ble.n	8008e2c <_dtoa_r+0x464>
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	1e5f      	subs	r7, r3, #1
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4b88      	ldr	r3, [pc, #544]	; (8008fec <_dtoa_r+0x624>)
 8008dca:	f7f7 fc3d 	bl	8000648 <__aeabi_dmul>
 8008dce:	9e02      	ldr	r6, [sp, #8]
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fbcc 	bl	8000574 <__aeabi_i2d>
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	f7f7 fc32 	bl	8000648 <__aeabi_dmul>
 8008de4:	4b82      	ldr	r3, [pc, #520]	; (8008ff0 <_dtoa_r+0x628>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	f7f7 fa78 	bl	80002dc <__adddf3>
 8008dec:	46d0      	mov	r8, sl
 8008dee:	46d9      	mov	r9, fp
 8008df0:	4682      	mov	sl, r0
 8008df2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d158      	bne.n	8008eac <_dtoa_r+0x4e4>
 8008dfa:	4b7e      	ldr	r3, [pc, #504]	; (8008ff4 <_dtoa_r+0x62c>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fa69 	bl	80002d8 <__aeabi_dsub>
 8008e06:	4652      	mov	r2, sl
 8008e08:	465b      	mov	r3, fp
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	f7f7 feab 	bl	8000b68 <__aeabi_dcmpgt>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f040 8295 	bne.w	8009342 <_dtoa_r+0x97a>
 8008e18:	4652      	mov	r2, sl
 8008e1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fe83 	bl	8000b2c <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f040 8289 	bne.w	800933e <_dtoa_r+0x976>
 8008e2c:	ec5b ab19 	vmov	sl, fp, d9
 8008e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f2c0 8148 	blt.w	80090c8 <_dtoa_r+0x700>
 8008e38:	9a00      	ldr	r2, [sp, #0]
 8008e3a:	2a0e      	cmp	r2, #14
 8008e3c:	f300 8144 	bgt.w	80090c8 <_dtoa_r+0x700>
 8008e40:	4b67      	ldr	r3, [pc, #412]	; (8008fe0 <_dtoa_r+0x618>)
 8008e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f280 80d5 	bge.w	8008ffc <_dtoa_r+0x634>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f300 80d1 	bgt.w	8008ffc <_dtoa_r+0x634>
 8008e5a:	f040 826f 	bne.w	800933c <_dtoa_r+0x974>
 8008e5e:	4b65      	ldr	r3, [pc, #404]	; (8008ff4 <_dtoa_r+0x62c>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f7f7 fbef 	bl	8000648 <__aeabi_dmul>
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	f7f7 fe71 	bl	8000b54 <__aeabi_dcmpge>
 8008e72:	9e03      	ldr	r6, [sp, #12]
 8008e74:	4637      	mov	r7, r6
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f040 8245 	bne.w	8009306 <_dtoa_r+0x93e>
 8008e7c:	9d01      	ldr	r5, [sp, #4]
 8008e7e:	2331      	movs	r3, #49	; 0x31
 8008e80:	f805 3b01 	strb.w	r3, [r5], #1
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	e240      	b.n	800930e <_dtoa_r+0x946>
 8008e8c:	07f2      	lsls	r2, r6, #31
 8008e8e:	d505      	bpl.n	8008e9c <_dtoa_r+0x4d4>
 8008e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e94:	f7f7 fbd8 	bl	8000648 <__aeabi_dmul>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	1076      	asrs	r6, r6, #1
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	e777      	b.n	8008d92 <_dtoa_r+0x3ca>
 8008ea2:	2502      	movs	r5, #2
 8008ea4:	e779      	b.n	8008d9a <_dtoa_r+0x3d2>
 8008ea6:	9f00      	ldr	r7, [sp, #0]
 8008ea8:	9e03      	ldr	r6, [sp, #12]
 8008eaa:	e794      	b.n	8008dd6 <_dtoa_r+0x40e>
 8008eac:	9901      	ldr	r1, [sp, #4]
 8008eae:	4b4c      	ldr	r3, [pc, #304]	; (8008fe0 <_dtoa_r+0x618>)
 8008eb0:	4431      	add	r1, r6
 8008eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8008eb4:	9908      	ldr	r1, [sp, #32]
 8008eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d043      	beq.n	8008f4a <_dtoa_r+0x582>
 8008ec2:	494d      	ldr	r1, [pc, #308]	; (8008ff8 <_dtoa_r+0x630>)
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7f7 fce9 	bl	800089c <__aeabi_ddiv>
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	f7f7 fa03 	bl	80002d8 <__aeabi_dsub>
 8008ed2:	9d01      	ldr	r5, [sp, #4]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	4649      	mov	r1, r9
 8008eda:	4640      	mov	r0, r8
 8008edc:	f7f7 fe64 	bl	8000ba8 <__aeabi_d2iz>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	f7f7 fb47 	bl	8000574 <__aeabi_i2d>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 f9f3 	bl	80002d8 <__aeabi_dsub>
 8008ef2:	3630      	adds	r6, #48	; 0x30
 8008ef4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef8:	4652      	mov	r2, sl
 8008efa:	465b      	mov	r3, fp
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	f7f7 fe14 	bl	8000b2c <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d163      	bne.n	8008fd0 <_dtoa_r+0x608>
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4936      	ldr	r1, [pc, #216]	; (8008fe8 <_dtoa_r+0x620>)
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7f7 f9e2 	bl	80002d8 <__aeabi_dsub>
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	f7f7 fe08 	bl	8000b2c <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f040 80b5 	bne.w	800908c <_dtoa_r+0x6c4>
 8008f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f24:	429d      	cmp	r5, r3
 8008f26:	d081      	beq.n	8008e2c <_dtoa_r+0x464>
 8008f28:	4b30      	ldr	r3, [pc, #192]	; (8008fec <_dtoa_r+0x624>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4650      	mov	r0, sl
 8008f2e:	4659      	mov	r1, fp
 8008f30:	f7f7 fb8a 	bl	8000648 <__aeabi_dmul>
 8008f34:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <_dtoa_r+0x624>)
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f7f7 fb82 	bl	8000648 <__aeabi_dmul>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	e7c6      	b.n	8008ed8 <_dtoa_r+0x510>
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	f7f7 fb7b 	bl	8000648 <__aeabi_dmul>
 8008f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f54:	9d01      	ldr	r5, [sp, #4]
 8008f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7f7 fe22 	bl	8000ba8 <__aeabi_d2iz>
 8008f64:	4606      	mov	r6, r0
 8008f66:	f7f7 fb05 	bl	8000574 <__aeabi_i2d>
 8008f6a:	3630      	adds	r6, #48	; 0x30
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 f9b0 	bl	80002d8 <__aeabi_dsub>
 8008f78:	f805 6b01 	strb.w	r6, [r5], #1
 8008f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	4680      	mov	r8, r0
 8008f82:	4689      	mov	r9, r1
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	d124      	bne.n	8008fd4 <_dtoa_r+0x60c>
 8008f8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <_dtoa_r+0x630>)
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	f7f7 f9a4 	bl	80002dc <__adddf3>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fde4 	bl	8000b68 <__aeabi_dcmpgt>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d173      	bne.n	800908c <_dtoa_r+0x6c4>
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	4913      	ldr	r1, [pc, #76]	; (8008ff8 <_dtoa_r+0x630>)
 8008faa:	2000      	movs	r0, #0
 8008fac:	f7f7 f994 	bl	80002d8 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 fdb8 	bl	8000b2c <__aeabi_dcmplt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f af35 	beq.w	8008e2c <_dtoa_r+0x464>
 8008fc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fc4:	1e6b      	subs	r3, r5, #1
 8008fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fcc:	2b30      	cmp	r3, #48	; 0x30
 8008fce:	d0f8      	beq.n	8008fc2 <_dtoa_r+0x5fa>
 8008fd0:	9700      	str	r7, [sp, #0]
 8008fd2:	e049      	b.n	8009068 <_dtoa_r+0x6a0>
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <_dtoa_r+0x624>)
 8008fd6:	f7f7 fb37 	bl	8000648 <__aeabi_dmul>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	4689      	mov	r9, r1
 8008fde:	e7bd      	b.n	8008f5c <_dtoa_r+0x594>
 8008fe0:	0800af58 	.word	0x0800af58
 8008fe4:	0800af30 	.word	0x0800af30
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	40240000 	.word	0x40240000
 8008ff0:	401c0000 	.word	0x401c0000
 8008ff4:	40140000 	.word	0x40140000
 8008ff8:	3fe00000 	.word	0x3fe00000
 8008ffc:	9d01      	ldr	r5, [sp, #4]
 8008ffe:	4656      	mov	r6, sl
 8009000:	465f      	mov	r7, fp
 8009002:	4642      	mov	r2, r8
 8009004:	464b      	mov	r3, r9
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 fc47 	bl	800089c <__aeabi_ddiv>
 800900e:	f7f7 fdcb 	bl	8000ba8 <__aeabi_d2iz>
 8009012:	4682      	mov	sl, r0
 8009014:	f7f7 faae 	bl	8000574 <__aeabi_i2d>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	f7f7 fb14 	bl	8000648 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800902c:	f7f7 f954 	bl	80002d8 <__aeabi_dsub>
 8009030:	f805 6b01 	strb.w	r6, [r5], #1
 8009034:	9e01      	ldr	r6, [sp, #4]
 8009036:	9f03      	ldr	r7, [sp, #12]
 8009038:	1bae      	subs	r6, r5, r6
 800903a:	42b7      	cmp	r7, r6
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	d135      	bne.n	80090ae <_dtoa_r+0x6e6>
 8009042:	f7f7 f94b 	bl	80002dc <__adddf3>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	f7f7 fd8b 	bl	8000b68 <__aeabi_dcmpgt>
 8009052:	b9d0      	cbnz	r0, 800908a <_dtoa_r+0x6c2>
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	4630      	mov	r0, r6
 800905a:	4639      	mov	r1, r7
 800905c:	f7f7 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8009060:	b110      	cbz	r0, 8009068 <_dtoa_r+0x6a0>
 8009062:	f01a 0f01 	tst.w	sl, #1
 8009066:	d110      	bne.n	800908a <_dtoa_r+0x6c2>
 8009068:	4620      	mov	r0, r4
 800906a:	ee18 1a10 	vmov	r1, s16
 800906e:	f000 faf3 	bl	8009658 <_Bfree>
 8009072:	2300      	movs	r3, #0
 8009074:	9800      	ldr	r0, [sp, #0]
 8009076:	702b      	strb	r3, [r5, #0]
 8009078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907a:	3001      	adds	r0, #1
 800907c:	6018      	str	r0, [r3, #0]
 800907e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009080:	2b00      	cmp	r3, #0
 8009082:	f43f acf1 	beq.w	8008a68 <_dtoa_r+0xa0>
 8009086:	601d      	str	r5, [r3, #0]
 8009088:	e4ee      	b.n	8008a68 <_dtoa_r+0xa0>
 800908a:	9f00      	ldr	r7, [sp, #0]
 800908c:	462b      	mov	r3, r5
 800908e:	461d      	mov	r5, r3
 8009090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009094:	2a39      	cmp	r2, #57	; 0x39
 8009096:	d106      	bne.n	80090a6 <_dtoa_r+0x6de>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d1f7      	bne.n	800908e <_dtoa_r+0x6c6>
 800909e:	9901      	ldr	r1, [sp, #4]
 80090a0:	2230      	movs	r2, #48	; 0x30
 80090a2:	3701      	adds	r7, #1
 80090a4:	700a      	strb	r2, [r1, #0]
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	3201      	adds	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	e790      	b.n	8008fd0 <_dtoa_r+0x608>
 80090ae:	4ba6      	ldr	r3, [pc, #664]	; (8009348 <_dtoa_r+0x980>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	f7f7 fac9 	bl	8000648 <__aeabi_dmul>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4606      	mov	r6, r0
 80090bc:	460f      	mov	r7, r1
 80090be:	f7f7 fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d09d      	beq.n	8009002 <_dtoa_r+0x63a>
 80090c6:	e7cf      	b.n	8009068 <_dtoa_r+0x6a0>
 80090c8:	9a08      	ldr	r2, [sp, #32]
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	f000 80d7 	beq.w	800927e <_dtoa_r+0x8b6>
 80090d0:	9a06      	ldr	r2, [sp, #24]
 80090d2:	2a01      	cmp	r2, #1
 80090d4:	f300 80ba 	bgt.w	800924c <_dtoa_r+0x884>
 80090d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090da:	2a00      	cmp	r2, #0
 80090dc:	f000 80b2 	beq.w	8009244 <_dtoa_r+0x87c>
 80090e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090e4:	9e07      	ldr	r6, [sp, #28]
 80090e6:	9d04      	ldr	r5, [sp, #16]
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	441a      	add	r2, r3
 80090ec:	9204      	str	r2, [sp, #16]
 80090ee:	9a05      	ldr	r2, [sp, #20]
 80090f0:	2101      	movs	r1, #1
 80090f2:	441a      	add	r2, r3
 80090f4:	4620      	mov	r0, r4
 80090f6:	9205      	str	r2, [sp, #20]
 80090f8:	f000 fb66 	bl	80097c8 <__i2b>
 80090fc:	4607      	mov	r7, r0
 80090fe:	2d00      	cmp	r5, #0
 8009100:	dd0c      	ble.n	800911c <_dtoa_r+0x754>
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	dd09      	ble.n	800911c <_dtoa_r+0x754>
 8009108:	42ab      	cmp	r3, r5
 800910a:	9a04      	ldr	r2, [sp, #16]
 800910c:	bfa8      	it	ge
 800910e:	462b      	movge	r3, r5
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	9204      	str	r2, [sp, #16]
 8009114:	9a05      	ldr	r2, [sp, #20]
 8009116:	1aed      	subs	r5, r5, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	b31b      	cbz	r3, 8009168 <_dtoa_r+0x7a0>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80af 	beq.w	8009286 <_dtoa_r+0x8be>
 8009128:	2e00      	cmp	r6, #0
 800912a:	dd13      	ble.n	8009154 <_dtoa_r+0x78c>
 800912c:	4639      	mov	r1, r7
 800912e:	4632      	mov	r2, r6
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fc09 	bl	8009948 <__pow5mult>
 8009136:	ee18 2a10 	vmov	r2, s16
 800913a:	4601      	mov	r1, r0
 800913c:	4607      	mov	r7, r0
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fb58 	bl	80097f4 <__multiply>
 8009144:	ee18 1a10 	vmov	r1, s16
 8009148:	4680      	mov	r8, r0
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fa84 	bl	8009658 <_Bfree>
 8009150:	ee08 8a10 	vmov	s16, r8
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	1b9a      	subs	r2, r3, r6
 8009158:	d006      	beq.n	8009168 <_dtoa_r+0x7a0>
 800915a:	ee18 1a10 	vmov	r1, s16
 800915e:	4620      	mov	r0, r4
 8009160:	f000 fbf2 	bl	8009948 <__pow5mult>
 8009164:	ee08 0a10 	vmov	s16, r0
 8009168:	2101      	movs	r1, #1
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fb2c 	bl	80097c8 <__i2b>
 8009170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	4606      	mov	r6, r0
 8009176:	f340 8088 	ble.w	800928a <_dtoa_r+0x8c2>
 800917a:	461a      	mov	r2, r3
 800917c:	4601      	mov	r1, r0
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fbe2 	bl	8009948 <__pow5mult>
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	2b01      	cmp	r3, #1
 8009188:	4606      	mov	r6, r0
 800918a:	f340 8081 	ble.w	8009290 <_dtoa_r+0x8c8>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	6933      	ldr	r3, [r6, #16]
 8009194:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009198:	6918      	ldr	r0, [r3, #16]
 800919a:	f000 fac5 	bl	8009728 <__hi0bits>
 800919e:	f1c0 0020 	rsb	r0, r0, #32
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	4418      	add	r0, r3
 80091a6:	f010 001f 	ands.w	r0, r0, #31
 80091aa:	f000 8092 	beq.w	80092d2 <_dtoa_r+0x90a>
 80091ae:	f1c0 0320 	rsb	r3, r0, #32
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	f340 808a 	ble.w	80092cc <_dtoa_r+0x904>
 80091b8:	f1c0 001c 	rsb	r0, r0, #28
 80091bc:	9b04      	ldr	r3, [sp, #16]
 80091be:	4403      	add	r3, r0
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	4403      	add	r3, r0
 80091c6:	4405      	add	r5, r0
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	9b04      	ldr	r3, [sp, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd07      	ble.n	80091e0 <_dtoa_r+0x818>
 80091d0:	ee18 1a10 	vmov	r1, s16
 80091d4:	461a      	mov	r2, r3
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fc10 	bl	80099fc <__lshift>
 80091dc:	ee08 0a10 	vmov	s16, r0
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd05      	ble.n	80091f2 <_dtoa_r+0x82a>
 80091e6:	4631      	mov	r1, r6
 80091e8:	461a      	mov	r2, r3
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fc06 	bl	80099fc <__lshift>
 80091f0:	4606      	mov	r6, r0
 80091f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d06e      	beq.n	80092d6 <_dtoa_r+0x90e>
 80091f8:	ee18 0a10 	vmov	r0, s16
 80091fc:	4631      	mov	r1, r6
 80091fe:	f000 fc6d 	bl	8009adc <__mcmp>
 8009202:	2800      	cmp	r0, #0
 8009204:	da67      	bge.n	80092d6 <_dtoa_r+0x90e>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	ee18 1a10 	vmov	r1, s16
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	220a      	movs	r2, #10
 8009212:	2300      	movs	r3, #0
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fa41 	bl	800969c <__multadd>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 81b1 	beq.w	8009588 <_dtoa_r+0xbc0>
 8009226:	2300      	movs	r3, #0
 8009228:	4639      	mov	r1, r7
 800922a:	220a      	movs	r2, #10
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fa35 	bl	800969c <__multadd>
 8009232:	9b02      	ldr	r3, [sp, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	4607      	mov	r7, r0
 8009238:	f300 808e 	bgt.w	8009358 <_dtoa_r+0x990>
 800923c:	9b06      	ldr	r3, [sp, #24]
 800923e:	2b02      	cmp	r3, #2
 8009240:	dc51      	bgt.n	80092e6 <_dtoa_r+0x91e>
 8009242:	e089      	b.n	8009358 <_dtoa_r+0x990>
 8009244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800924a:	e74b      	b.n	80090e4 <_dtoa_r+0x71c>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	1e5e      	subs	r6, r3, #1
 8009250:	9b07      	ldr	r3, [sp, #28]
 8009252:	42b3      	cmp	r3, r6
 8009254:	bfbf      	itttt	lt
 8009256:	9b07      	ldrlt	r3, [sp, #28]
 8009258:	9607      	strlt	r6, [sp, #28]
 800925a:	1af2      	sublt	r2, r6, r3
 800925c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800925e:	bfb6      	itet	lt
 8009260:	189b      	addlt	r3, r3, r2
 8009262:	1b9e      	subge	r6, r3, r6
 8009264:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	bfb8      	it	lt
 800926a:	2600      	movlt	r6, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfb7      	itett	lt
 8009270:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009274:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009278:	1a9d      	sublt	r5, r3, r2
 800927a:	2300      	movlt	r3, #0
 800927c:	e734      	b.n	80090e8 <_dtoa_r+0x720>
 800927e:	9e07      	ldr	r6, [sp, #28]
 8009280:	9d04      	ldr	r5, [sp, #16]
 8009282:	9f08      	ldr	r7, [sp, #32]
 8009284:	e73b      	b.n	80090fe <_dtoa_r+0x736>
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	e767      	b.n	800915a <_dtoa_r+0x792>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b01      	cmp	r3, #1
 800928e:	dc18      	bgt.n	80092c2 <_dtoa_r+0x8fa>
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	d115      	bne.n	80092c2 <_dtoa_r+0x8fa>
 8009296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800929a:	b993      	cbnz	r3, 80092c2 <_dtoa_r+0x8fa>
 800929c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092a0:	0d1b      	lsrs	r3, r3, #20
 80092a2:	051b      	lsls	r3, r3, #20
 80092a4:	b183      	cbz	r3, 80092c8 <_dtoa_r+0x900>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	3301      	adds	r3, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	9b05      	ldr	r3, [sp, #20]
 80092ae:	3301      	adds	r3, #1
 80092b0:	9305      	str	r3, [sp, #20]
 80092b2:	f04f 0801 	mov.w	r8, #1
 80092b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f af6a 	bne.w	8009192 <_dtoa_r+0x7ca>
 80092be:	2001      	movs	r0, #1
 80092c0:	e76f      	b.n	80091a2 <_dtoa_r+0x7da>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	e7f6      	b.n	80092b6 <_dtoa_r+0x8ee>
 80092c8:	4698      	mov	r8, r3
 80092ca:	e7f4      	b.n	80092b6 <_dtoa_r+0x8ee>
 80092cc:	f43f af7d 	beq.w	80091ca <_dtoa_r+0x802>
 80092d0:	4618      	mov	r0, r3
 80092d2:	301c      	adds	r0, #28
 80092d4:	e772      	b.n	80091bc <_dtoa_r+0x7f4>
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dc37      	bgt.n	800934c <_dtoa_r+0x984>
 80092dc:	9b06      	ldr	r3, [sp, #24]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	dd34      	ble.n	800934c <_dtoa_r+0x984>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	b96b      	cbnz	r3, 8009306 <_dtoa_r+0x93e>
 80092ea:	4631      	mov	r1, r6
 80092ec:	2205      	movs	r2, #5
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f9d4 	bl	800969c <__multadd>
 80092f4:	4601      	mov	r1, r0
 80092f6:	4606      	mov	r6, r0
 80092f8:	ee18 0a10 	vmov	r0, s16
 80092fc:	f000 fbee 	bl	8009adc <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	f73f adbb 	bgt.w	8008e7c <_dtoa_r+0x4b4>
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	9d01      	ldr	r5, [sp, #4]
 800930a:	43db      	mvns	r3, r3
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	4631      	mov	r1, r6
 8009314:	4620      	mov	r0, r4
 8009316:	f000 f99f 	bl	8009658 <_Bfree>
 800931a:	2f00      	cmp	r7, #0
 800931c:	f43f aea4 	beq.w	8009068 <_dtoa_r+0x6a0>
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d005      	beq.n	8009332 <_dtoa_r+0x96a>
 8009326:	45b8      	cmp	r8, r7
 8009328:	d003      	beq.n	8009332 <_dtoa_r+0x96a>
 800932a:	4641      	mov	r1, r8
 800932c:	4620      	mov	r0, r4
 800932e:	f000 f993 	bl	8009658 <_Bfree>
 8009332:	4639      	mov	r1, r7
 8009334:	4620      	mov	r0, r4
 8009336:	f000 f98f 	bl	8009658 <_Bfree>
 800933a:	e695      	b.n	8009068 <_dtoa_r+0x6a0>
 800933c:	2600      	movs	r6, #0
 800933e:	4637      	mov	r7, r6
 8009340:	e7e1      	b.n	8009306 <_dtoa_r+0x93e>
 8009342:	9700      	str	r7, [sp, #0]
 8009344:	4637      	mov	r7, r6
 8009346:	e599      	b.n	8008e7c <_dtoa_r+0x4b4>
 8009348:	40240000 	.word	0x40240000
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80ca 	beq.w	80094e8 <_dtoa_r+0xb20>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	2d00      	cmp	r5, #0
 800935a:	dd05      	ble.n	8009368 <_dtoa_r+0x9a0>
 800935c:	4639      	mov	r1, r7
 800935e:	462a      	mov	r2, r5
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fb4b 	bl	80099fc <__lshift>
 8009366:	4607      	mov	r7, r0
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d05b      	beq.n	8009426 <_dtoa_r+0xa5e>
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4620      	mov	r0, r4
 8009372:	f000 f931 	bl	80095d8 <_Balloc>
 8009376:	4605      	mov	r5, r0
 8009378:	b928      	cbnz	r0, 8009386 <_dtoa_r+0x9be>
 800937a:	4b87      	ldr	r3, [pc, #540]	; (8009598 <_dtoa_r+0xbd0>)
 800937c:	4602      	mov	r2, r0
 800937e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009382:	f7ff bb3b 	b.w	80089fc <_dtoa_r+0x34>
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	3202      	adds	r2, #2
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	f107 010c 	add.w	r1, r7, #12
 8009390:	300c      	adds	r0, #12
 8009392:	f000 f913 	bl	80095bc <memcpy>
 8009396:	2201      	movs	r2, #1
 8009398:	4629      	mov	r1, r5
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fb2e 	bl	80099fc <__lshift>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f103 0901 	add.w	r9, r3, #1
 80093a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093aa:	4413      	add	r3, r2
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	f00a 0301 	and.w	r3, sl, #1
 80093b2:	46b8      	mov	r8, r7
 80093b4:	9304      	str	r3, [sp, #16]
 80093b6:	4607      	mov	r7, r0
 80093b8:	4631      	mov	r1, r6
 80093ba:	ee18 0a10 	vmov	r0, s16
 80093be:	f7ff fa77 	bl	80088b0 <quorem>
 80093c2:	4641      	mov	r1, r8
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093ca:	ee18 0a10 	vmov	r0, s16
 80093ce:	f000 fb85 	bl	8009adc <__mcmp>
 80093d2:	463a      	mov	r2, r7
 80093d4:	9003      	str	r0, [sp, #12]
 80093d6:	4631      	mov	r1, r6
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fb9b 	bl	8009b14 <__mdiff>
 80093de:	68c2      	ldr	r2, [r0, #12]
 80093e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80093e4:	4605      	mov	r5, r0
 80093e6:	bb02      	cbnz	r2, 800942a <_dtoa_r+0xa62>
 80093e8:	4601      	mov	r1, r0
 80093ea:	ee18 0a10 	vmov	r0, s16
 80093ee:	f000 fb75 	bl	8009adc <__mcmp>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4629      	mov	r1, r5
 80093f6:	4620      	mov	r0, r4
 80093f8:	9207      	str	r2, [sp, #28]
 80093fa:	f000 f92d 	bl	8009658 <_Bfree>
 80093fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009402:	ea43 0102 	orr.w	r1, r3, r2
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	430b      	orrs	r3, r1
 800940a:	464d      	mov	r5, r9
 800940c:	d10f      	bne.n	800942e <_dtoa_r+0xa66>
 800940e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009412:	d02a      	beq.n	800946a <_dtoa_r+0xaa2>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd02      	ble.n	8009420 <_dtoa_r+0xa58>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009420:	f88b a000 	strb.w	sl, [fp]
 8009424:	e775      	b.n	8009312 <_dtoa_r+0x94a>
 8009426:	4638      	mov	r0, r7
 8009428:	e7ba      	b.n	80093a0 <_dtoa_r+0x9d8>
 800942a:	2201      	movs	r2, #1
 800942c:	e7e2      	b.n	80093f4 <_dtoa_r+0xa2c>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	db04      	blt.n	800943e <_dtoa_r+0xa76>
 8009434:	9906      	ldr	r1, [sp, #24]
 8009436:	430b      	orrs	r3, r1
 8009438:	9904      	ldr	r1, [sp, #16]
 800943a:	430b      	orrs	r3, r1
 800943c:	d122      	bne.n	8009484 <_dtoa_r+0xabc>
 800943e:	2a00      	cmp	r2, #0
 8009440:	ddee      	ble.n	8009420 <_dtoa_r+0xa58>
 8009442:	ee18 1a10 	vmov	r1, s16
 8009446:	2201      	movs	r2, #1
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fad7 	bl	80099fc <__lshift>
 800944e:	4631      	mov	r1, r6
 8009450:	ee08 0a10 	vmov	s16, r0
 8009454:	f000 fb42 	bl	8009adc <__mcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	dc03      	bgt.n	8009464 <_dtoa_r+0xa9c>
 800945c:	d1e0      	bne.n	8009420 <_dtoa_r+0xa58>
 800945e:	f01a 0f01 	tst.w	sl, #1
 8009462:	d0dd      	beq.n	8009420 <_dtoa_r+0xa58>
 8009464:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009468:	d1d7      	bne.n	800941a <_dtoa_r+0xa52>
 800946a:	2339      	movs	r3, #57	; 0x39
 800946c:	f88b 3000 	strb.w	r3, [fp]
 8009470:	462b      	mov	r3, r5
 8009472:	461d      	mov	r5, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800947a:	2a39      	cmp	r2, #57	; 0x39
 800947c:	d071      	beq.n	8009562 <_dtoa_r+0xb9a>
 800947e:	3201      	adds	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e746      	b.n	8009312 <_dtoa_r+0x94a>
 8009484:	2a00      	cmp	r2, #0
 8009486:	dd07      	ble.n	8009498 <_dtoa_r+0xad0>
 8009488:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800948c:	d0ed      	beq.n	800946a <_dtoa_r+0xaa2>
 800948e:	f10a 0301 	add.w	r3, sl, #1
 8009492:	f88b 3000 	strb.w	r3, [fp]
 8009496:	e73c      	b.n	8009312 <_dtoa_r+0x94a>
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800949e:	4599      	cmp	r9, r3
 80094a0:	d047      	beq.n	8009532 <_dtoa_r+0xb6a>
 80094a2:	ee18 1a10 	vmov	r1, s16
 80094a6:	2300      	movs	r3, #0
 80094a8:	220a      	movs	r2, #10
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 f8f6 	bl	800969c <__multadd>
 80094b0:	45b8      	cmp	r8, r7
 80094b2:	ee08 0a10 	vmov	s16, r0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	f04f 020a 	mov.w	r2, #10
 80094be:	4641      	mov	r1, r8
 80094c0:	4620      	mov	r0, r4
 80094c2:	d106      	bne.n	80094d2 <_dtoa_r+0xb0a>
 80094c4:	f000 f8ea 	bl	800969c <__multadd>
 80094c8:	4680      	mov	r8, r0
 80094ca:	4607      	mov	r7, r0
 80094cc:	f109 0901 	add.w	r9, r9, #1
 80094d0:	e772      	b.n	80093b8 <_dtoa_r+0x9f0>
 80094d2:	f000 f8e3 	bl	800969c <__multadd>
 80094d6:	4639      	mov	r1, r7
 80094d8:	4680      	mov	r8, r0
 80094da:	2300      	movs	r3, #0
 80094dc:	220a      	movs	r2, #10
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f8dc 	bl	800969c <__multadd>
 80094e4:	4607      	mov	r7, r0
 80094e6:	e7f1      	b.n	80094cc <_dtoa_r+0xb04>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	9d01      	ldr	r5, [sp, #4]
 80094ee:	ee18 0a10 	vmov	r0, s16
 80094f2:	4631      	mov	r1, r6
 80094f4:	f7ff f9dc 	bl	80088b0 <quorem>
 80094f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	f805 ab01 	strb.w	sl, [r5], #1
 8009502:	1aea      	subs	r2, r5, r3
 8009504:	9b02      	ldr	r3, [sp, #8]
 8009506:	4293      	cmp	r3, r2
 8009508:	dd09      	ble.n	800951e <_dtoa_r+0xb56>
 800950a:	ee18 1a10 	vmov	r1, s16
 800950e:	2300      	movs	r3, #0
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f8c2 	bl	800969c <__multadd>
 8009518:	ee08 0a10 	vmov	s16, r0
 800951c:	e7e7      	b.n	80094ee <_dtoa_r+0xb26>
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfc8      	it	gt
 8009524:	461d      	movgt	r5, r3
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	bfd8      	it	le
 800952a:	2501      	movle	r5, #1
 800952c:	441d      	add	r5, r3
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	ee18 1a10 	vmov	r1, s16
 8009536:	2201      	movs	r2, #1
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fa5f 	bl	80099fc <__lshift>
 800953e:	4631      	mov	r1, r6
 8009540:	ee08 0a10 	vmov	s16, r0
 8009544:	f000 faca 	bl	8009adc <__mcmp>
 8009548:	2800      	cmp	r0, #0
 800954a:	dc91      	bgt.n	8009470 <_dtoa_r+0xaa8>
 800954c:	d102      	bne.n	8009554 <_dtoa_r+0xb8c>
 800954e:	f01a 0f01 	tst.w	sl, #1
 8009552:	d18d      	bne.n	8009470 <_dtoa_r+0xaa8>
 8009554:	462b      	mov	r3, r5
 8009556:	461d      	mov	r5, r3
 8009558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800955c:	2a30      	cmp	r2, #48	; 0x30
 800955e:	d0fa      	beq.n	8009556 <_dtoa_r+0xb8e>
 8009560:	e6d7      	b.n	8009312 <_dtoa_r+0x94a>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d184      	bne.n	8009472 <_dtoa_r+0xaaa>
 8009568:	9b00      	ldr	r3, [sp, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	2331      	movs	r3, #49	; 0x31
 8009570:	7013      	strb	r3, [r2, #0]
 8009572:	e6ce      	b.n	8009312 <_dtoa_r+0x94a>
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <_dtoa_r+0xbd4>)
 8009576:	f7ff ba95 	b.w	8008aa4 <_dtoa_r+0xdc>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	2b00      	cmp	r3, #0
 800957e:	f47f aa6e 	bne.w	8008a5e <_dtoa_r+0x96>
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <_dtoa_r+0xbd8>)
 8009584:	f7ff ba8e 	b.w	8008aa4 <_dtoa_r+0xdc>
 8009588:	9b02      	ldr	r3, [sp, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	dcae      	bgt.n	80094ec <_dtoa_r+0xb24>
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	2b02      	cmp	r3, #2
 8009592:	f73f aea8 	bgt.w	80092e6 <_dtoa_r+0x91e>
 8009596:	e7a9      	b.n	80094ec <_dtoa_r+0xb24>
 8009598:	0800aec3 	.word	0x0800aec3
 800959c:	0800ae20 	.word	0x0800ae20
 80095a0:	0800ae44 	.word	0x0800ae44

080095a4 <_localeconv_r>:
 80095a4:	4800      	ldr	r0, [pc, #0]	; (80095a8 <_localeconv_r+0x4>)
 80095a6:	4770      	bx	lr
 80095a8:	2000018c 	.word	0x2000018c

080095ac <malloc>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <malloc+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f000 bc17 	b.w	8009de4 <_malloc_r>
 80095b6:	bf00      	nop
 80095b8:	20000038 	.word	0x20000038

080095bc <memcpy>:
 80095bc:	440a      	add	r2, r1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095c4:	d100      	bne.n	80095c8 <memcpy+0xc>
 80095c6:	4770      	bx	lr
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d2:	4291      	cmp	r1, r2
 80095d4:	d1f9      	bne.n	80095ca <memcpy+0xe>
 80095d6:	bd10      	pop	{r4, pc}

080095d8 <_Balloc>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Balloc+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7ff ffe2 	bl	80095ac <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	6260      	str	r0, [r4, #36]	; 0x24
 80095ec:	b920      	cbnz	r0, 80095f8 <_Balloc+0x20>
 80095ee:	4b18      	ldr	r3, [pc, #96]	; (8009650 <_Balloc+0x78>)
 80095f0:	4818      	ldr	r0, [pc, #96]	; (8009654 <_Balloc+0x7c>)
 80095f2:	2166      	movs	r1, #102	; 0x66
 80095f4:	f000 fdd6 	bl	800a1a4 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009602:	68f3      	ldr	r3, [r6, #12]
 8009604:	b183      	cbz	r3, 8009628 <_Balloc+0x50>
 8009606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800960e:	b9b8      	cbnz	r0, 8009640 <_Balloc+0x68>
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f605 	lsl.w	r6, r1, r5
 8009616:	1d72      	adds	r2, r6, #5
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fb60 	bl	8009ce0 <_calloc_r>
 8009620:	b160      	cbz	r0, 800963c <_Balloc+0x64>
 8009622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009626:	e00e      	b.n	8009646 <_Balloc+0x6e>
 8009628:	2221      	movs	r2, #33	; 0x21
 800962a:	2104      	movs	r1, #4
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fb57 	bl	8009ce0 <_calloc_r>
 8009632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009634:	60f0      	str	r0, [r6, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e4      	bne.n	8009606 <_Balloc+0x2e>
 800963c:	2000      	movs	r0, #0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009646:	2300      	movs	r3, #0
 8009648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800964c:	e7f7      	b.n	800963e <_Balloc+0x66>
 800964e:	bf00      	nop
 8009650:	0800ae51 	.word	0x0800ae51
 8009654:	0800aed4 	.word	0x0800aed4

08009658 <_Bfree>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Bfree+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ffa2 	bl	80095ac <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	6268      	str	r0, [r5, #36]	; 0x24
 800966c:	b920      	cbnz	r0, 8009678 <_Bfree+0x20>
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <_Bfree+0x3c>)
 8009670:	4809      	ldr	r0, [pc, #36]	; (8009698 <_Bfree+0x40>)
 8009672:	218a      	movs	r1, #138	; 0x8a
 8009674:	f000 fd96 	bl	800a1a4 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	b13c      	cbz	r4, 8009692 <_Bfree+0x3a>
 8009682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009684:	6862      	ldr	r2, [r4, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800968c:	6021      	str	r1, [r4, #0]
 800968e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	0800ae51 	.word	0x0800ae51
 8009698:	0800aed4 	.word	0x0800aed4

0800969c <__multadd>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	690d      	ldr	r5, [r1, #16]
 80096a2:	4607      	mov	r7, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	461e      	mov	r6, r3
 80096a8:	f101 0c14 	add.w	ip, r1, #20
 80096ac:	2000      	movs	r0, #0
 80096ae:	f8dc 3000 	ldr.w	r3, [ip]
 80096b2:	b299      	uxth	r1, r3
 80096b4:	fb02 6101 	mla	r1, r2, r1, r6
 80096b8:	0c1e      	lsrs	r6, r3, #16
 80096ba:	0c0b      	lsrs	r3, r1, #16
 80096bc:	fb02 3306 	mla	r3, r2, r6, r3
 80096c0:	b289      	uxth	r1, r1
 80096c2:	3001      	adds	r0, #1
 80096c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c8:	4285      	cmp	r5, r0
 80096ca:	f84c 1b04 	str.w	r1, [ip], #4
 80096ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096d2:	dcec      	bgt.n	80096ae <__multadd+0x12>
 80096d4:	b30e      	cbz	r6, 800971a <__multadd+0x7e>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc19      	bgt.n	8009710 <__multadd+0x74>
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4638      	mov	r0, r7
 80096e0:	3101      	adds	r1, #1
 80096e2:	f7ff ff79 	bl	80095d8 <_Balloc>
 80096e6:	4680      	mov	r8, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <__multadd+0x5a>
 80096ea:	4602      	mov	r2, r0
 80096ec:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <__multadd+0x84>)
 80096ee:	480d      	ldr	r0, [pc, #52]	; (8009724 <__multadd+0x88>)
 80096f0:	21b5      	movs	r1, #181	; 0xb5
 80096f2:	f000 fd57 	bl	800a1a4 <__assert_func>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	3202      	adds	r2, #2
 80096fa:	f104 010c 	add.w	r1, r4, #12
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	300c      	adds	r0, #12
 8009702:	f7ff ff5b 	bl	80095bc <memcpy>
 8009706:	4621      	mov	r1, r4
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa5 	bl	8009658 <_Bfree>
 800970e:	4644      	mov	r4, r8
 8009710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009714:	3501      	adds	r5, #1
 8009716:	615e      	str	r6, [r3, #20]
 8009718:	6125      	str	r5, [r4, #16]
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	0800aec3 	.word	0x0800aec3
 8009724:	0800aed4 	.word	0x0800aed4

08009728 <__hi0bits>:
 8009728:	0c03      	lsrs	r3, r0, #16
 800972a:	041b      	lsls	r3, r3, #16
 800972c:	b9d3      	cbnz	r3, 8009764 <__hi0bits+0x3c>
 800972e:	0400      	lsls	r0, r0, #16
 8009730:	2310      	movs	r3, #16
 8009732:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009736:	bf04      	itt	eq
 8009738:	0200      	lsleq	r0, r0, #8
 800973a:	3308      	addeq	r3, #8
 800973c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009740:	bf04      	itt	eq
 8009742:	0100      	lsleq	r0, r0, #4
 8009744:	3304      	addeq	r3, #4
 8009746:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800974a:	bf04      	itt	eq
 800974c:	0080      	lsleq	r0, r0, #2
 800974e:	3302      	addeq	r3, #2
 8009750:	2800      	cmp	r0, #0
 8009752:	db05      	blt.n	8009760 <__hi0bits+0x38>
 8009754:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009758:	f103 0301 	add.w	r3, r3, #1
 800975c:	bf08      	it	eq
 800975e:	2320      	moveq	r3, #32
 8009760:	4618      	mov	r0, r3
 8009762:	4770      	bx	lr
 8009764:	2300      	movs	r3, #0
 8009766:	e7e4      	b.n	8009732 <__hi0bits+0xa>

08009768 <__lo0bits>:
 8009768:	6803      	ldr	r3, [r0, #0]
 800976a:	f013 0207 	ands.w	r2, r3, #7
 800976e:	4601      	mov	r1, r0
 8009770:	d00b      	beq.n	800978a <__lo0bits+0x22>
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	d423      	bmi.n	80097be <__lo0bits+0x56>
 8009776:	0798      	lsls	r0, r3, #30
 8009778:	bf49      	itett	mi
 800977a:	085b      	lsrmi	r3, r3, #1
 800977c:	089b      	lsrpl	r3, r3, #2
 800977e:	2001      	movmi	r0, #1
 8009780:	600b      	strmi	r3, [r1, #0]
 8009782:	bf5c      	itt	pl
 8009784:	600b      	strpl	r3, [r1, #0]
 8009786:	2002      	movpl	r0, #2
 8009788:	4770      	bx	lr
 800978a:	b298      	uxth	r0, r3
 800978c:	b9a8      	cbnz	r0, 80097ba <__lo0bits+0x52>
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	2010      	movs	r0, #16
 8009792:	b2da      	uxtb	r2, r3
 8009794:	b90a      	cbnz	r2, 800979a <__lo0bits+0x32>
 8009796:	3008      	adds	r0, #8
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	071a      	lsls	r2, r3, #28
 800979c:	bf04      	itt	eq
 800979e:	091b      	lsreq	r3, r3, #4
 80097a0:	3004      	addeq	r0, #4
 80097a2:	079a      	lsls	r2, r3, #30
 80097a4:	bf04      	itt	eq
 80097a6:	089b      	lsreq	r3, r3, #2
 80097a8:	3002      	addeq	r0, #2
 80097aa:	07da      	lsls	r2, r3, #31
 80097ac:	d403      	bmi.n	80097b6 <__lo0bits+0x4e>
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	f100 0001 	add.w	r0, r0, #1
 80097b4:	d005      	beq.n	80097c2 <__lo0bits+0x5a>
 80097b6:	600b      	str	r3, [r1, #0]
 80097b8:	4770      	bx	lr
 80097ba:	4610      	mov	r0, r2
 80097bc:	e7e9      	b.n	8009792 <__lo0bits+0x2a>
 80097be:	2000      	movs	r0, #0
 80097c0:	4770      	bx	lr
 80097c2:	2020      	movs	r0, #32
 80097c4:	4770      	bx	lr
	...

080097c8 <__i2b>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	2101      	movs	r1, #1
 80097ce:	f7ff ff03 	bl	80095d8 <_Balloc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <__i2b+0x1a>
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <__i2b+0x24>)
 80097d8:	4805      	ldr	r0, [pc, #20]	; (80097f0 <__i2b+0x28>)
 80097da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097de:	f000 fce1 	bl	800a1a4 <__assert_func>
 80097e2:	2301      	movs	r3, #1
 80097e4:	6144      	str	r4, [r0, #20]
 80097e6:	6103      	str	r3, [r0, #16]
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	bf00      	nop
 80097ec:	0800aec3 	.word	0x0800aec3
 80097f0:	0800aed4 	.word	0x0800aed4

080097f4 <__multiply>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	4691      	mov	r9, r2
 80097fa:	690a      	ldr	r2, [r1, #16]
 80097fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009800:	429a      	cmp	r2, r3
 8009802:	bfb8      	it	lt
 8009804:	460b      	movlt	r3, r1
 8009806:	460c      	mov	r4, r1
 8009808:	bfbc      	itt	lt
 800980a:	464c      	movlt	r4, r9
 800980c:	4699      	movlt	r9, r3
 800980e:	6927      	ldr	r7, [r4, #16]
 8009810:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	6861      	ldr	r1, [r4, #4]
 8009818:	eb07 060a 	add.w	r6, r7, sl
 800981c:	42b3      	cmp	r3, r6
 800981e:	b085      	sub	sp, #20
 8009820:	bfb8      	it	lt
 8009822:	3101      	addlt	r1, #1
 8009824:	f7ff fed8 	bl	80095d8 <_Balloc>
 8009828:	b930      	cbnz	r0, 8009838 <__multiply+0x44>
 800982a:	4602      	mov	r2, r0
 800982c:	4b44      	ldr	r3, [pc, #272]	; (8009940 <__multiply+0x14c>)
 800982e:	4845      	ldr	r0, [pc, #276]	; (8009944 <__multiply+0x150>)
 8009830:	f240 115d 	movw	r1, #349	; 0x15d
 8009834:	f000 fcb6 	bl	800a1a4 <__assert_func>
 8009838:	f100 0514 	add.w	r5, r0, #20
 800983c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009840:	462b      	mov	r3, r5
 8009842:	2200      	movs	r2, #0
 8009844:	4543      	cmp	r3, r8
 8009846:	d321      	bcc.n	800988c <__multiply+0x98>
 8009848:	f104 0314 	add.w	r3, r4, #20
 800984c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009850:	f109 0314 	add.w	r3, r9, #20
 8009854:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009858:	9202      	str	r2, [sp, #8]
 800985a:	1b3a      	subs	r2, r7, r4
 800985c:	3a15      	subs	r2, #21
 800985e:	f022 0203 	bic.w	r2, r2, #3
 8009862:	3204      	adds	r2, #4
 8009864:	f104 0115 	add.w	r1, r4, #21
 8009868:	428f      	cmp	r7, r1
 800986a:	bf38      	it	cc
 800986c:	2204      	movcc	r2, #4
 800986e:	9201      	str	r2, [sp, #4]
 8009870:	9a02      	ldr	r2, [sp, #8]
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d80c      	bhi.n	8009892 <__multiply+0x9e>
 8009878:	2e00      	cmp	r6, #0
 800987a:	dd03      	ble.n	8009884 <__multiply+0x90>
 800987c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009880:	2b00      	cmp	r3, #0
 8009882:	d05a      	beq.n	800993a <__multiply+0x146>
 8009884:	6106      	str	r6, [r0, #16]
 8009886:	b005      	add	sp, #20
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	f843 2b04 	str.w	r2, [r3], #4
 8009890:	e7d8      	b.n	8009844 <__multiply+0x50>
 8009892:	f8b3 a000 	ldrh.w	sl, [r3]
 8009896:	f1ba 0f00 	cmp.w	sl, #0
 800989a:	d024      	beq.n	80098e6 <__multiply+0xf2>
 800989c:	f104 0e14 	add.w	lr, r4, #20
 80098a0:	46a9      	mov	r9, r5
 80098a2:	f04f 0c00 	mov.w	ip, #0
 80098a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098aa:	f8d9 1000 	ldr.w	r1, [r9]
 80098ae:	fa1f fb82 	uxth.w	fp, r2
 80098b2:	b289      	uxth	r1, r1
 80098b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098bc:	f8d9 2000 	ldr.w	r2, [r9]
 80098c0:	4461      	add	r1, ip
 80098c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80098ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098ce:	b289      	uxth	r1, r1
 80098d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098d4:	4577      	cmp	r7, lr
 80098d6:	f849 1b04 	str.w	r1, [r9], #4
 80098da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098de:	d8e2      	bhi.n	80098a6 <__multiply+0xb2>
 80098e0:	9a01      	ldr	r2, [sp, #4]
 80098e2:	f845 c002 	str.w	ip, [r5, r2]
 80098e6:	9a03      	ldr	r2, [sp, #12]
 80098e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098ec:	3304      	adds	r3, #4
 80098ee:	f1b9 0f00 	cmp.w	r9, #0
 80098f2:	d020      	beq.n	8009936 <__multiply+0x142>
 80098f4:	6829      	ldr	r1, [r5, #0]
 80098f6:	f104 0c14 	add.w	ip, r4, #20
 80098fa:	46ae      	mov	lr, r5
 80098fc:	f04f 0a00 	mov.w	sl, #0
 8009900:	f8bc b000 	ldrh.w	fp, [ip]
 8009904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009908:	fb09 220b 	mla	r2, r9, fp, r2
 800990c:	4492      	add	sl, r2
 800990e:	b289      	uxth	r1, r1
 8009910:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009914:	f84e 1b04 	str.w	r1, [lr], #4
 8009918:	f85c 2b04 	ldr.w	r2, [ip], #4
 800991c:	f8be 1000 	ldrh.w	r1, [lr]
 8009920:	0c12      	lsrs	r2, r2, #16
 8009922:	fb09 1102 	mla	r1, r9, r2, r1
 8009926:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800992a:	4567      	cmp	r7, ip
 800992c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009930:	d8e6      	bhi.n	8009900 <__multiply+0x10c>
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	50a9      	str	r1, [r5, r2]
 8009936:	3504      	adds	r5, #4
 8009938:	e79a      	b.n	8009870 <__multiply+0x7c>
 800993a:	3e01      	subs	r6, #1
 800993c:	e79c      	b.n	8009878 <__multiply+0x84>
 800993e:	bf00      	nop
 8009940:	0800aec3 	.word	0x0800aec3
 8009944:	0800aed4 	.word	0x0800aed4

08009948 <__pow5mult>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	4615      	mov	r5, r2
 800994e:	f012 0203 	ands.w	r2, r2, #3
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	d007      	beq.n	8009968 <__pow5mult+0x20>
 8009958:	4c25      	ldr	r4, [pc, #148]	; (80099f0 <__pow5mult+0xa8>)
 800995a:	3a01      	subs	r2, #1
 800995c:	2300      	movs	r3, #0
 800995e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009962:	f7ff fe9b 	bl	800969c <__multadd>
 8009966:	4607      	mov	r7, r0
 8009968:	10ad      	asrs	r5, r5, #2
 800996a:	d03d      	beq.n	80099e8 <__pow5mult+0xa0>
 800996c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800996e:	b97c      	cbnz	r4, 8009990 <__pow5mult+0x48>
 8009970:	2010      	movs	r0, #16
 8009972:	f7ff fe1b 	bl	80095ac <malloc>
 8009976:	4602      	mov	r2, r0
 8009978:	6270      	str	r0, [r6, #36]	; 0x24
 800997a:	b928      	cbnz	r0, 8009988 <__pow5mult+0x40>
 800997c:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <__pow5mult+0xac>)
 800997e:	481e      	ldr	r0, [pc, #120]	; (80099f8 <__pow5mult+0xb0>)
 8009980:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009984:	f000 fc0e 	bl	800a1a4 <__assert_func>
 8009988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	60c4      	str	r4, [r0, #12]
 8009990:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009998:	b94c      	cbnz	r4, 80099ae <__pow5mult+0x66>
 800999a:	f240 2171 	movw	r1, #625	; 0x271
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ff12 	bl	80097c8 <__i2b>
 80099a4:	2300      	movs	r3, #0
 80099a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099aa:	4604      	mov	r4, r0
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	f04f 0900 	mov.w	r9, #0
 80099b2:	07eb      	lsls	r3, r5, #31
 80099b4:	d50a      	bpl.n	80099cc <__pow5mult+0x84>
 80099b6:	4639      	mov	r1, r7
 80099b8:	4622      	mov	r2, r4
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7ff ff1a 	bl	80097f4 <__multiply>
 80099c0:	4639      	mov	r1, r7
 80099c2:	4680      	mov	r8, r0
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7ff fe47 	bl	8009658 <_Bfree>
 80099ca:	4647      	mov	r7, r8
 80099cc:	106d      	asrs	r5, r5, #1
 80099ce:	d00b      	beq.n	80099e8 <__pow5mult+0xa0>
 80099d0:	6820      	ldr	r0, [r4, #0]
 80099d2:	b938      	cbnz	r0, 80099e4 <__pow5mult+0x9c>
 80099d4:	4622      	mov	r2, r4
 80099d6:	4621      	mov	r1, r4
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ff0b 	bl	80097f4 <__multiply>
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	f8c0 9000 	str.w	r9, [r0]
 80099e4:	4604      	mov	r4, r0
 80099e6:	e7e4      	b.n	80099b2 <__pow5mult+0x6a>
 80099e8:	4638      	mov	r0, r7
 80099ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ee:	bf00      	nop
 80099f0:	0800b020 	.word	0x0800b020
 80099f4:	0800ae51 	.word	0x0800ae51
 80099f8:	0800aed4 	.word	0x0800aed4

080099fc <__lshift>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	6849      	ldr	r1, [r1, #4]
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	4691      	mov	r9, r2
 8009a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a14:	f108 0601 	add.w	r6, r8, #1
 8009a18:	42b3      	cmp	r3, r6
 8009a1a:	db0b      	blt.n	8009a34 <__lshift+0x38>
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fddb 	bl	80095d8 <_Balloc>
 8009a22:	4605      	mov	r5, r0
 8009a24:	b948      	cbnz	r0, 8009a3a <__lshift+0x3e>
 8009a26:	4602      	mov	r2, r0
 8009a28:	4b2a      	ldr	r3, [pc, #168]	; (8009ad4 <__lshift+0xd8>)
 8009a2a:	482b      	ldr	r0, [pc, #172]	; (8009ad8 <__lshift+0xdc>)
 8009a2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a30:	f000 fbb8 	bl	800a1a4 <__assert_func>
 8009a34:	3101      	adds	r1, #1
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	e7ee      	b.n	8009a18 <__lshift+0x1c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f100 0114 	add.w	r1, r0, #20
 8009a40:	f100 0210 	add.w	r2, r0, #16
 8009a44:	4618      	mov	r0, r3
 8009a46:	4553      	cmp	r3, sl
 8009a48:	db37      	blt.n	8009aba <__lshift+0xbe>
 8009a4a:	6920      	ldr	r0, [r4, #16]
 8009a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a50:	f104 0314 	add.w	r3, r4, #20
 8009a54:	f019 091f 	ands.w	r9, r9, #31
 8009a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a60:	d02f      	beq.n	8009ac2 <__lshift+0xc6>
 8009a62:	f1c9 0e20 	rsb	lr, r9, #32
 8009a66:	468a      	mov	sl, r1
 8009a68:	f04f 0c00 	mov.w	ip, #0
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	fa02 f209 	lsl.w	r2, r2, r9
 8009a72:	ea42 020c 	orr.w	r2, r2, ip
 8009a76:	f84a 2b04 	str.w	r2, [sl], #4
 8009a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7e:	4298      	cmp	r0, r3
 8009a80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a84:	d8f2      	bhi.n	8009a6c <__lshift+0x70>
 8009a86:	1b03      	subs	r3, r0, r4
 8009a88:	3b15      	subs	r3, #21
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	3304      	adds	r3, #4
 8009a90:	f104 0215 	add.w	r2, r4, #21
 8009a94:	4290      	cmp	r0, r2
 8009a96:	bf38      	it	cc
 8009a98:	2304      	movcc	r3, #4
 8009a9a:	f841 c003 	str.w	ip, [r1, r3]
 8009a9e:	f1bc 0f00 	cmp.w	ip, #0
 8009aa2:	d001      	beq.n	8009aa8 <__lshift+0xac>
 8009aa4:	f108 0602 	add.w	r6, r8, #2
 8009aa8:	3e01      	subs	r6, #1
 8009aaa:	4638      	mov	r0, r7
 8009aac:	612e      	str	r6, [r5, #16]
 8009aae:	4621      	mov	r1, r4
 8009ab0:	f7ff fdd2 	bl	8009658 <_Bfree>
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009abe:	3301      	adds	r3, #1
 8009ac0:	e7c1      	b.n	8009a46 <__lshift+0x4a>
 8009ac2:	3904      	subs	r1, #4
 8009ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009acc:	4298      	cmp	r0, r3
 8009ace:	d8f9      	bhi.n	8009ac4 <__lshift+0xc8>
 8009ad0:	e7ea      	b.n	8009aa8 <__lshift+0xac>
 8009ad2:	bf00      	nop
 8009ad4:	0800aec3 	.word	0x0800aec3
 8009ad8:	0800aed4 	.word	0x0800aed4

08009adc <__mcmp>:
 8009adc:	b530      	push	{r4, r5, lr}
 8009ade:	6902      	ldr	r2, [r0, #16]
 8009ae0:	690c      	ldr	r4, [r1, #16]
 8009ae2:	1b12      	subs	r2, r2, r4
 8009ae4:	d10e      	bne.n	8009b04 <__mcmp+0x28>
 8009ae6:	f100 0314 	add.w	r3, r0, #20
 8009aea:	3114      	adds	r1, #20
 8009aec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009af0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009af4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009af8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d003      	beq.n	8009b08 <__mcmp+0x2c>
 8009b00:	d305      	bcc.n	8009b0e <__mcmp+0x32>
 8009b02:	2201      	movs	r2, #1
 8009b04:	4610      	mov	r0, r2
 8009b06:	bd30      	pop	{r4, r5, pc}
 8009b08:	4283      	cmp	r3, r0
 8009b0a:	d3f3      	bcc.n	8009af4 <__mcmp+0x18>
 8009b0c:	e7fa      	b.n	8009b04 <__mcmp+0x28>
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	e7f7      	b.n	8009b04 <__mcmp+0x28>

08009b14 <__mdiff>:
 8009b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4690      	mov	r8, r2
 8009b22:	f7ff ffdb 	bl	8009adc <__mcmp>
 8009b26:	1e05      	subs	r5, r0, #0
 8009b28:	d110      	bne.n	8009b4c <__mdiff+0x38>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff fd53 	bl	80095d8 <_Balloc>
 8009b32:	b930      	cbnz	r0, 8009b42 <__mdiff+0x2e>
 8009b34:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <__mdiff+0x10c>)
 8009b36:	4602      	mov	r2, r0
 8009b38:	f240 2132 	movw	r1, #562	; 0x232
 8009b3c:	4839      	ldr	r0, [pc, #228]	; (8009c24 <__mdiff+0x110>)
 8009b3e:	f000 fb31 	bl	800a1a4 <__assert_func>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	bfa4      	itt	ge
 8009b4e:	4643      	movge	r3, r8
 8009b50:	46a0      	movge	r8, r4
 8009b52:	4630      	mov	r0, r6
 8009b54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b58:	bfa6      	itte	ge
 8009b5a:	461c      	movge	r4, r3
 8009b5c:	2500      	movge	r5, #0
 8009b5e:	2501      	movlt	r5, #1
 8009b60:	f7ff fd3a 	bl	80095d8 <_Balloc>
 8009b64:	b920      	cbnz	r0, 8009b70 <__mdiff+0x5c>
 8009b66:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <__mdiff+0x10c>)
 8009b68:	4602      	mov	r2, r0
 8009b6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b6e:	e7e5      	b.n	8009b3c <__mdiff+0x28>
 8009b70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b74:	6926      	ldr	r6, [r4, #16]
 8009b76:	60c5      	str	r5, [r0, #12]
 8009b78:	f104 0914 	add.w	r9, r4, #20
 8009b7c:	f108 0514 	add.w	r5, r8, #20
 8009b80:	f100 0e14 	add.w	lr, r0, #20
 8009b84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b8c:	f108 0210 	add.w	r2, r8, #16
 8009b90:	46f2      	mov	sl, lr
 8009b92:	2100      	movs	r1, #0
 8009b94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b9c:	fa1f f883 	uxth.w	r8, r3
 8009ba0:	fa11 f18b 	uxtah	r1, r1, fp
 8009ba4:	0c1b      	lsrs	r3, r3, #16
 8009ba6:	eba1 0808 	sub.w	r8, r1, r8
 8009baa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bb2:	fa1f f888 	uxth.w	r8, r8
 8009bb6:	1419      	asrs	r1, r3, #16
 8009bb8:	454e      	cmp	r6, r9
 8009bba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bbe:	f84a 3b04 	str.w	r3, [sl], #4
 8009bc2:	d8e7      	bhi.n	8009b94 <__mdiff+0x80>
 8009bc4:	1b33      	subs	r3, r6, r4
 8009bc6:	3b15      	subs	r3, #21
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	3415      	adds	r4, #21
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	bf38      	it	cc
 8009bd4:	2304      	movcc	r3, #4
 8009bd6:	441d      	add	r5, r3
 8009bd8:	4473      	add	r3, lr
 8009bda:	469e      	mov	lr, r3
 8009bdc:	462e      	mov	r6, r5
 8009bde:	4566      	cmp	r6, ip
 8009be0:	d30e      	bcc.n	8009c00 <__mdiff+0xec>
 8009be2:	f10c 0203 	add.w	r2, ip, #3
 8009be6:	1b52      	subs	r2, r2, r5
 8009be8:	f022 0203 	bic.w	r2, r2, #3
 8009bec:	3d03      	subs	r5, #3
 8009bee:	45ac      	cmp	ip, r5
 8009bf0:	bf38      	it	cc
 8009bf2:	2200      	movcc	r2, #0
 8009bf4:	441a      	add	r2, r3
 8009bf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bfa:	b17b      	cbz	r3, 8009c1c <__mdiff+0x108>
 8009bfc:	6107      	str	r7, [r0, #16]
 8009bfe:	e7a3      	b.n	8009b48 <__mdiff+0x34>
 8009c00:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c04:	fa11 f288 	uxtah	r2, r1, r8
 8009c08:	1414      	asrs	r4, r2, #16
 8009c0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c14:	f84e 2b04 	str.w	r2, [lr], #4
 8009c18:	1421      	asrs	r1, r4, #16
 8009c1a:	e7e0      	b.n	8009bde <__mdiff+0xca>
 8009c1c:	3f01      	subs	r7, #1
 8009c1e:	e7ea      	b.n	8009bf6 <__mdiff+0xe2>
 8009c20:	0800aec3 	.word	0x0800aec3
 8009c24:	0800aed4 	.word	0x0800aed4

08009c28 <__d2b>:
 8009c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	2101      	movs	r1, #1
 8009c30:	ec57 6b10 	vmov	r6, r7, d0
 8009c34:	4690      	mov	r8, r2
 8009c36:	f7ff fccf 	bl	80095d8 <_Balloc>
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	b930      	cbnz	r0, 8009c4c <__d2b+0x24>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <__d2b+0xb0>)
 8009c42:	4826      	ldr	r0, [pc, #152]	; (8009cdc <__d2b+0xb4>)
 8009c44:	f240 310a 	movw	r1, #778	; 0x30a
 8009c48:	f000 faac 	bl	800a1a4 <__assert_func>
 8009c4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c54:	bb35      	cbnz	r5, 8009ca4 <__d2b+0x7c>
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	d028      	beq.n	8009cae <__d2b+0x86>
 8009c5c:	4668      	mov	r0, sp
 8009c5e:	9600      	str	r6, [sp, #0]
 8009c60:	f7ff fd82 	bl	8009768 <__lo0bits>
 8009c64:	9900      	ldr	r1, [sp, #0]
 8009c66:	b300      	cbz	r0, 8009caa <__d2b+0x82>
 8009c68:	9a01      	ldr	r2, [sp, #4]
 8009c6a:	f1c0 0320 	rsb	r3, r0, #32
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	430b      	orrs	r3, r1
 8009c74:	40c2      	lsrs	r2, r0
 8009c76:	6163      	str	r3, [r4, #20]
 8009c78:	9201      	str	r2, [sp, #4]
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	61a3      	str	r3, [r4, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf14      	ite	ne
 8009c82:	2202      	movne	r2, #2
 8009c84:	2201      	moveq	r2, #1
 8009c86:	6122      	str	r2, [r4, #16]
 8009c88:	b1d5      	cbz	r5, 8009cc0 <__d2b+0x98>
 8009c8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c8e:	4405      	add	r5, r0
 8009c90:	f8c9 5000 	str.w	r5, [r9]
 8009c94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c98:	f8c8 0000 	str.w	r0, [r8]
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ca8:	e7d5      	b.n	8009c56 <__d2b+0x2e>
 8009caa:	6161      	str	r1, [r4, #20]
 8009cac:	e7e5      	b.n	8009c7a <__d2b+0x52>
 8009cae:	a801      	add	r0, sp, #4
 8009cb0:	f7ff fd5a 	bl	8009768 <__lo0bits>
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	6163      	str	r3, [r4, #20]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	6122      	str	r2, [r4, #16]
 8009cbc:	3020      	adds	r0, #32
 8009cbe:	e7e3      	b.n	8009c88 <__d2b+0x60>
 8009cc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cc8:	f8c9 0000 	str.w	r0, [r9]
 8009ccc:	6918      	ldr	r0, [r3, #16]
 8009cce:	f7ff fd2b 	bl	8009728 <__hi0bits>
 8009cd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cd6:	e7df      	b.n	8009c98 <__d2b+0x70>
 8009cd8:	0800aec3 	.word	0x0800aec3
 8009cdc:	0800aed4 	.word	0x0800aed4

08009ce0 <_calloc_r>:
 8009ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ce2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ce6:	b94c      	cbnz	r4, 8009cfc <_calloc_r+0x1c>
 8009ce8:	4611      	mov	r1, r2
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	f000 f87a 	bl	8009de4 <_malloc_r>
 8009cf0:	9a01      	ldr	r2, [sp, #4]
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b930      	cbnz	r0, 8009d04 <_calloc_r+0x24>
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	b003      	add	sp, #12
 8009cfa:	bd30      	pop	{r4, r5, pc}
 8009cfc:	220c      	movs	r2, #12
 8009cfe:	6002      	str	r2, [r0, #0]
 8009d00:	2500      	movs	r5, #0
 8009d02:	e7f8      	b.n	8009cf6 <_calloc_r+0x16>
 8009d04:	4621      	mov	r1, r4
 8009d06:	f7fe f941 	bl	8007f8c <memset>
 8009d0a:	e7f4      	b.n	8009cf6 <_calloc_r+0x16>

08009d0c <_free_r>:
 8009d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d044      	beq.n	8009d9c <_free_r+0x90>
 8009d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d16:	9001      	str	r0, [sp, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d1e:	bfb8      	it	lt
 8009d20:	18e4      	addlt	r4, r4, r3
 8009d22:	f000 fa9b 	bl	800a25c <__malloc_lock>
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <_free_r+0x94>)
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	b933      	cbnz	r3, 8009d3c <_free_r+0x30>
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	6014      	str	r4, [r2, #0]
 8009d32:	b003      	add	sp, #12
 8009d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d38:	f000 ba96 	b.w	800a268 <__malloc_unlock>
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d908      	bls.n	8009d52 <_free_r+0x46>
 8009d40:	6825      	ldr	r5, [r4, #0]
 8009d42:	1961      	adds	r1, r4, r5
 8009d44:	428b      	cmp	r3, r1
 8009d46:	bf01      	itttt	eq
 8009d48:	6819      	ldreq	r1, [r3, #0]
 8009d4a:	685b      	ldreq	r3, [r3, #4]
 8009d4c:	1949      	addeq	r1, r1, r5
 8009d4e:	6021      	streq	r1, [r4, #0]
 8009d50:	e7ed      	b.n	8009d2e <_free_r+0x22>
 8009d52:	461a      	mov	r2, r3
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	b10b      	cbz	r3, 8009d5c <_free_r+0x50>
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d9fa      	bls.n	8009d52 <_free_r+0x46>
 8009d5c:	6811      	ldr	r1, [r2, #0]
 8009d5e:	1855      	adds	r5, r2, r1
 8009d60:	42a5      	cmp	r5, r4
 8009d62:	d10b      	bne.n	8009d7c <_free_r+0x70>
 8009d64:	6824      	ldr	r4, [r4, #0]
 8009d66:	4421      	add	r1, r4
 8009d68:	1854      	adds	r4, r2, r1
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	6011      	str	r1, [r2, #0]
 8009d6e:	d1e0      	bne.n	8009d32 <_free_r+0x26>
 8009d70:	681c      	ldr	r4, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	6053      	str	r3, [r2, #4]
 8009d76:	4421      	add	r1, r4
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	e7da      	b.n	8009d32 <_free_r+0x26>
 8009d7c:	d902      	bls.n	8009d84 <_free_r+0x78>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	e7d6      	b.n	8009d32 <_free_r+0x26>
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	1961      	adds	r1, r4, r5
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	bf04      	itt	eq
 8009d8c:	6819      	ldreq	r1, [r3, #0]
 8009d8e:	685b      	ldreq	r3, [r3, #4]
 8009d90:	6063      	str	r3, [r4, #4]
 8009d92:	bf04      	itt	eq
 8009d94:	1949      	addeq	r1, r1, r5
 8009d96:	6021      	streq	r1, [r4, #0]
 8009d98:	6054      	str	r4, [r2, #4]
 8009d9a:	e7ca      	b.n	8009d32 <_free_r+0x26>
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bd30      	pop	{r4, r5, pc}
 8009da0:	20000604 	.word	0x20000604

08009da4 <sbrk_aligned>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4e0e      	ldr	r6, [pc, #56]	; (8009de0 <sbrk_aligned+0x3c>)
 8009da8:	460c      	mov	r4, r1
 8009daa:	6831      	ldr	r1, [r6, #0]
 8009dac:	4605      	mov	r5, r0
 8009dae:	b911      	cbnz	r1, 8009db6 <sbrk_aligned+0x12>
 8009db0:	f000 f9e8 	bl	800a184 <_sbrk_r>
 8009db4:	6030      	str	r0, [r6, #0]
 8009db6:	4621      	mov	r1, r4
 8009db8:	4628      	mov	r0, r5
 8009dba:	f000 f9e3 	bl	800a184 <_sbrk_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	d00a      	beq.n	8009dd8 <sbrk_aligned+0x34>
 8009dc2:	1cc4      	adds	r4, r0, #3
 8009dc4:	f024 0403 	bic.w	r4, r4, #3
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d007      	beq.n	8009ddc <sbrk_aligned+0x38>
 8009dcc:	1a21      	subs	r1, r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f9d8 	bl	800a184 <_sbrk_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d101      	bne.n	8009ddc <sbrk_aligned+0x38>
 8009dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8009ddc:	4620      	mov	r0, r4
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	20000608 	.word	0x20000608

08009de4 <_malloc_r>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	1ccd      	adds	r5, r1, #3
 8009dea:	f025 0503 	bic.w	r5, r5, #3
 8009dee:	3508      	adds	r5, #8
 8009df0:	2d0c      	cmp	r5, #12
 8009df2:	bf38      	it	cc
 8009df4:	250c      	movcc	r5, #12
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	4607      	mov	r7, r0
 8009dfa:	db01      	blt.n	8009e00 <_malloc_r+0x1c>
 8009dfc:	42a9      	cmp	r1, r5
 8009dfe:	d905      	bls.n	8009e0c <_malloc_r+0x28>
 8009e00:	230c      	movs	r3, #12
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	2600      	movs	r6, #0
 8009e06:	4630      	mov	r0, r6
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	4e2e      	ldr	r6, [pc, #184]	; (8009ec8 <_malloc_r+0xe4>)
 8009e0e:	f000 fa25 	bl	800a25c <__malloc_lock>
 8009e12:	6833      	ldr	r3, [r6, #0]
 8009e14:	461c      	mov	r4, r3
 8009e16:	bb34      	cbnz	r4, 8009e66 <_malloc_r+0x82>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7ff ffc2 	bl	8009da4 <sbrk_aligned>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	4604      	mov	r4, r0
 8009e24:	d14d      	bne.n	8009ec2 <_malloc_r+0xde>
 8009e26:	6834      	ldr	r4, [r6, #0]
 8009e28:	4626      	mov	r6, r4
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	d140      	bne.n	8009eb0 <_malloc_r+0xcc>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	4631      	mov	r1, r6
 8009e32:	4638      	mov	r0, r7
 8009e34:	eb04 0803 	add.w	r8, r4, r3
 8009e38:	f000 f9a4 	bl	800a184 <_sbrk_r>
 8009e3c:	4580      	cmp	r8, r0
 8009e3e:	d13a      	bne.n	8009eb6 <_malloc_r+0xd2>
 8009e40:	6821      	ldr	r1, [r4, #0]
 8009e42:	3503      	adds	r5, #3
 8009e44:	1a6d      	subs	r5, r5, r1
 8009e46:	f025 0503 	bic.w	r5, r5, #3
 8009e4a:	3508      	adds	r5, #8
 8009e4c:	2d0c      	cmp	r5, #12
 8009e4e:	bf38      	it	cc
 8009e50:	250c      	movcc	r5, #12
 8009e52:	4629      	mov	r1, r5
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff ffa5 	bl	8009da4 <sbrk_aligned>
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d02b      	beq.n	8009eb6 <_malloc_r+0xd2>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	442b      	add	r3, r5
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	e00e      	b.n	8009e84 <_malloc_r+0xa0>
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	1b52      	subs	r2, r2, r5
 8009e6a:	d41e      	bmi.n	8009eaa <_malloc_r+0xc6>
 8009e6c:	2a0b      	cmp	r2, #11
 8009e6e:	d916      	bls.n	8009e9e <_malloc_r+0xba>
 8009e70:	1961      	adds	r1, r4, r5
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	6025      	str	r5, [r4, #0]
 8009e76:	bf18      	it	ne
 8009e78:	6059      	strne	r1, [r3, #4]
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	bf08      	it	eq
 8009e7e:	6031      	streq	r1, [r6, #0]
 8009e80:	5162      	str	r2, [r4, r5]
 8009e82:	604b      	str	r3, [r1, #4]
 8009e84:	4638      	mov	r0, r7
 8009e86:	f104 060b 	add.w	r6, r4, #11
 8009e8a:	f000 f9ed 	bl	800a268 <__malloc_unlock>
 8009e8e:	f026 0607 	bic.w	r6, r6, #7
 8009e92:	1d23      	adds	r3, r4, #4
 8009e94:	1af2      	subs	r2, r6, r3
 8009e96:	d0b6      	beq.n	8009e06 <_malloc_r+0x22>
 8009e98:	1b9b      	subs	r3, r3, r6
 8009e9a:	50a3      	str	r3, [r4, r2]
 8009e9c:	e7b3      	b.n	8009e06 <_malloc_r+0x22>
 8009e9e:	6862      	ldr	r2, [r4, #4]
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	bf0c      	ite	eq
 8009ea4:	6032      	streq	r2, [r6, #0]
 8009ea6:	605a      	strne	r2, [r3, #4]
 8009ea8:	e7ec      	b.n	8009e84 <_malloc_r+0xa0>
 8009eaa:	4623      	mov	r3, r4
 8009eac:	6864      	ldr	r4, [r4, #4]
 8009eae:	e7b2      	b.n	8009e16 <_malloc_r+0x32>
 8009eb0:	4634      	mov	r4, r6
 8009eb2:	6876      	ldr	r6, [r6, #4]
 8009eb4:	e7b9      	b.n	8009e2a <_malloc_r+0x46>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f000 f9d4 	bl	800a268 <__malloc_unlock>
 8009ec0:	e7a1      	b.n	8009e06 <_malloc_r+0x22>
 8009ec2:	6025      	str	r5, [r4, #0]
 8009ec4:	e7de      	b.n	8009e84 <_malloc_r+0xa0>
 8009ec6:	bf00      	nop
 8009ec8:	20000604 	.word	0x20000604

08009ecc <__ssputs_r>:
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	688e      	ldr	r6, [r1, #8]
 8009ed2:	429e      	cmp	r6, r3
 8009ed4:	4682      	mov	sl, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	4690      	mov	r8, r2
 8009eda:	461f      	mov	r7, r3
 8009edc:	d838      	bhi.n	8009f50 <__ssputs_r+0x84>
 8009ede:	898a      	ldrh	r2, [r1, #12]
 8009ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ee4:	d032      	beq.n	8009f4c <__ssputs_r+0x80>
 8009ee6:	6825      	ldr	r5, [r4, #0]
 8009ee8:	6909      	ldr	r1, [r1, #16]
 8009eea:	eba5 0901 	sub.w	r9, r5, r1
 8009eee:	6965      	ldr	r5, [r4, #20]
 8009ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef8:	3301      	adds	r3, #1
 8009efa:	444b      	add	r3, r9
 8009efc:	106d      	asrs	r5, r5, #1
 8009efe:	429d      	cmp	r5, r3
 8009f00:	bf38      	it	cc
 8009f02:	461d      	movcc	r5, r3
 8009f04:	0553      	lsls	r3, r2, #21
 8009f06:	d531      	bpl.n	8009f6c <__ssputs_r+0xa0>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7ff ff6b 	bl	8009de4 <_malloc_r>
 8009f0e:	4606      	mov	r6, r0
 8009f10:	b950      	cbnz	r0, 8009f28 <__ssputs_r+0x5c>
 8009f12:	230c      	movs	r3, #12
 8009f14:	f8ca 3000 	str.w	r3, [sl]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	f7ff fb46 	bl	80095bc <memcpy>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	6126      	str	r6, [r4, #16]
 8009f3e:	6165      	str	r5, [r4, #20]
 8009f40:	444e      	add	r6, r9
 8009f42:	eba5 0509 	sub.w	r5, r5, r9
 8009f46:	6026      	str	r6, [r4, #0]
 8009f48:	60a5      	str	r5, [r4, #8]
 8009f4a:	463e      	mov	r6, r7
 8009f4c:	42be      	cmp	r6, r7
 8009f4e:	d900      	bls.n	8009f52 <__ssputs_r+0x86>
 8009f50:	463e      	mov	r6, r7
 8009f52:	6820      	ldr	r0, [r4, #0]
 8009f54:	4632      	mov	r2, r6
 8009f56:	4641      	mov	r1, r8
 8009f58:	f000 f966 	bl	800a228 <memmove>
 8009f5c:	68a3      	ldr	r3, [r4, #8]
 8009f5e:	1b9b      	subs	r3, r3, r6
 8009f60:	60a3      	str	r3, [r4, #8]
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	4433      	add	r3, r6
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7db      	b.n	8009f24 <__ssputs_r+0x58>
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	f000 f981 	bl	800a274 <_realloc_r>
 8009f72:	4606      	mov	r6, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d1e1      	bne.n	8009f3c <__ssputs_r+0x70>
 8009f78:	6921      	ldr	r1, [r4, #16]
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f7ff fec6 	bl	8009d0c <_free_r>
 8009f80:	e7c7      	b.n	8009f12 <__ssputs_r+0x46>
	...

08009f84 <_svfiprintf_r>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	4698      	mov	r8, r3
 8009f8a:	898b      	ldrh	r3, [r1, #12]
 8009f8c:	061b      	lsls	r3, r3, #24
 8009f8e:	b09d      	sub	sp, #116	; 0x74
 8009f90:	4607      	mov	r7, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	d50e      	bpl.n	8009fb6 <_svfiprintf_r+0x32>
 8009f98:	690b      	ldr	r3, [r1, #16]
 8009f9a:	b963      	cbnz	r3, 8009fb6 <_svfiprintf_r+0x32>
 8009f9c:	2140      	movs	r1, #64	; 0x40
 8009f9e:	f7ff ff21 	bl	8009de4 <_malloc_r>
 8009fa2:	6028      	str	r0, [r5, #0]
 8009fa4:	6128      	str	r0, [r5, #16]
 8009fa6:	b920      	cbnz	r0, 8009fb2 <_svfiprintf_r+0x2e>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	e0d1      	b.n	800a156 <_svfiprintf_r+0x1d2>
 8009fb2:	2340      	movs	r3, #64	; 0x40
 8009fb4:	616b      	str	r3, [r5, #20]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fba:	2320      	movs	r3, #32
 8009fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc4:	2330      	movs	r3, #48	; 0x30
 8009fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a170 <_svfiprintf_r+0x1ec>
 8009fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fce:	f04f 0901 	mov.w	r9, #1
 8009fd2:	4623      	mov	r3, r4
 8009fd4:	469a      	mov	sl, r3
 8009fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fda:	b10a      	cbz	r2, 8009fe0 <_svfiprintf_r+0x5c>
 8009fdc:	2a25      	cmp	r2, #37	; 0x25
 8009fde:	d1f9      	bne.n	8009fd4 <_svfiprintf_r+0x50>
 8009fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe4:	d00b      	beq.n	8009ffe <_svfiprintf_r+0x7a>
 8009fe6:	465b      	mov	r3, fp
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff ff6d 	bl	8009ecc <__ssputs_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f000 80aa 	beq.w	800a14c <_svfiprintf_r+0x1c8>
 8009ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ffa:	445a      	add	r2, fp
 8009ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ffe:	f89a 3000 	ldrb.w	r3, [sl]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80a2 	beq.w	800a14c <_svfiprintf_r+0x1c8>
 800a008:	2300      	movs	r3, #0
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295
 800a00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a012:	f10a 0a01 	add.w	sl, sl, #1
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	9307      	str	r3, [sp, #28]
 800a01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a01e:	931a      	str	r3, [sp, #104]	; 0x68
 800a020:	4654      	mov	r4, sl
 800a022:	2205      	movs	r2, #5
 800a024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a028:	4851      	ldr	r0, [pc, #324]	; (800a170 <_svfiprintf_r+0x1ec>)
 800a02a:	f7f6 f901 	bl	8000230 <memchr>
 800a02e:	9a04      	ldr	r2, [sp, #16]
 800a030:	b9d8      	cbnz	r0, 800a06a <_svfiprintf_r+0xe6>
 800a032:	06d0      	lsls	r0, r2, #27
 800a034:	bf44      	itt	mi
 800a036:	2320      	movmi	r3, #32
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03c:	0711      	lsls	r1, r2, #28
 800a03e:	bf44      	itt	mi
 800a040:	232b      	movmi	r3, #43	; 0x2b
 800a042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a046:	f89a 3000 	ldrb.w	r3, [sl]
 800a04a:	2b2a      	cmp	r3, #42	; 0x2a
 800a04c:	d015      	beq.n	800a07a <_svfiprintf_r+0xf6>
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	4654      	mov	r4, sl
 800a052:	2000      	movs	r0, #0
 800a054:	f04f 0c0a 	mov.w	ip, #10
 800a058:	4621      	mov	r1, r4
 800a05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a05e:	3b30      	subs	r3, #48	; 0x30
 800a060:	2b09      	cmp	r3, #9
 800a062:	d94e      	bls.n	800a102 <_svfiprintf_r+0x17e>
 800a064:	b1b0      	cbz	r0, 800a094 <_svfiprintf_r+0x110>
 800a066:	9207      	str	r2, [sp, #28]
 800a068:	e014      	b.n	800a094 <_svfiprintf_r+0x110>
 800a06a:	eba0 0308 	sub.w	r3, r0, r8
 800a06e:	fa09 f303 	lsl.w	r3, r9, r3
 800a072:	4313      	orrs	r3, r2
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	46a2      	mov	sl, r4
 800a078:	e7d2      	b.n	800a020 <_svfiprintf_r+0x9c>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	1d19      	adds	r1, r3, #4
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	9103      	str	r1, [sp, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	bfbb      	ittet	lt
 800a086:	425b      	neglt	r3, r3
 800a088:	f042 0202 	orrlt.w	r2, r2, #2
 800a08c:	9307      	strge	r3, [sp, #28]
 800a08e:	9307      	strlt	r3, [sp, #28]
 800a090:	bfb8      	it	lt
 800a092:	9204      	strlt	r2, [sp, #16]
 800a094:	7823      	ldrb	r3, [r4, #0]
 800a096:	2b2e      	cmp	r3, #46	; 0x2e
 800a098:	d10c      	bne.n	800a0b4 <_svfiprintf_r+0x130>
 800a09a:	7863      	ldrb	r3, [r4, #1]
 800a09c:	2b2a      	cmp	r3, #42	; 0x2a
 800a09e:	d135      	bne.n	800a10c <_svfiprintf_r+0x188>
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	9203      	str	r2, [sp, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bfb8      	it	lt
 800a0ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0b0:	3402      	adds	r4, #2
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a180 <_svfiprintf_r+0x1fc>
 800a0b8:	7821      	ldrb	r1, [r4, #0]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	4650      	mov	r0, sl
 800a0be:	f7f6 f8b7 	bl	8000230 <memchr>
 800a0c2:	b140      	cbz	r0, 800a0d6 <_svfiprintf_r+0x152>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	4303      	orrs	r3, r0
 800a0d2:	3401      	adds	r4, #1
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0da:	4826      	ldr	r0, [pc, #152]	; (800a174 <_svfiprintf_r+0x1f0>)
 800a0dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0e0:	2206      	movs	r2, #6
 800a0e2:	f7f6 f8a5 	bl	8000230 <memchr>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d038      	beq.n	800a15c <_svfiprintf_r+0x1d8>
 800a0ea:	4b23      	ldr	r3, [pc, #140]	; (800a178 <_svfiprintf_r+0x1f4>)
 800a0ec:	bb1b      	cbnz	r3, 800a136 <_svfiprintf_r+0x1b2>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	3307      	adds	r3, #7
 800a0f2:	f023 0307 	bic.w	r3, r3, #7
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fc:	4433      	add	r3, r6
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	e767      	b.n	8009fd2 <_svfiprintf_r+0x4e>
 800a102:	fb0c 3202 	mla	r2, ip, r2, r3
 800a106:	460c      	mov	r4, r1
 800a108:	2001      	movs	r0, #1
 800a10a:	e7a5      	b.n	800a058 <_svfiprintf_r+0xd4>
 800a10c:	2300      	movs	r3, #0
 800a10e:	3401      	adds	r4, #1
 800a110:	9305      	str	r3, [sp, #20]
 800a112:	4619      	mov	r1, r3
 800a114:	f04f 0c0a 	mov.w	ip, #10
 800a118:	4620      	mov	r0, r4
 800a11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a11e:	3a30      	subs	r2, #48	; 0x30
 800a120:	2a09      	cmp	r2, #9
 800a122:	d903      	bls.n	800a12c <_svfiprintf_r+0x1a8>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0c5      	beq.n	800a0b4 <_svfiprintf_r+0x130>
 800a128:	9105      	str	r1, [sp, #20]
 800a12a:	e7c3      	b.n	800a0b4 <_svfiprintf_r+0x130>
 800a12c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a130:	4604      	mov	r4, r0
 800a132:	2301      	movs	r3, #1
 800a134:	e7f0      	b.n	800a118 <_svfiprintf_r+0x194>
 800a136:	ab03      	add	r3, sp, #12
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	462a      	mov	r2, r5
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <_svfiprintf_r+0x1f8>)
 800a13e:	a904      	add	r1, sp, #16
 800a140:	4638      	mov	r0, r7
 800a142:	f7fd ffcb 	bl	80080dc <_printf_float>
 800a146:	1c42      	adds	r2, r0, #1
 800a148:	4606      	mov	r6, r0
 800a14a:	d1d6      	bne.n	800a0fa <_svfiprintf_r+0x176>
 800a14c:	89ab      	ldrh	r3, [r5, #12]
 800a14e:	065b      	lsls	r3, r3, #25
 800a150:	f53f af2c 	bmi.w	8009fac <_svfiprintf_r+0x28>
 800a154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a156:	b01d      	add	sp, #116	; 0x74
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	462a      	mov	r2, r5
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <_svfiprintf_r+0x1f8>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4638      	mov	r0, r7
 800a168:	f7fe fa5c 	bl	8008624 <_printf_i>
 800a16c:	e7eb      	b.n	800a146 <_svfiprintf_r+0x1c2>
 800a16e:	bf00      	nop
 800a170:	0800b02c 	.word	0x0800b02c
 800a174:	0800b036 	.word	0x0800b036
 800a178:	080080dd 	.word	0x080080dd
 800a17c:	08009ecd 	.word	0x08009ecd
 800a180:	0800b032 	.word	0x0800b032

0800a184 <_sbrk_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	; (800a1a0 <_sbrk_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f8 f8a2 	bl	80022d8 <_sbrk>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_sbrk_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_sbrk_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	2000060c 	.word	0x2000060c

0800a1a4 <__assert_func>:
 800a1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <__assert_func+0x2c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	68d8      	ldr	r0, [r3, #12]
 800a1b2:	b14c      	cbz	r4, 800a1c8 <__assert_func+0x24>
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <__assert_func+0x30>)
 800a1b6:	9100      	str	r1, [sp, #0]
 800a1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <__assert_func+0x34>)
 800a1be:	462b      	mov	r3, r5
 800a1c0:	f000 f80e 	bl	800a1e0 <fiprintf>
 800a1c4:	f000 faac 	bl	800a720 <abort>
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <__assert_func+0x38>)
 800a1ca:	461c      	mov	r4, r3
 800a1cc:	e7f3      	b.n	800a1b6 <__assert_func+0x12>
 800a1ce:	bf00      	nop
 800a1d0:	20000038 	.word	0x20000038
 800a1d4:	0800b03d 	.word	0x0800b03d
 800a1d8:	0800b04a 	.word	0x0800b04a
 800a1dc:	0800b078 	.word	0x0800b078

0800a1e0 <fiprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b503      	push	{r0, r1, lr}
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	4805      	ldr	r0, [pc, #20]	; (800a200 <fiprintf+0x20>)
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f000 f897 	bl	800a324 <_vfiprintf_r>
 800a1f6:	b002      	add	sp, #8
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	20000038 	.word	0x20000038

0800a204 <__ascii_mbtowc>:
 800a204:	b082      	sub	sp, #8
 800a206:	b901      	cbnz	r1, 800a20a <__ascii_mbtowc+0x6>
 800a208:	a901      	add	r1, sp, #4
 800a20a:	b142      	cbz	r2, 800a21e <__ascii_mbtowc+0x1a>
 800a20c:	b14b      	cbz	r3, 800a222 <__ascii_mbtowc+0x1e>
 800a20e:	7813      	ldrb	r3, [r2, #0]
 800a210:	600b      	str	r3, [r1, #0]
 800a212:	7812      	ldrb	r2, [r2, #0]
 800a214:	1e10      	subs	r0, r2, #0
 800a216:	bf18      	it	ne
 800a218:	2001      	movne	r0, #1
 800a21a:	b002      	add	sp, #8
 800a21c:	4770      	bx	lr
 800a21e:	4610      	mov	r0, r2
 800a220:	e7fb      	b.n	800a21a <__ascii_mbtowc+0x16>
 800a222:	f06f 0001 	mvn.w	r0, #1
 800a226:	e7f8      	b.n	800a21a <__ascii_mbtowc+0x16>

0800a228 <memmove>:
 800a228:	4288      	cmp	r0, r1
 800a22a:	b510      	push	{r4, lr}
 800a22c:	eb01 0402 	add.w	r4, r1, r2
 800a230:	d902      	bls.n	800a238 <memmove+0x10>
 800a232:	4284      	cmp	r4, r0
 800a234:	4623      	mov	r3, r4
 800a236:	d807      	bhi.n	800a248 <memmove+0x20>
 800a238:	1e43      	subs	r3, r0, #1
 800a23a:	42a1      	cmp	r1, r4
 800a23c:	d008      	beq.n	800a250 <memmove+0x28>
 800a23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a246:	e7f8      	b.n	800a23a <memmove+0x12>
 800a248:	4402      	add	r2, r0
 800a24a:	4601      	mov	r1, r0
 800a24c:	428a      	cmp	r2, r1
 800a24e:	d100      	bne.n	800a252 <memmove+0x2a>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a25a:	e7f7      	b.n	800a24c <memmove+0x24>

0800a25c <__malloc_lock>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__malloc_lock+0x8>)
 800a25e:	f000 bc1f 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20000610 	.word	0x20000610

0800a268 <__malloc_unlock>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__malloc_unlock+0x8>)
 800a26a:	f000 bc1a 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20000610 	.word	0x20000610

0800a274 <_realloc_r>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	4680      	mov	r8, r0
 800a27a:	4614      	mov	r4, r2
 800a27c:	460e      	mov	r6, r1
 800a27e:	b921      	cbnz	r1, 800a28a <_realloc_r+0x16>
 800a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	4611      	mov	r1, r2
 800a286:	f7ff bdad 	b.w	8009de4 <_malloc_r>
 800a28a:	b92a      	cbnz	r2, 800a298 <_realloc_r+0x24>
 800a28c:	f7ff fd3e 	bl	8009d0c <_free_r>
 800a290:	4625      	mov	r5, r4
 800a292:	4628      	mov	r0, r5
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	f000 fc6a 	bl	800ab70 <_malloc_usable_size_r>
 800a29c:	4284      	cmp	r4, r0
 800a29e:	4607      	mov	r7, r0
 800a2a0:	d802      	bhi.n	800a2a8 <_realloc_r+0x34>
 800a2a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a6:	d812      	bhi.n	800a2ce <_realloc_r+0x5a>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7ff fd9a 	bl	8009de4 <_malloc_r>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0ed      	beq.n	800a292 <_realloc_r+0x1e>
 800a2b6:	42bc      	cmp	r4, r7
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	bf28      	it	cs
 800a2be:	463a      	movcs	r2, r7
 800a2c0:	f7ff f97c 	bl	80095bc <memcpy>
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	f7ff fd20 	bl	8009d0c <_free_r>
 800a2cc:	e7e1      	b.n	800a292 <_realloc_r+0x1e>
 800a2ce:	4635      	mov	r5, r6
 800a2d0:	e7df      	b.n	800a292 <_realloc_r+0x1e>

0800a2d2 <__sfputc_r>:
 800a2d2:	6893      	ldr	r3, [r2, #8]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	b410      	push	{r4}
 800a2da:	6093      	str	r3, [r2, #8]
 800a2dc:	da08      	bge.n	800a2f0 <__sfputc_r+0x1e>
 800a2de:	6994      	ldr	r4, [r2, #24]
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	db01      	blt.n	800a2e8 <__sfputc_r+0x16>
 800a2e4:	290a      	cmp	r1, #10
 800a2e6:	d103      	bne.n	800a2f0 <__sfputc_r+0x1e>
 800a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ec:	f000 b94a 	b.w	800a584 <__swbuf_r>
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	1c58      	adds	r0, r3, #1
 800a2f4:	6010      	str	r0, [r2, #0]
 800a2f6:	7019      	strb	r1, [r3, #0]
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <__sfputs_r>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	4614      	mov	r4, r2
 800a308:	18d5      	adds	r5, r2, r3
 800a30a:	42ac      	cmp	r4, r5
 800a30c:	d101      	bne.n	800a312 <__sfputs_r+0x12>
 800a30e:	2000      	movs	r0, #0
 800a310:	e007      	b.n	800a322 <__sfputs_r+0x22>
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	463a      	mov	r2, r7
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ffda 	bl	800a2d2 <__sfputc_r>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d1f3      	bne.n	800a30a <__sfputs_r+0xa>
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a324 <_vfiprintf_r>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	460d      	mov	r5, r1
 800a32a:	b09d      	sub	sp, #116	; 0x74
 800a32c:	4614      	mov	r4, r2
 800a32e:	4698      	mov	r8, r3
 800a330:	4606      	mov	r6, r0
 800a332:	b118      	cbz	r0, 800a33c <_vfiprintf_r+0x18>
 800a334:	6983      	ldr	r3, [r0, #24]
 800a336:	b90b      	cbnz	r3, 800a33c <_vfiprintf_r+0x18>
 800a338:	f000 fb14 	bl	800a964 <__sinit>
 800a33c:	4b89      	ldr	r3, [pc, #548]	; (800a564 <_vfiprintf_r+0x240>)
 800a33e:	429d      	cmp	r5, r3
 800a340:	d11b      	bne.n	800a37a <_vfiprintf_r+0x56>
 800a342:	6875      	ldr	r5, [r6, #4]
 800a344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	d405      	bmi.n	800a356 <_vfiprintf_r+0x32>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	059a      	lsls	r2, r3, #22
 800a34e:	d402      	bmi.n	800a356 <_vfiprintf_r+0x32>
 800a350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a352:	f000 fba5 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	071b      	lsls	r3, r3, #28
 800a35a:	d501      	bpl.n	800a360 <_vfiprintf_r+0x3c>
 800a35c:	692b      	ldr	r3, [r5, #16]
 800a35e:	b9eb      	cbnz	r3, 800a39c <_vfiprintf_r+0x78>
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f000 f96e 	bl	800a644 <__swsetup_r>
 800a368:	b1c0      	cbz	r0, 800a39c <_vfiprintf_r+0x78>
 800a36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a36c:	07dc      	lsls	r4, r3, #31
 800a36e:	d50e      	bpl.n	800a38e <_vfiprintf_r+0x6a>
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	b01d      	add	sp, #116	; 0x74
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	4b7b      	ldr	r3, [pc, #492]	; (800a568 <_vfiprintf_r+0x244>)
 800a37c:	429d      	cmp	r5, r3
 800a37e:	d101      	bne.n	800a384 <_vfiprintf_r+0x60>
 800a380:	68b5      	ldr	r5, [r6, #8]
 800a382:	e7df      	b.n	800a344 <_vfiprintf_r+0x20>
 800a384:	4b79      	ldr	r3, [pc, #484]	; (800a56c <_vfiprintf_r+0x248>)
 800a386:	429d      	cmp	r5, r3
 800a388:	bf08      	it	eq
 800a38a:	68f5      	ldreq	r5, [r6, #12]
 800a38c:	e7da      	b.n	800a344 <_vfiprintf_r+0x20>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	0598      	lsls	r0, r3, #22
 800a392:	d4ed      	bmi.n	800a370 <_vfiprintf_r+0x4c>
 800a394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a396:	f000 fb84 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a39a:	e7e9      	b.n	800a370 <_vfiprintf_r+0x4c>
 800a39c:	2300      	movs	r3, #0
 800a39e:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3aa:	2330      	movs	r3, #48	; 0x30
 800a3ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a570 <_vfiprintf_r+0x24c>
 800a3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b4:	f04f 0901 	mov.w	r9, #1
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c0:	b10a      	cbz	r2, 800a3c6 <_vfiprintf_r+0xa2>
 800a3c2:	2a25      	cmp	r2, #37	; 0x25
 800a3c4:	d1f9      	bne.n	800a3ba <_vfiprintf_r+0x96>
 800a3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ca:	d00b      	beq.n	800a3e4 <_vfiprintf_r+0xc0>
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ff94 	bl	800a300 <__sfputs_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f000 80aa 	beq.w	800a532 <_vfiprintf_r+0x20e>
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	445a      	add	r2, fp
 800a3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80a2 	beq.w	800a532 <_vfiprintf_r+0x20e>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f8:	f10a 0a01 	add.w	sl, sl, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a404:	931a      	str	r3, [sp, #104]	; 0x68
 800a406:	4654      	mov	r4, sl
 800a408:	2205      	movs	r2, #5
 800a40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40e:	4858      	ldr	r0, [pc, #352]	; (800a570 <_vfiprintf_r+0x24c>)
 800a410:	f7f5 ff0e 	bl	8000230 <memchr>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	b9d8      	cbnz	r0, 800a450 <_vfiprintf_r+0x12c>
 800a418:	06d1      	lsls	r1, r2, #27
 800a41a:	bf44      	itt	mi
 800a41c:	2320      	movmi	r3, #32
 800a41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a422:	0713      	lsls	r3, r2, #28
 800a424:	bf44      	itt	mi
 800a426:	232b      	movmi	r3, #43	; 0x2b
 800a428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b2a      	cmp	r3, #42	; 0x2a
 800a432:	d015      	beq.n	800a460 <_vfiprintf_r+0x13c>
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	4654      	mov	r4, sl
 800a438:	2000      	movs	r0, #0
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4621      	mov	r1, r4
 800a440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a444:	3b30      	subs	r3, #48	; 0x30
 800a446:	2b09      	cmp	r3, #9
 800a448:	d94e      	bls.n	800a4e8 <_vfiprintf_r+0x1c4>
 800a44a:	b1b0      	cbz	r0, 800a47a <_vfiprintf_r+0x156>
 800a44c:	9207      	str	r2, [sp, #28]
 800a44e:	e014      	b.n	800a47a <_vfiprintf_r+0x156>
 800a450:	eba0 0308 	sub.w	r3, r0, r8
 800a454:	fa09 f303 	lsl.w	r3, r9, r3
 800a458:	4313      	orrs	r3, r2
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	46a2      	mov	sl, r4
 800a45e:	e7d2      	b.n	800a406 <_vfiprintf_r+0xe2>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	9103      	str	r1, [sp, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bfbb      	ittet	lt
 800a46c:	425b      	neglt	r3, r3
 800a46e:	f042 0202 	orrlt.w	r2, r2, #2
 800a472:	9307      	strge	r3, [sp, #28]
 800a474:	9307      	strlt	r3, [sp, #28]
 800a476:	bfb8      	it	lt
 800a478:	9204      	strlt	r2, [sp, #16]
 800a47a:	7823      	ldrb	r3, [r4, #0]
 800a47c:	2b2e      	cmp	r3, #46	; 0x2e
 800a47e:	d10c      	bne.n	800a49a <_vfiprintf_r+0x176>
 800a480:	7863      	ldrb	r3, [r4, #1]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d135      	bne.n	800a4f2 <_vfiprintf_r+0x1ce>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	1d1a      	adds	r2, r3, #4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	9203      	str	r2, [sp, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfb8      	it	lt
 800a492:	f04f 33ff 	movlt.w	r3, #4294967295
 800a496:	3402      	adds	r4, #2
 800a498:	9305      	str	r3, [sp, #20]
 800a49a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a580 <_vfiprintf_r+0x25c>
 800a49e:	7821      	ldrb	r1, [r4, #0]
 800a4a0:	2203      	movs	r2, #3
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f7f5 fec4 	bl	8000230 <memchr>
 800a4a8:	b140      	cbz	r0, 800a4bc <_vfiprintf_r+0x198>
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	eba0 000a 	sub.w	r0, r0, sl
 800a4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	4303      	orrs	r3, r0
 800a4b8:	3401      	adds	r4, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c0:	482c      	ldr	r0, [pc, #176]	; (800a574 <_vfiprintf_r+0x250>)
 800a4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c6:	2206      	movs	r2, #6
 800a4c8:	f7f5 feb2 	bl	8000230 <memchr>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d03f      	beq.n	800a550 <_vfiprintf_r+0x22c>
 800a4d0:	4b29      	ldr	r3, [pc, #164]	; (800a578 <_vfiprintf_r+0x254>)
 800a4d2:	bb1b      	cbnz	r3, 800a51c <_vfiprintf_r+0x1f8>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	3308      	adds	r3, #8
 800a4de:	9303      	str	r3, [sp, #12]
 800a4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e2:	443b      	add	r3, r7
 800a4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e6:	e767      	b.n	800a3b8 <_vfiprintf_r+0x94>
 800a4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	e7a5      	b.n	800a43e <_vfiprintf_r+0x11a>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	3401      	adds	r4, #1
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4620      	mov	r0, r4
 800a500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a504:	3a30      	subs	r2, #48	; 0x30
 800a506:	2a09      	cmp	r2, #9
 800a508:	d903      	bls.n	800a512 <_vfiprintf_r+0x1ee>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c5      	beq.n	800a49a <_vfiprintf_r+0x176>
 800a50e:	9105      	str	r1, [sp, #20]
 800a510:	e7c3      	b.n	800a49a <_vfiprintf_r+0x176>
 800a512:	fb0c 2101 	mla	r1, ip, r1, r2
 800a516:	4604      	mov	r4, r0
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f0      	b.n	800a4fe <_vfiprintf_r+0x1da>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b16      	ldr	r3, [pc, #88]	; (800a57c <_vfiprintf_r+0x258>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4630      	mov	r0, r6
 800a528:	f7fd fdd8 	bl	80080dc <_printf_float>
 800a52c:	4607      	mov	r7, r0
 800a52e:	1c78      	adds	r0, r7, #1
 800a530:	d1d6      	bne.n	800a4e0 <_vfiprintf_r+0x1bc>
 800a532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d405      	bmi.n	800a544 <_vfiprintf_r+0x220>
 800a538:	89ab      	ldrh	r3, [r5, #12]
 800a53a:	059a      	lsls	r2, r3, #22
 800a53c:	d402      	bmi.n	800a544 <_vfiprintf_r+0x220>
 800a53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a540:	f000 faaf 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a544:	89ab      	ldrh	r3, [r5, #12]
 800a546:	065b      	lsls	r3, r3, #25
 800a548:	f53f af12 	bmi.w	800a370 <_vfiprintf_r+0x4c>
 800a54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54e:	e711      	b.n	800a374 <_vfiprintf_r+0x50>
 800a550:	ab03      	add	r3, sp, #12
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	462a      	mov	r2, r5
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <_vfiprintf_r+0x258>)
 800a558:	a904      	add	r1, sp, #16
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7fe f862 	bl	8008624 <_printf_i>
 800a560:	e7e4      	b.n	800a52c <_vfiprintf_r+0x208>
 800a562:	bf00      	nop
 800a564:	0800b1a4 	.word	0x0800b1a4
 800a568:	0800b1c4 	.word	0x0800b1c4
 800a56c:	0800b184 	.word	0x0800b184
 800a570:	0800b02c 	.word	0x0800b02c
 800a574:	0800b036 	.word	0x0800b036
 800a578:	080080dd 	.word	0x080080dd
 800a57c:	0800a301 	.word	0x0800a301
 800a580:	0800b032 	.word	0x0800b032

0800a584 <__swbuf_r>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	460e      	mov	r6, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	4605      	mov	r5, r0
 800a58c:	b118      	cbz	r0, 800a596 <__swbuf_r+0x12>
 800a58e:	6983      	ldr	r3, [r0, #24]
 800a590:	b90b      	cbnz	r3, 800a596 <__swbuf_r+0x12>
 800a592:	f000 f9e7 	bl	800a964 <__sinit>
 800a596:	4b21      	ldr	r3, [pc, #132]	; (800a61c <__swbuf_r+0x98>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	d12b      	bne.n	800a5f4 <__swbuf_r+0x70>
 800a59c:	686c      	ldr	r4, [r5, #4]
 800a59e:	69a3      	ldr	r3, [r4, #24]
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	071a      	lsls	r2, r3, #28
 800a5a6:	d52f      	bpl.n	800a608 <__swbuf_r+0x84>
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	b36b      	cbz	r3, 800a608 <__swbuf_r+0x84>
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	6820      	ldr	r0, [r4, #0]
 800a5b0:	1ac0      	subs	r0, r0, r3
 800a5b2:	6963      	ldr	r3, [r4, #20]
 800a5b4:	b2f6      	uxtb	r6, r6
 800a5b6:	4283      	cmp	r3, r0
 800a5b8:	4637      	mov	r7, r6
 800a5ba:	dc04      	bgt.n	800a5c6 <__swbuf_r+0x42>
 800a5bc:	4621      	mov	r1, r4
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 f93c 	bl	800a83c <_fflush_r>
 800a5c4:	bb30      	cbnz	r0, 800a614 <__swbuf_r+0x90>
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	701e      	strb	r6, [r3, #0]
 800a5d4:	6963      	ldr	r3, [r4, #20]
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	4283      	cmp	r3, r0
 800a5da:	d004      	beq.n	800a5e6 <__swbuf_r+0x62>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	07db      	lsls	r3, r3, #31
 800a5e0:	d506      	bpl.n	800a5f0 <__swbuf_r+0x6c>
 800a5e2:	2e0a      	cmp	r6, #10
 800a5e4:	d104      	bne.n	800a5f0 <__swbuf_r+0x6c>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 f927 	bl	800a83c <_fflush_r>
 800a5ee:	b988      	cbnz	r0, 800a614 <__swbuf_r+0x90>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <__swbuf_r+0x9c>)
 800a5f6:	429c      	cmp	r4, r3
 800a5f8:	d101      	bne.n	800a5fe <__swbuf_r+0x7a>
 800a5fa:	68ac      	ldr	r4, [r5, #8]
 800a5fc:	e7cf      	b.n	800a59e <__swbuf_r+0x1a>
 800a5fe:	4b09      	ldr	r3, [pc, #36]	; (800a624 <__swbuf_r+0xa0>)
 800a600:	429c      	cmp	r4, r3
 800a602:	bf08      	it	eq
 800a604:	68ec      	ldreq	r4, [r5, #12]
 800a606:	e7ca      	b.n	800a59e <__swbuf_r+0x1a>
 800a608:	4621      	mov	r1, r4
 800a60a:	4628      	mov	r0, r5
 800a60c:	f000 f81a 	bl	800a644 <__swsetup_r>
 800a610:	2800      	cmp	r0, #0
 800a612:	d0cb      	beq.n	800a5ac <__swbuf_r+0x28>
 800a614:	f04f 37ff 	mov.w	r7, #4294967295
 800a618:	e7ea      	b.n	800a5f0 <__swbuf_r+0x6c>
 800a61a:	bf00      	nop
 800a61c:	0800b1a4 	.word	0x0800b1a4
 800a620:	0800b1c4 	.word	0x0800b1c4
 800a624:	0800b184 	.word	0x0800b184

0800a628 <__ascii_wctomb>:
 800a628:	b149      	cbz	r1, 800a63e <__ascii_wctomb+0x16>
 800a62a:	2aff      	cmp	r2, #255	; 0xff
 800a62c:	bf85      	ittet	hi
 800a62e:	238a      	movhi	r3, #138	; 0x8a
 800a630:	6003      	strhi	r3, [r0, #0]
 800a632:	700a      	strbls	r2, [r1, #0]
 800a634:	f04f 30ff 	movhi.w	r0, #4294967295
 800a638:	bf98      	it	ls
 800a63a:	2001      	movls	r0, #1
 800a63c:	4770      	bx	lr
 800a63e:	4608      	mov	r0, r1
 800a640:	4770      	bx	lr
	...

0800a644 <__swsetup_r>:
 800a644:	4b32      	ldr	r3, [pc, #200]	; (800a710 <__swsetup_r+0xcc>)
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	b125      	cbz	r5, 800a65a <__swsetup_r+0x16>
 800a650:	69ab      	ldr	r3, [r5, #24]
 800a652:	b913      	cbnz	r3, 800a65a <__swsetup_r+0x16>
 800a654:	4628      	mov	r0, r5
 800a656:	f000 f985 	bl	800a964 <__sinit>
 800a65a:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <__swsetup_r+0xd0>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	d10f      	bne.n	800a680 <__swsetup_r+0x3c>
 800a660:	686c      	ldr	r4, [r5, #4]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a668:	0719      	lsls	r1, r3, #28
 800a66a:	d42c      	bmi.n	800a6c6 <__swsetup_r+0x82>
 800a66c:	06dd      	lsls	r5, r3, #27
 800a66e:	d411      	bmi.n	800a694 <__swsetup_r+0x50>
 800a670:	2309      	movs	r3, #9
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	e03e      	b.n	800a6fe <__swsetup_r+0xba>
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <__swsetup_r+0xd4>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d101      	bne.n	800a68a <__swsetup_r+0x46>
 800a686:	68ac      	ldr	r4, [r5, #8]
 800a688:	e7eb      	b.n	800a662 <__swsetup_r+0x1e>
 800a68a:	4b24      	ldr	r3, [pc, #144]	; (800a71c <__swsetup_r+0xd8>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	bf08      	it	eq
 800a690:	68ec      	ldreq	r4, [r5, #12]
 800a692:	e7e6      	b.n	800a662 <__swsetup_r+0x1e>
 800a694:	0758      	lsls	r0, r3, #29
 800a696:	d512      	bpl.n	800a6be <__swsetup_r+0x7a>
 800a698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69a:	b141      	cbz	r1, 800a6ae <__swsetup_r+0x6a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__swsetup_r+0x66>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff fb31 	bl	8009d0c <_free_r>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6063      	str	r3, [r4, #4]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f043 0308 	orr.w	r3, r3, #8
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	b94b      	cbnz	r3, 800a6de <__swsetup_r+0x9a>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d4:	d003      	beq.n	800a6de <__swsetup_r+0x9a>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 fa09 	bl	800aaf0 <__smakebuf_r>
 800a6de:	89a0      	ldrh	r0, [r4, #12]
 800a6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e4:	f010 0301 	ands.w	r3, r0, #1
 800a6e8:	d00a      	beq.n	800a700 <__swsetup_r+0xbc>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	6963      	ldr	r3, [r4, #20]
 800a6f0:	425b      	negs	r3, r3
 800a6f2:	61a3      	str	r3, [r4, #24]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	b943      	cbnz	r3, 800a70a <__swsetup_r+0xc6>
 800a6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6fc:	d1ba      	bne.n	800a674 <__swsetup_r+0x30>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	0781      	lsls	r1, r0, #30
 800a702:	bf58      	it	pl
 800a704:	6963      	ldrpl	r3, [r4, #20]
 800a706:	60a3      	str	r3, [r4, #8]
 800a708:	e7f4      	b.n	800a6f4 <__swsetup_r+0xb0>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e7f7      	b.n	800a6fe <__swsetup_r+0xba>
 800a70e:	bf00      	nop
 800a710:	20000038 	.word	0x20000038
 800a714:	0800b1a4 	.word	0x0800b1a4
 800a718:	0800b1c4 	.word	0x0800b1c4
 800a71c:	0800b184 	.word	0x0800b184

0800a720 <abort>:
 800a720:	b508      	push	{r3, lr}
 800a722:	2006      	movs	r0, #6
 800a724:	f000 fa54 	bl	800abd0 <raise>
 800a728:	2001      	movs	r0, #1
 800a72a:	f7f7 fd5d 	bl	80021e8 <_exit>
	...

0800a730 <__sflush_r>:
 800a730:	898a      	ldrh	r2, [r1, #12]
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	4605      	mov	r5, r0
 800a738:	0710      	lsls	r0, r2, #28
 800a73a:	460c      	mov	r4, r1
 800a73c:	d458      	bmi.n	800a7f0 <__sflush_r+0xc0>
 800a73e:	684b      	ldr	r3, [r1, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc05      	bgt.n	800a750 <__sflush_r+0x20>
 800a744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	dc02      	bgt.n	800a750 <__sflush_r+0x20>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a752:	2e00      	cmp	r6, #0
 800a754:	d0f9      	beq.n	800a74a <__sflush_r+0x1a>
 800a756:	2300      	movs	r3, #0
 800a758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a75c:	682f      	ldr	r7, [r5, #0]
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	d032      	beq.n	800a7c8 <__sflush_r+0x98>
 800a762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	075a      	lsls	r2, r3, #29
 800a768:	d505      	bpl.n	800a776 <__sflush_r+0x46>
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a770:	b10b      	cbz	r3, 800a776 <__sflush_r+0x46>
 800a772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a774:	1ac0      	subs	r0, r0, r3
 800a776:	2300      	movs	r3, #0
 800a778:	4602      	mov	r2, r0
 800a77a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	4628      	mov	r0, r5
 800a780:	47b0      	blx	r6
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	d106      	bne.n	800a796 <__sflush_r+0x66>
 800a788:	6829      	ldr	r1, [r5, #0]
 800a78a:	291d      	cmp	r1, #29
 800a78c:	d82c      	bhi.n	800a7e8 <__sflush_r+0xb8>
 800a78e:	4a2a      	ldr	r2, [pc, #168]	; (800a838 <__sflush_r+0x108>)
 800a790:	40ca      	lsrs	r2, r1
 800a792:	07d6      	lsls	r6, r2, #31
 800a794:	d528      	bpl.n	800a7e8 <__sflush_r+0xb8>
 800a796:	2200      	movs	r2, #0
 800a798:	6062      	str	r2, [r4, #4]
 800a79a:	04d9      	lsls	r1, r3, #19
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	6022      	str	r2, [r4, #0]
 800a7a0:	d504      	bpl.n	800a7ac <__sflush_r+0x7c>
 800a7a2:	1c42      	adds	r2, r0, #1
 800a7a4:	d101      	bne.n	800a7aa <__sflush_r+0x7a>
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	b903      	cbnz	r3, 800a7ac <__sflush_r+0x7c>
 800a7aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ae:	602f      	str	r7, [r5, #0]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d0ca      	beq.n	800a74a <__sflush_r+0x1a>
 800a7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d002      	beq.n	800a7c2 <__sflush_r+0x92>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7ff faa5 	bl	8009d0c <_free_r>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7c6:	e7c1      	b.n	800a74c <__sflush_r+0x1c>
 800a7c8:	6a21      	ldr	r1, [r4, #32]
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b0      	blx	r6
 800a7d0:	1c41      	adds	r1, r0, #1
 800a7d2:	d1c7      	bne.n	800a764 <__sflush_r+0x34>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c4      	beq.n	800a764 <__sflush_r+0x34>
 800a7da:	2b1d      	cmp	r3, #29
 800a7dc:	d001      	beq.n	800a7e2 <__sflush_r+0xb2>
 800a7de:	2b16      	cmp	r3, #22
 800a7e0:	d101      	bne.n	800a7e6 <__sflush_r+0xb6>
 800a7e2:	602f      	str	r7, [r5, #0]
 800a7e4:	e7b1      	b.n	800a74a <__sflush_r+0x1a>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e7ad      	b.n	800a74c <__sflush_r+0x1c>
 800a7f0:	690f      	ldr	r7, [r1, #16]
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d0a9      	beq.n	800a74a <__sflush_r+0x1a>
 800a7f6:	0793      	lsls	r3, r2, #30
 800a7f8:	680e      	ldr	r6, [r1, #0]
 800a7fa:	bf08      	it	eq
 800a7fc:	694b      	ldreq	r3, [r1, #20]
 800a7fe:	600f      	str	r7, [r1, #0]
 800a800:	bf18      	it	ne
 800a802:	2300      	movne	r3, #0
 800a804:	eba6 0807 	sub.w	r8, r6, r7
 800a808:	608b      	str	r3, [r1, #8]
 800a80a:	f1b8 0f00 	cmp.w	r8, #0
 800a80e:	dd9c      	ble.n	800a74a <__sflush_r+0x1a>
 800a810:	6a21      	ldr	r1, [r4, #32]
 800a812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a814:	4643      	mov	r3, r8
 800a816:	463a      	mov	r2, r7
 800a818:	4628      	mov	r0, r5
 800a81a:	47b0      	blx	r6
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dc06      	bgt.n	800a82e <__sflush_r+0xfe>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e78e      	b.n	800a74c <__sflush_r+0x1c>
 800a82e:	4407      	add	r7, r0
 800a830:	eba8 0800 	sub.w	r8, r8, r0
 800a834:	e7e9      	b.n	800a80a <__sflush_r+0xda>
 800a836:	bf00      	nop
 800a838:	20400001 	.word	0x20400001

0800a83c <_fflush_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	690b      	ldr	r3, [r1, #16]
 800a840:	4605      	mov	r5, r0
 800a842:	460c      	mov	r4, r1
 800a844:	b913      	cbnz	r3, 800a84c <_fflush_r+0x10>
 800a846:	2500      	movs	r5, #0
 800a848:	4628      	mov	r0, r5
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	b118      	cbz	r0, 800a856 <_fflush_r+0x1a>
 800a84e:	6983      	ldr	r3, [r0, #24]
 800a850:	b90b      	cbnz	r3, 800a856 <_fflush_r+0x1a>
 800a852:	f000 f887 	bl	800a964 <__sinit>
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <_fflush_r+0x6c>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	d11b      	bne.n	800a894 <_fflush_r+0x58>
 800a85c:	686c      	ldr	r4, [r5, #4]
 800a85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0ef      	beq.n	800a846 <_fflush_r+0xa>
 800a866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a868:	07d0      	lsls	r0, r2, #31
 800a86a:	d404      	bmi.n	800a876 <_fflush_r+0x3a>
 800a86c:	0599      	lsls	r1, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_fflush_r+0x3a>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f000 f915 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a876:	4628      	mov	r0, r5
 800a878:	4621      	mov	r1, r4
 800a87a:	f7ff ff59 	bl	800a730 <__sflush_r>
 800a87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a880:	07da      	lsls	r2, r3, #31
 800a882:	4605      	mov	r5, r0
 800a884:	d4e0      	bmi.n	800a848 <_fflush_r+0xc>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	059b      	lsls	r3, r3, #22
 800a88a:	d4dd      	bmi.n	800a848 <_fflush_r+0xc>
 800a88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88e:	f000 f908 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a892:	e7d9      	b.n	800a848 <_fflush_r+0xc>
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <_fflush_r+0x70>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <_fflush_r+0x62>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7df      	b.n	800a85e <_fflush_r+0x22>
 800a89e:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <_fflush_r+0x74>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7da      	b.n	800a85e <_fflush_r+0x22>
 800a8a8:	0800b1a4 	.word	0x0800b1a4
 800a8ac:	0800b1c4 	.word	0x0800b1c4
 800a8b0:	0800b184 	.word	0x0800b184

0800a8b4 <std>:
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c2:	6083      	str	r3, [r0, #8]
 800a8c4:	8181      	strh	r1, [r0, #12]
 800a8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8c8:	81c2      	strh	r2, [r0, #14]
 800a8ca:	6183      	str	r3, [r0, #24]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	305c      	adds	r0, #92	; 0x5c
 800a8d2:	f7fd fb5b 	bl	8007f8c <memset>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <std+0x38>)
 800a8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <std+0x3c>)
 800a8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x40>)
 800a8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x44>)
 800a8e4:	6224      	str	r4, [r4, #32]
 800a8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800ac09 	.word	0x0800ac09
 800a8f0:	0800ac2b 	.word	0x0800ac2b
 800a8f4:	0800ac63 	.word	0x0800ac63
 800a8f8:	0800ac87 	.word	0x0800ac87

0800a8fc <_cleanup_r>:
 800a8fc:	4901      	ldr	r1, [pc, #4]	; (800a904 <_cleanup_r+0x8>)
 800a8fe:	f000 b8af 	b.w	800aa60 <_fwalk_reent>
 800a902:	bf00      	nop
 800a904:	0800a83d 	.word	0x0800a83d

0800a908 <__sfmoreglue>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	2268      	movs	r2, #104	; 0x68
 800a90c:	1e4d      	subs	r5, r1, #1
 800a90e:	4355      	muls	r5, r2
 800a910:	460e      	mov	r6, r1
 800a912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a916:	f7ff fa65 	bl	8009de4 <_malloc_r>
 800a91a:	4604      	mov	r4, r0
 800a91c:	b140      	cbz	r0, 800a930 <__sfmoreglue+0x28>
 800a91e:	2100      	movs	r1, #0
 800a920:	e9c0 1600 	strd	r1, r6, [r0]
 800a924:	300c      	adds	r0, #12
 800a926:	60a0      	str	r0, [r4, #8]
 800a928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a92c:	f7fd fb2e 	bl	8007f8c <memset>
 800a930:	4620      	mov	r0, r4
 800a932:	bd70      	pop	{r4, r5, r6, pc}

0800a934 <__sfp_lock_acquire>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__sfp_lock_acquire+0x8>)
 800a936:	f000 b8b3 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a93a:	bf00      	nop
 800a93c:	20000611 	.word	0x20000611

0800a940 <__sfp_lock_release>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__sfp_lock_release+0x8>)
 800a942:	f000 b8ae 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a946:	bf00      	nop
 800a948:	20000611 	.word	0x20000611

0800a94c <__sinit_lock_acquire>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__sinit_lock_acquire+0x8>)
 800a94e:	f000 b8a7 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	20000612 	.word	0x20000612

0800a958 <__sinit_lock_release>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sinit_lock_release+0x8>)
 800a95a:	f000 b8a2 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	20000612 	.word	0x20000612

0800a964 <__sinit>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	f7ff fff0 	bl	800a94c <__sinit_lock_acquire>
 800a96c:	69a3      	ldr	r3, [r4, #24]
 800a96e:	b11b      	cbz	r3, 800a978 <__sinit+0x14>
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	f7ff bff0 	b.w	800a958 <__sinit_lock_release>
 800a978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a97c:	6523      	str	r3, [r4, #80]	; 0x50
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <__sinit+0x68>)
 800a980:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <__sinit+0x6c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	62a2      	str	r2, [r4, #40]	; 0x28
 800a986:	42a3      	cmp	r3, r4
 800a988:	bf04      	itt	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	61a3      	streq	r3, [r4, #24]
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f820 	bl	800a9d4 <__sfp>
 800a994:	6060      	str	r0, [r4, #4]
 800a996:	4620      	mov	r0, r4
 800a998:	f000 f81c 	bl	800a9d4 <__sfp>
 800a99c:	60a0      	str	r0, [r4, #8]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f818 	bl	800a9d4 <__sfp>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	60e0      	str	r0, [r4, #12]
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	6860      	ldr	r0, [r4, #4]
 800a9ac:	f7ff ff82 	bl	800a8b4 <std>
 800a9b0:	68a0      	ldr	r0, [r4, #8]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	2109      	movs	r1, #9
 800a9b6:	f7ff ff7d 	bl	800a8b4 <std>
 800a9ba:	68e0      	ldr	r0, [r4, #12]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	2112      	movs	r1, #18
 800a9c0:	f7ff ff78 	bl	800a8b4 <std>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	61a3      	str	r3, [r4, #24]
 800a9c8:	e7d2      	b.n	800a970 <__sinit+0xc>
 800a9ca:	bf00      	nop
 800a9cc:	0800ae0c 	.word	0x0800ae0c
 800a9d0:	0800a8fd 	.word	0x0800a8fd

0800a9d4 <__sfp>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f7ff ffac 	bl	800a934 <__sfp_lock_acquire>
 800a9dc:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <__sfp+0x84>)
 800a9de:	681e      	ldr	r6, [r3, #0]
 800a9e0:	69b3      	ldr	r3, [r6, #24]
 800a9e2:	b913      	cbnz	r3, 800a9ea <__sfp+0x16>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffbd 	bl	800a964 <__sinit>
 800a9ea:	3648      	adds	r6, #72	; 0x48
 800a9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	d503      	bpl.n	800a9fc <__sfp+0x28>
 800a9f4:	6833      	ldr	r3, [r6, #0]
 800a9f6:	b30b      	cbz	r3, 800aa3c <__sfp+0x68>
 800a9f8:	6836      	ldr	r6, [r6, #0]
 800a9fa:	e7f7      	b.n	800a9ec <__sfp+0x18>
 800a9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa00:	b9d5      	cbnz	r5, 800aa38 <__sfp+0x64>
 800aa02:	4b16      	ldr	r3, [pc, #88]	; (800aa5c <__sfp+0x88>)
 800aa04:	60e3      	str	r3, [r4, #12]
 800aa06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa0a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa0c:	f000 f847 	bl	800aa9e <__retarget_lock_init_recursive>
 800aa10:	f7ff ff96 	bl	800a940 <__sfp_lock_release>
 800aa14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa1c:	6025      	str	r5, [r4, #0]
 800aa1e:	61a5      	str	r5, [r4, #24]
 800aa20:	2208      	movs	r2, #8
 800aa22:	4629      	mov	r1, r5
 800aa24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa28:	f7fd fab0 	bl	8007f8c <memset>
 800aa2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa34:	4620      	mov	r0, r4
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	3468      	adds	r4, #104	; 0x68
 800aa3a:	e7d9      	b.n	800a9f0 <__sfp+0x1c>
 800aa3c:	2104      	movs	r1, #4
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff ff62 	bl	800a908 <__sfmoreglue>
 800aa44:	4604      	mov	r4, r0
 800aa46:	6030      	str	r0, [r6, #0]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d1d5      	bne.n	800a9f8 <__sfp+0x24>
 800aa4c:	f7ff ff78 	bl	800a940 <__sfp_lock_release>
 800aa50:	230c      	movs	r3, #12
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	e7ee      	b.n	800aa34 <__sfp+0x60>
 800aa56:	bf00      	nop
 800aa58:	0800ae0c 	.word	0x0800ae0c
 800aa5c:	ffff0001 	.word	0xffff0001

0800aa60 <_fwalk_reent>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4606      	mov	r6, r0
 800aa66:	4688      	mov	r8, r1
 800aa68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa6c:	2700      	movs	r7, #0
 800aa6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa72:	f1b9 0901 	subs.w	r9, r9, #1
 800aa76:	d505      	bpl.n	800aa84 <_fwalk_reent+0x24>
 800aa78:	6824      	ldr	r4, [r4, #0]
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1f7      	bne.n	800aa6e <_fwalk_reent+0xe>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa84:	89ab      	ldrh	r3, [r5, #12]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d907      	bls.n	800aa9a <_fwalk_reent+0x3a>
 800aa8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	d003      	beq.n	800aa9a <_fwalk_reent+0x3a>
 800aa92:	4629      	mov	r1, r5
 800aa94:	4630      	mov	r0, r6
 800aa96:	47c0      	blx	r8
 800aa98:	4307      	orrs	r7, r0
 800aa9a:	3568      	adds	r5, #104	; 0x68
 800aa9c:	e7e9      	b.n	800aa72 <_fwalk_reent+0x12>

0800aa9e <__retarget_lock_init_recursive>:
 800aa9e:	4770      	bx	lr

0800aaa0 <__retarget_lock_acquire_recursive>:
 800aaa0:	4770      	bx	lr

0800aaa2 <__retarget_lock_release_recursive>:
 800aaa2:	4770      	bx	lr

0800aaa4 <__swhatbuf_r>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaac:	2900      	cmp	r1, #0
 800aaae:	b096      	sub	sp, #88	; 0x58
 800aab0:	4614      	mov	r4, r2
 800aab2:	461d      	mov	r5, r3
 800aab4:	da08      	bge.n	800aac8 <__swhatbuf_r+0x24>
 800aab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	061a      	lsls	r2, r3, #24
 800aac0:	d410      	bmi.n	800aae4 <__swhatbuf_r+0x40>
 800aac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aac6:	e00e      	b.n	800aae6 <__swhatbuf_r+0x42>
 800aac8:	466a      	mov	r2, sp
 800aaca:	f000 f903 	bl	800acd4 <_fstat_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	dbf1      	blt.n	800aab6 <__swhatbuf_r+0x12>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aadc:	425a      	negs	r2, r3
 800aade:	415a      	adcs	r2, r3
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	e7ee      	b.n	800aac2 <__swhatbuf_r+0x1e>
 800aae4:	2340      	movs	r3, #64	; 0x40
 800aae6:	2000      	movs	r0, #0
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	b016      	add	sp, #88	; 0x58
 800aaec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaf0 <__smakebuf_r>:
 800aaf0:	898b      	ldrh	r3, [r1, #12]
 800aaf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf4:	079d      	lsls	r5, r3, #30
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	d507      	bpl.n	800ab0c <__smakebuf_r+0x1c>
 800aafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	2301      	movs	r3, #1
 800ab06:	6163      	str	r3, [r4, #20]
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	ab01      	add	r3, sp, #4
 800ab0e:	466a      	mov	r2, sp
 800ab10:	f7ff ffc8 	bl	800aaa4 <__swhatbuf_r>
 800ab14:	9900      	ldr	r1, [sp, #0]
 800ab16:	4605      	mov	r5, r0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7ff f963 	bl	8009de4 <_malloc_r>
 800ab1e:	b948      	cbnz	r0, 800ab34 <__smakebuf_r+0x44>
 800ab20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab24:	059a      	lsls	r2, r3, #22
 800ab26:	d4ef      	bmi.n	800ab08 <__smakebuf_r+0x18>
 800ab28:	f023 0303 	bic.w	r3, r3, #3
 800ab2c:	f043 0302 	orr.w	r3, r3, #2
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	e7e3      	b.n	800aafc <__smakebuf_r+0xc>
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <__smakebuf_r+0x7c>)
 800ab36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	6120      	str	r0, [r4, #16]
 800ab4a:	b15b      	cbz	r3, 800ab64 <__smakebuf_r+0x74>
 800ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 f8d1 	bl	800acf8 <_isatty_r>
 800ab56:	b128      	cbz	r0, 800ab64 <__smakebuf_r+0x74>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f023 0303 	bic.w	r3, r3, #3
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	89a0      	ldrh	r0, [r4, #12]
 800ab66:	4305      	orrs	r5, r0
 800ab68:	81a5      	strh	r5, [r4, #12]
 800ab6a:	e7cd      	b.n	800ab08 <__smakebuf_r+0x18>
 800ab6c:	0800a8fd 	.word	0x0800a8fd

0800ab70 <_malloc_usable_size_r>:
 800ab70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab74:	1f18      	subs	r0, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbc      	itt	lt
 800ab7a:	580b      	ldrlt	r3, [r1, r0]
 800ab7c:	18c0      	addlt	r0, r0, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_raise_r>:
 800ab80:	291f      	cmp	r1, #31
 800ab82:	b538      	push	{r3, r4, r5, lr}
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	d904      	bls.n	800ab94 <_raise_r+0x14>
 800ab8a:	2316      	movs	r3, #22
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab96:	b112      	cbz	r2, 800ab9e <_raise_r+0x1e>
 800ab98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab9c:	b94b      	cbnz	r3, 800abb2 <_raise_r+0x32>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f830 	bl	800ac04 <_getpid_r>
 800aba4:	462a      	mov	r2, r5
 800aba6:	4601      	mov	r1, r0
 800aba8:	4620      	mov	r0, r4
 800abaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abae:	f000 b817 	b.w	800abe0 <_kill_r>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d00a      	beq.n	800abcc <_raise_r+0x4c>
 800abb6:	1c59      	adds	r1, r3, #1
 800abb8:	d103      	bne.n	800abc2 <_raise_r+0x42>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7e7      	b.n	800ab92 <_raise_r+0x12>
 800abc2:	2400      	movs	r4, #0
 800abc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abc8:	4628      	mov	r0, r5
 800abca:	4798      	blx	r3
 800abcc:	2000      	movs	r0, #0
 800abce:	e7e0      	b.n	800ab92 <_raise_r+0x12>

0800abd0 <raise>:
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <raise+0xc>)
 800abd2:	4601      	mov	r1, r0
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f7ff bfd3 	b.w	800ab80 <_raise_r>
 800abda:	bf00      	nop
 800abdc:	20000038 	.word	0x20000038

0800abe0 <_kill_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d07      	ldr	r5, [pc, #28]	; (800ac00 <_kill_r+0x20>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	4611      	mov	r1, r2
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	f7f7 faeb 	bl	80021c8 <_kill>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	d102      	bne.n	800abfc <_kill_r+0x1c>
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	b103      	cbz	r3, 800abfc <_kill_r+0x1c>
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	bd38      	pop	{r3, r4, r5, pc}
 800abfe:	bf00      	nop
 800ac00:	2000060c 	.word	0x2000060c

0800ac04 <_getpid_r>:
 800ac04:	f7f7 bad8 	b.w	80021b8 <_getpid>

0800ac08 <__sread>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	f000 f894 	bl	800ad3c <_read_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	bfab      	itete	ge
 800ac18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac1c:	181b      	addge	r3, r3, r0
 800ac1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac22:	bfac      	ite	ge
 800ac24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac26:	81a3      	strhlt	r3, [r4, #12]
 800ac28:	bd10      	pop	{r4, pc}

0800ac2a <__swrite>:
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	461f      	mov	r7, r3
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	05db      	lsls	r3, r3, #23
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	4616      	mov	r6, r2
 800ac3a:	d505      	bpl.n	800ac48 <__swrite+0x1e>
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	2302      	movs	r3, #2
 800ac42:	2200      	movs	r2, #0
 800ac44:	f000 f868 	bl	800ad18 <_lseek_r>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	f000 b817 	b.w	800ac90 <_write_r>

0800ac62 <__sseek>:
 800ac62:	b510      	push	{r4, lr}
 800ac64:	460c      	mov	r4, r1
 800ac66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6a:	f000 f855 	bl	800ad18 <_lseek_r>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	bf15      	itete	ne
 800ac74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac7e:	81a3      	strheq	r3, [r4, #12]
 800ac80:	bf18      	it	ne
 800ac82:	81a3      	strhne	r3, [r4, #12]
 800ac84:	bd10      	pop	{r4, pc}

0800ac86 <__sclose>:
 800ac86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8a:	f000 b813 	b.w	800acb4 <_close_r>
	...

0800ac90 <_write_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	; (800acb0 <_write_r+0x20>)
 800ac94:	4604      	mov	r4, r0
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	602a      	str	r2, [r5, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f7f7 fac9 	bl	8002236 <_write>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_write_r+0x1e>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_write_r+0x1e>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	2000060c 	.word	0x2000060c

0800acb4 <_close_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_close_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f7 fad5 	bl	800226e <_close>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_close_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_close_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	2000060c 	.word	0x2000060c

0800acd4 <_fstat_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_fstat_r+0x20>)
 800acd8:	2300      	movs	r3, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	4608      	mov	r0, r1
 800acde:	4611      	mov	r1, r2
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	f7f7 fad0 	bl	8002286 <_fstat>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	d102      	bne.n	800acf0 <_fstat_r+0x1c>
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	b103      	cbz	r3, 800acf0 <_fstat_r+0x1c>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	bd38      	pop	{r3, r4, r5, pc}
 800acf2:	bf00      	nop
 800acf4:	2000060c 	.word	0x2000060c

0800acf8 <_isatty_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_isatty_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f7 facf 	bl	80022a6 <_isatty>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_isatty_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_isatty_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	2000060c 	.word	0x2000060c

0800ad18 <_lseek_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_lseek_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f7 fac8 	bl	80022bc <_lseek>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_lseek_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_lseek_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	2000060c 	.word	0x2000060c

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f7 fa56 	bl	80021fc <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	2000060c 	.word	0x2000060c

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
